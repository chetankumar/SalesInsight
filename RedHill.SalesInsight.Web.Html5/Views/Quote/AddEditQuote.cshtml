@model RedHill.SalesInsight.Web.Html5.Models.QuotationPageModel
@using RedHill.SalesInsight.Web.Html5.Helpers;
@{
    ViewBag.Title = "Quote : " + Model.ProjectView.ProjectView.ProjectName;
    ViewBag.UsingDatePicker = true;
    ViewBag.UsingMultiselect = true;
    ViewBag.UsingDataTable = true;
    ViewBag.UsingAngular = true;
    ViewBag.UsingCKEditor = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool aujsAPIEnabled = (ViewBag.AUJSAPIEnabled != null && ViewBag.AUJSAPIEnabled == true);
    var company = ConfigurationHelper.Company;
    var access = ViewBag.AccessRule;
}
<div class="page-head">
    <h2>
        @if (Model.QuotationId > 0)
        {
            <span>Edit Quotation</span>
        }
        else
        {
            <span>Add Quotation</span>
        }
    </h2>
    <ol class="breadcrumb">
        <li><a href="/Home/Index">Home</a></li>
        <li><a href="/Quote/Index">Quotations</a></li>
        @if (Model.ProjectView.ProjectView.ProjectId > 0)
        {
            <li><a href="/Home/EditProject/@Model.ProjectView.ProjectView.ProjectId">@Model.ProjectView.ProjectView.ProjectName</a></li>

        }
        @if (Model.QuotationId > 0)
        {
            <li>Quote# @Model.QuotationId</li>
        }
        else
        {
            <li>New</li>
        }
    </ol>
</div>
<div class="cl-mcont">
    <div class="block-flat">
        @if (TempData["PushQuoteSuccess"] != null)
        {
            if (Convert.ToBoolean(TempData["PushQuoteSuccess"]))
            {
                <div class="alert alert-success">
                    <strong>Successfully pushed the Quote to dispatch system</strong>
                </div>
            }
            else
            {
                <div class="alert alert-danger">
                    <strong>Could not push the Quote to dispatch system</strong>
                </div>
            }
        }

        @Html.Partial("_ErrorView")
        @if (Model.QuotationId > 0)
        {
            <div class="well padding-0">
                <div class="col-md-5">
                    @Html.Partial("_BasicQuotationProfile", Model.CustomerView.Profile)
                </div>
                <div class="col-md-7">
                    <div class="row">
                        <div class="col-sm-12 text-right">
                            @Html.Partial("_QuoteActions", Model.CustomerView.Profile)
                        </div>
                    </div>
                </div>
                <div style="clear: both"></div>
            </div>
        }
        <div class="panel-group" data-ng-app="SIWeb">
            <div class="panel panel-primary">
                <div class="panel-heading" role="tab" id="headingOne">
                    <h4 class="panel-title">
                        Job Information
                    </h4>
                </div>
                @using (Html.BeginForm("UpdateQuotation", "Quote", FormMethod.Post, new { @class = "form form-horizontal" }))
                {
                    <div class="panel-body">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-4">Project</label>
                                <div class="col-md-8">
                                    @Html.HiddenFor(x => x.QuotationId)
                                    @Html.HiddenFor(x => x.ProjectView.ProjectView.ProjectId)
                                    @Html.HiddenFor(x => x.ProjectView.ProjectView.BidDate)
                                    @Html.TextBoxFor(x => x.ProjectView.ProjectView.ProjectName, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Address</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.ProjectView.ProjectView.Address, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">City</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.ProjectView.ProjectView.City, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">State</label>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(x => x.ProjectView.ProjectView.State, new { @class = "form-control" })
                                </div>
                                <label class="control-label col-md-2">Zipcode</label>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(x => x.ProjectView.ProjectView.Zipcode, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Market Segment</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(x => x.ProjectView.ProjectView.MarketSegmentId, Model.ProjectView.ChooseMarketSegment, "", new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4"></label>
                                <div class="col-md-8">
                                    <p class="form-control-static">
                                        @Html.CheckBoxFor(x => x.ProjectView.ProjectView.ExcludeFromReports) Exclude From Reports
                                        <br />
                                        <br />
                                        @Html.CheckBoxFor(x => x.ProjectView.ProjectView.Active) Active
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-4">Customer Job Ref</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.ProjectView.ProjectView.CustomerRefName, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Concrete Pricing Plant</label>
                                <div class="col-md-8">
                                    @if ((Model.MixView != null && Model.MixView.QuotationMixes != null && Model.MixView.QuotationMixes.Count() > 0) || (Model.AddOnsView.QuoteAddon != null && Model.AddOnsView.QuoteAddon.Count() > 0))
                                    {
                                        @Html.DropDownListFor(x => x.PlantId, Model.ChoosePlants, new { @class = "form-control", @disabled = "disabled", @title = "Pricing Plant cannot be changed when there are mixes or add-ons on the quote.  Please delete quote mixes and add-ons to edit the pricing plant." })
                                        @Html.HiddenFor(x => x.PlantId)

                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(x => x.PlantId, Model.ChoosePlants, new { @class = "form-control" })
                                    }
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Pricing Month</label>
                                <div class="col-md-8">
                                    @if (Model.CustomerView.Profile.Status == "APPROVED" && Model.CustomerView.Profile.EnableEdit == false)
                                    {
                                        @Html.TextBoxFor(x => x.PricingMonth, new { @class = "form-control", @disabled = "disabled", @title = "The pricing month cannot be changed if the quote is approved" })
                                        @Html.HiddenFor(x => x.PricingMonth)
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(x => x.PricingMonth, new { @class = "form-control monthpicker" })
                                    }
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Sales Staff</label>
                                <div class="col-md-8">
                                    @if (Model.CustomerView.Profile.Status == "APPROVED" && Model.CustomerView.Profile.EnableEdit == false)
                                    {
                                        @Html.DropDownListFor(x => x.ProjectView.SalesStaffId, Model.ProjectView.ChooseSalesStaff, "", new { @class = "form-control multiselect", @disabled = "disabled", @title = "Sales Staff cannot be changed if the quote is approved" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(x => x.ProjectView.SalesStaffId, Model.ProjectView.ChooseSalesStaff, "", new { @class = "form-control multiselect" })

                                    }
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Status</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(x => x.ProjectView.ProjectView.ProjectStatusId, Model.ProjectView.ChooseProjectStatuses, "", new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-4">Distance To Job</label>
                                <div class="col-sm-8">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.ProjectView.ProjectView.DistanceToJob, new { @class = "form-control" })
                                        <span class="input-group-addon">@company.DeliveryDistance</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-4">To Job</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.ProjectView.ProjectView.ToJobMinutes, new { @class = "form-control" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                                <label class="control-label col-sm-2">Wait</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.ProjectView.ProjectView.WaitOnJob, new { @class = "form-control" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-4">Return</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.ProjectView.ProjectView.ReturnMinutes, new { @class = "form-control" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                                <label class="control-label col-sm-2">Wash</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.ProjectView.ProjectView.WashMinutes, new { @class = "form-control" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group qcReq">
                                <label class="control-label col-sm-4">QC Requirements</label>
                                <div class="col-md-8">
                                    @Html.HiddenFor(x => x.DistrictQcRequirement)
                                    @Html.DropDownList("QcReqIds", Model.QCRequirement, new { @class = "form-control multiselect", @multiple = "multiple" })
                                </div>
                            </div>
                            <div class="form-group backupPlant qcReq">
                                <label class="control-label col-sm-4">Backup Plant</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(m => m.BackupPlantId, new SelectList(Model.BackupPlantList, "PlantId", "Name", Model.BackupPlantId), "", new { @class = "form-control multiselect" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <h3 class="col-md-12">
                        Customer Info
                        <hr />
                    </h3>
                    <div class="panel-body">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-4">Customer</label>
                                <div class="col-md-8">
                                    <div class="input-group">
                                        @Html.HiddenFor(x => x.QuotationId)
                                        @*@Html.DropDownListFor(x => x.CustomerView.CustomerId, Model.CustomerView.ChooseCustomers,
                                            string.Empty, new
                                            {
                                                @class = "form-control master_select primary_customer_select multiselect",
                                                @data_selected = Model.CustomerView.CustomerContactId,
                                                @data_url = "/Json/GetContactsForCustomer/",
                                                @data_dependent = "#CustomerView_CustomerContactId",
                                                @data_triggerChange = "false"
                                            })*@
                                        <select id="CustomerView_CustomerId" name="CustomerView.CustomerId" class="form-control master_select primary_customer_select multiselect"
                                                data-selected="@Model.CustomerView.CustomerContactId"
                                                data-triggerChange="false"
                                                data-url="/Json/GetContactsForCustomer/"
                                                data-dependent="#CustomerView_CustomerContactId">
                                            <option value=""></option>
                                        </select>
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-primary edit_customer_btn"><span class="glyphicon glyphicon-edit"></span></button>
                                            <button type="button" class="btn btn-success add_customer_btn"><span class="glyphicon glyphicon-plus"></span></button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Customer Contact</label>
                                <div class="col-md-8">
                                    <div class="input-group">
                                        @if (Model.CustomerView.ChooseContacts != null)
                                        {
                                            @Html.DropDownListFor(x => x.CustomerView.CustomerContactId, Model.CustomerView.ChooseContacts, new { @class = "form-control customer_contact_select" })
                                        }
                                        else
                                        {
                                            <select id="CustomerView_CustomerContactId" name="CustomerView.CustomerContactId" class="form-control customer_contact_select"></select>
                                        }
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-primary edit_contact_btn"><span class="glyphicon glyphicon-edit"></span></button>
                                            <button type="button" class="btn btn-success add_contact_btn"><span class="glyphicon glyphicon-plus"></span></button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            @*<div class="form-group">
                                    <label class="control-label col-md-5" style="text-align:left">Show Customer Number on PDF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Html.CheckBoxFor(x => x.DetailsView.CustomerNumberOnPDF)</label>
                                </div>*@
                            <div class="form-group">
                                <label class="control-label col-md-4">Show Customer Number on PDF</label>
                                <div class="col-md-8">
                                    <p class="form-control-static">
                                        @Html.CheckBoxFor(x => x.DetailsView.CustomerNumberOnPDF)
                                        </p>
</div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Title</label>
                                <div class="col-md-8">
                                    <p class="form-control-static cc_title">
                                        @Model.CustomerView.CustomerContactInfo.Title
                                    </p>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Contact Phone</label>
                                <div class="col-md-8">
                                    <p class="form-control-static cc_phone">
                                        @Model.CustomerView.CustomerContactInfo.Phone
                                    </p>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Contact Fax</label>
                                <div class="col-md-8">
                                    <p class="form-control-static cc_fax">
                                        @Model.CustomerView.CustomerContactInfo.Fax
                                    </p>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Contact Email</label>
                                <div class="col-md-8">
                                    <p class="form-control-static cc_email">
                                        @Model.CustomerView.CustomerContactInfo.Email
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="control-label col-md-4">Tax Code</label>
                                <div class="col-md-8">
                                    @*   @Html.DropDownListFor(x => x.CustomerView.TaxCodeId, Model.CustomerView.ChooseTaxCodes, new { @class = "form-control multiselect" })*@
                                    <select id="CustomerView_TaxCodeId" name="CustomerView.TaxCodeId" class="form-control multiselect"></select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Tax Exempt Reason</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.CustomerView.TaxExcemptReason, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label"></label>
                            </div>
                            <div class="form-group">
                                <label class="control-label"></label>
                            </div>
                            <div class="form-group">
                                <label class="control-label"></label>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4"></label>
                                <div class="col-md-8">
                                    <button type="submit" class="pull-right btn btn-primary">Save Job Information</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            @if (Model.QuotationId > 0)
            {
                <div class="panel panel-primary approved_disable">
                    <div class="panel-heading" role="tab" id="heading5">
                        <h4 class="panel-title">
                            @Html.CheckBoxFor(x => x.DetailsView.ConcreteEnabled, new { @onclick = "enableProductType('concrete')" })
                            Concrete Products
                        </h4>
                    </div>
                    <div class="panel-body" id="concretePanel">
                        <div class="">
                            <div class="form-inline">
                                <a href="javascript:void(0);" class="quick_add_mix btn btn-primary btn-sm add_mix_btn">
                                    <i class="fa fa-fw fa-plus"></i>Standard Mix
                                </a>
                                <a href="javascript:void(0);" class="show_formulation_search btn btn-primary btn-sm">
                                    <i class="fa fa-fw fa-search"></i>Standard Mix
                                </a>
                                @if (!ViewBag.AccessRule.ExcludeCustomMix)
                                {
                                    <a href="/Quote/AddQuotationCustomMix/@Model.QuotationId" class="btn btn-primary btn-sm add_mix_btn space r">
                                        <i class="fa fa-fw fa-plus"></i>Custom Mix
                                    </a>
                                }

                                @if (ViewBag.AccessRule.Enable5skPricing)
                                {
                                    <span style="border: 1px #dddddd solid;padding: 11px 20px 17px 0px;">
                                        <div class="item-inline space l">
                                            <label class="checkbox">
                                                <input type="checkbox" class="fsk_switch" @(Model.DetailsView.FskPriceId != null ? "checked=checked" : "") />
                                                Use Sack Pricing
                                            </label>
                                        </div>
                                        <div class="fsk_related item-inline space l" style=@(Model.DetailsView.FskPriceId != null ? "" : "display:none")>
                                            @Html.DropDownListFor(x => x.DetailsView.FskPriceId, Model.Choose5skPricingPlant, new { @id = "PricingCity", @class = "form-control multiselect input-sm" })
                                        </div>
                                        <div class="fsk_related item-inline space l" style=@(Model.DetailsView.FskPriceId != null ? "" : "display:none")>
                                            @Html.TextBoxFor(x => x.DetailsView.FskBasePrice, "{0:N2}", new { @id = "FskBasePrice", @class = "form-control input-sm input-small fsk-price" })
                                        </div>
                                    </span>
                                }
                                else
                                {
                                    <span style="border: 1px #dddddd solid;padding: 11px 20px 17px 0px;display:none">
                                        <div class="item-inline space l" style="display: none;">
                                            <label class="checkbox">
                                                <input type="checkbox" class="fsk_switch" disabled="disabled" @(Model.DetailsView.FskPriceId != null ? "checked=checked" : "") />
                                                Use Sack Pricing
                                            </label>
                                        </div>
                                        <div class="fsk_related item-inline space l padding-0" style="display: none;">
                                            @Html.DropDownListFor(x => x.DetailsView.FskPriceId, Model.Choose5skPricingPlant, new { @id = "PricingCity", @class = "form-control multiselect input-sm" })
                                        </div>
                                        <div class="fsk_related item-inline space l" style="display: none;">
                                            @Html.TextBoxFor(x => x.DetailsView.FskBasePrice, "{0:N2}", new { @id = "FskBasePrice", @class = "form-control input-sm input-small fsk-price" })
                                        </div>
                                    </span>
                                }

                                <div class="pull-right">
                                    <div class="item-inline space l">
                                        <label class="checkbox">
                                            <input type="checkbox" class="public_comments" />
                                            Add Comments
                                        </label>
                                    </div>
                                    <div class="item-inline space l">
                                        <a href="javascript:void(0);" class="btn btn-primary btn-sm refresh_all_btn" data-toggle="tooltip" title="Click this button to update profitability calculations for all mixes. Only relevant when project-level and/or plant-level parameters changed subsequent to adding mixes.">
                                            <i class="fa fa-refresh"></i>Refresh All
                                        </a>
                                    </div>
                                </div>
                            </div>
                            @if (Model.DetailsView.AdjustMixPrice != 0)
                            {
                                <div class="form-group">
                                    <div class="adjust-price">
                                        <div>
                                            <a href="javascript:void(0);" style="margin-top: -6px;" class="btn btn-primary btn-sm" onclick="AdjustMixPrice('up')">
                                                <i class="fa fa-arrow-up"></i>
                                            </a>
                                            <a href="javascript:void(0);" style="margin-top: -6px;" class="btn btn-primary btn-sm" onclick="AdjustMixPrice('down')">
                                                <i class="fa fa-arrow-down"></i>
                                            </a>
                                            &nbsp;&nbsp;Price Adjustment<span>  $ <input id="AdjustMixPrice" name="AdjustMixPrice" type="text" value=@Model.DetailsView.AdjustMixPrice style="width: 54px;" onkeypress="return validateFloatKeyPress(this,event);"></span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <br />
                        <div class="no-more-tables">
                            <table class="table table-striped table-bordered" id="quoteMixTable">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th style="@(Model.DetailsView.FskPriceId != null ? "" : "display:none")" class="fsk_related">Details</th>
                                        <th style="text-align: center" class="text-center">Seq</th>
                                        <th>Select Mix</th>
                                        <th style="min-width: 200px;">Quote Description</th>
                                        <th style="@(Model.DetailsView.FskPriceId != null ? "" : "display:none")" class="fsk_related">Content</th>
                                        <th style="max-width: 50px">@company.DeliveryQtyUomPlural</th>
                                        @if (!access.HidePrice)
                                        {
                                            <th>Price</th>
                                        }
                                        <th>Unload</th>
                                        <th>Avg Load</th>
                                        <th class="public_notes" style="display: none;">Public Comments</th>
                                        @if (!access.HideSpread)
                                        {
                                            <th class="public_notes">Spread</th>
                                        }
                                        @if (!access.HideContribution)
                                        {
                                            <th class="public_notes">Cont</th>
                                        }
                                        @if (!access.HideProfit)
                                        {
                                            <th class="public_notes">Profit</th>
                                        }
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="mix_table_body">
                                    @foreach (RedHill.SalesInsight.DAL.QuotationMix mix in Model.MixView.QuotationMixes.OrderBy(x => x.Position))
                                    {
                                        <tr class="mix_row" data-cyd-hour="@mix.CydHour.GetValueOrDefault()" data-mix-cost="@mix.MixCost" data-addon-cost="@mix.AddonCost" data-id="@mix.Id" id="row_@mix.Id">
                                            <td data-title="edit">
                                                @if (mix.StandardMixId == null)
                                                {
                                                    <a href="/Quote/EditQuotationCustomMix/@mix.Id" class="btn btn-xs btn-primary">
                                                        <i class="glyphicon glyphicon-edit"></i>
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a href="/Quote/EditQuotationStandardMix/@mix.Id" class="btn btn-xs btn-primary">
                                                        <i class="glyphicon glyphicon-edit"></i>
                                                    </a>
                                                }
                                            </td>
                                            <td data-title="5sk" style="@(Model.DetailsView.FskPriceId != null ? "" : "display:none")" class="fsk_related">
                                                @{Tuple<string, decimal> fskContent = Model.FindFskPriceContent(mix.Id, Model.DetailsView.FskPriceId);}
                                                @if (mix.StandardMixId == null)
                                                {
                                                }
                                                else
                                                {
                                                    <a href="#" class="show_5sk_calc_btn btn btn-xs btn-primary">
                                                        <i class="fa fa-list-ul"></i>
                                                    </a>
                                                }
                                            </td>
                                            <td data-title="Seq" class="text-center"><span></span><i data-dir="up" class="fa fa-fw fa-arrow-up move_row"></i><i data-dir="down" class="fa fa-fw fa-arrow-down move_row"></i></td>
                                            <td data-title="Mix">
                                                @if (mix.StandardMixId == null)
                                                {
                                                    @(mix.CustomMixId + " - " + mix.QuotedDescription)
                                                }
                                                else
                                                {
                                                    @Html.DropDownList("mix_selection",
                 new SelectList(Model.StandardMixes.Select(x => new { Text = x.Number + "-" + x.SalesDesc, Value = x.Id }), "Value", "Text", mix.StandardMixId),
                 new { @class = "form-control input-sm mix_field multiselect" })
                                                }
                                            </td>
                                            <td data-title="Description">
                                                <input class="desc_field input-sm form-control" value="@(mix.QuotedDescription)" />
                                            </td>
                                            <td data-title="5sk details" style="@(Model.DetailsView.FskPriceId != null ? "" : "display:none")" class="fsk_related">
                                                <span class="content_field">@fskContent.Item1</span>
                                            </td>
                                            <td data-title="Volume" style="max-width: 100px; min-width: 70px;">
                                                <input class="volume_field input-sm form-control" data-old-value="@(mix.Volume.GetValueOrDefault())" value="@(mix.Volume.GetValueOrDefault())" />
                                            </td>
                                            @if (!access.HidePrice)
                                            {
                                                <td data-title="Price" style="max-width: 100px; min-width: 70px;">
                                                    <input class="price_field input-sm form-control" data-old-value="@(mix.Price.GetValueOrDefault().ToString("N2"))" value="@(mix.Price.GetValueOrDefault().ToString("N2"))" />
                                                </td>
                                            }
                                            <td data-title="Unload" style="max-width: 100px; min-width: 70px;">
                                                <input class="unload_field input-sm form-control" data-old-value="@(mix.Unload.GetValueOrDefault().ToString("N0"))" value="@(mix.Unload.GetValueOrDefault().ToString("N0"))" />
                                            </td>
                                            <td data-title="Avg Load" style="max-width: 100px; min-width: 70px;">
                                                <input class="avg_load_field input-sm form-control" data-old-value="@(mix.AvgLoad.GetValueOrDefault().ToString("N2"))" value="@(mix.AvgLoad.GetValueOrDefault().ToString("N2"))" />
                                            </td>
                                            <td data-title="Public Comment" class="public_notes" style="max-width: 235px; min-width: 200px; display: none;">
                                                <input class="public_notes_field input-sm form-control" value="@(mix.PublicNotes)" />
                                            </td>
                                            @if (!access.HideSpread)
                                            {
                                                <td data-title="Spread" class="spread_box public_notes">$@(mix.Spread.GetValueOrDefault().ToString("N2"))</td>
                                            }
                                            @if (!access.HideContribution)
                                            {
                                                <td data-title="Contribution" class="contribution_box public_notes">$@(mix.Contribution.GetValueOrDefault().ToString("N2"))</td>
                                            }
                                            @if (!access.HideProfit)
                                            {
                                                <td data-title="Profit" class="profit_box public_notes">$@(mix.Profit.GetValueOrDefault().ToString("N2"))</td>
                                            }
                                            <td data-title="Delete">
                                                <a href="/Quote/DeleteQuotationMix/@mix.Id?quotationId=@mix.QuotationId" class="delete_mix btn btn-danger btn-xs" data-confirm="Are you sure you want to delete this mix?">
                                                    <i class="fa fa-trash fa-fw"></i>
                                                </a>
                                            </td>
                                        </tr>
                                                    }
                                </tbody>
                            </table>
                        </div>
                        <h3>Quotation Summary and Analysis</h3>
                        <div id="summary_section">
                            @Html.Partial("_QuotationStatistics", Model.CustomerView.Profile)
                        </div>
                        <div data-ng-controller="SIWeb.QuoteAddOns">
                            <h3 class="">Quote-Level Add-Ons</h3>
                            <div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <a class="btn btn-primary btn-sm addOn-btn" data-ng-click="addNew()">
                                            <i class="fa fa-fw fa-plus"></i>Add-On
                                        </a>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="addon-errors">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="no-more-tables" style="margin-top: 15px;">
                                <table class="table table-bordered table-striped table-addon">
                                    <thead>
                                        <tr>
                                            <th>Select Add-On</th>
                                            <th>Quote Description</th>
                                            <th>Price</th>
                                            <th>Per</th>
                                            <th>Table</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr class="item-row" data-ng-repeat="quoteAddOnDetail in quoteAddOnDetails">
                                            <td data-title="Select Add-On">
                                                <div class="{{'q_a_' + $index }}">
                                                    <select class="form-control input-sm multiselect" data-ng-model="quoteAddOnDetail.AddonId" data-ng-change="UpdateAddon(this, quoteAddOnDetail.AddonId, {{ quoteAddOnDetail.AddonId }}, $index)"
                                                            data-ng-options="p.Id as p.Code+(p.Description==''?'':' - '+p.Description) for p in addonList"></select>
                                                </div>
                                            </td>
                                            <td data-title="Description">
                                                <input type="text" class="form-control" data-ng-model="quoteAddOnDetail.Description" data-ng-blur="UpdateAddonFields($index)" />
                                            </td>
                                            <td data-title="Price">
                                                <input type="text" class="form-control enable-float" data-ng-blur="UpdateAddonFields($index)" data-ng-model="quoteAddOnDetail.Price" required />
                                            </td>
                                            <td data-title="Per">
                                                <span data-ng-bind="quoteAddOnDetail.QuoteUomName"></span>
                                            </td>
                                            <td data-title="Table">
                                                <input type="checkbox" data-toggle="tooltip" title="When checked, Add-on will appear in Quote Mixes table instead of Quote Add-On sections." data-ng-change="UpdateAddonFields($index)" data-ng-model="quoteAddOnDetail.IsIncludeTable" />
                                            </td>
                                            <td>
                                                <a class="btn btn-danger btn-sm" data-product-type="addon" ng-click="deleteQuoteAddon($index,$event)" href="javascript:void(0);" data-advanced-confirm="Confirm?" data-addon-id="{{quoteAddOnDetail.AddonId}}" data-target="{{quoteAddOnDetail.Id}}">
                                                    <i class='fa fa-trash'></i>
                                                </a>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                                                    if (Model.EnableAggregateProduct)
                                                    {
                                                        <div class="panel panel-primary approved_disable">
                                                            <div class="panel-heading" role="tab" id="heading5">
                                                                <h4 class="panel-title">
                                                                    @Html.CheckBoxFor(x => x.DetailsView.AggregateEnabled, new { @onclick = "enableProductType('aggregate')" })
                                                                    Aggregate Products
                                                                </h4>
                                                                <div class="col-md-8 pull-right">
                                                                    <div class="agg-errors">

                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div data-ng-controller="SIWeb.QuotationAggregate">
                                                                <div class="panel-body" id="aggregatePanel">
                                                                    <div class="form-inline">
                                                                        <a href="javascript:void(0);" class="quick_add_agg btn btn-primary btn-sm" data-ng-click="addNewQuoteAgg()">
                                                                            <i class="fa fa-fw fa-plus"></i>Add Product
                                                                        </a>
                                                                        <select class="form-control agg_plant_ddl" data-ng-model="aggregatePlantId" data-ng-change="getAllPlantAddons(aggregatePlantId)"
                                                                                data-ng-options="p.Value as p.Text for p in aggPlantList">
                                                                            <option value=""></option>
                                                                        </select>
                                                                        @Html.HiddenFor(x => x.AggregatePlantId)
                                                                    </div>
                                                                    <br />
                                                                    <div class="no-more-tables">
                                                                        <table class="table table-striped table-bordered table-aggregate" id="quoteAggTable">
                                                                            <thead>
                                                                                <tr>
                                                                                    <th style="text-align: center" class="text-center">Seq</th>
                                                                                    <th>Select Product</th>
                                                                                    <th style="min-width: 200px;">Quote Description</th>
                                                                                    <th>Qty</th>
                                                                                    <th>Product Price</th>
                                                                                    <th>Freight</th>
                                                                                    <th>Public Comments</th>
                                                                                    <th>Total Price</th>
                                                                                    <th>Total Revenue</th>
                                                                                    <th></th>
                                                                                </tr>
                                                                            </thead>
                                                                            <tbody>
                                                                                <tr class="item-row" data-ng-repeat="quoteAggregateDetail in quoteAggregateDetails">
                                                                                    <td data-title="Seq" class="text-center"><span></span><i data-dir="up" class="fa fa-fw fa-arrow-up move_row"></i><i data-dir="down" class="fa fa-fw fa-arrow-down move_row"></i></td>
                                                                                    <td data-title="Select Product">
                                                                                        <div class="{{'q_agg_' + $index }}">
                                                                                            <select class="form-control input-sm multiselect" data-ng-model="quoteAggregateDetail.AggregateProductId" data-ng-change="UpdateQuoteAggregate(this, quoteAggregateDetail.AggregateProductId, {{ quoteAggregateDetail.AggregateProductId }}, $index)"
                                                                                                    data-ng-options="p.Id as p.Code+(p.Description==''?'':' - '+p.Description) for p in aggProduct"></select>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td data-title="Quote Description">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteAggregateDetail.QuotedDescription" data-ng-blur="UpdateQuoteAggFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Qty">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteAggregateDetail.Qty" data-ng-blur="UpdateQuoteAggFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Product Price">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteAggregateDetail.Price" data-ng-blur="UpdateQuoteAggFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Freight">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteAggregateDetail.Freight" data-ng-blur="UpdateQuoteAggFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Public Comments">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteAggregateDetail.PublicComments" data-ng-blur="UpdateQuoteAggFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Total Price">
                                                                                        <span class="agg-totalPrice_{{$index }}">${{quoteAggregateDetail.TotalPrice | number:2}}</span>
                                                                                    </td>
                                                                                    <td data-title="Total Revenue">
                                                                                        <span class="agg-totalRevenue_{{$index }}">${{quoteAggregateDetail.TotalRevenue | number:2}}</span>
                                                                                    </td>
                                                                                    <td>
                                                                                        <delete-button different-event="deleteAggregateProduct($index,quoteAggregateDetail.Id)"></delete-button>
                                                                                        @*<a class="btn btn-danger btn-sm" data-agg-id="{{quoteAggregateDetail.Id}}" data-target="{{quoteAggregateDetail.Id}}"
                                                                                               data-product-type="aggregate" ng-click="deleteQuoteAggregate($index,$event)" href="javascript:void(0);" data-advanced-confirm="Confirm?">
                                                                                                <i class='fa fa-trash'></i>
                                                                                            </a>*@
                                                                                    </td>
                                                                                </tr>
                                                                            </tbody>
                                                                        </table>
                                                                    </div>
                                                                    <h3 class="">Quote-Level Aggregate Add-Ons</h3>
                                                                    <div>
                                                                        <div class="row">
                                                                            <div class="col-md-4">
                                                                                <a class="btn btn-primary btn-sm aggregateAddOn-btn" data-ng-click="addNewAggregateAddon()">
                                                                                    <i class="fa fa-fw fa-plus"></i>Add-On
                                                                                </a>
                                                                            </div>
                                                                            <div class="col-md-8">
                                                                                <div class="aggregateAddon-errors">
                                                                                    @*<div class="alert alert-warning alert-dismissable fade in">
                                                                                        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                                                                                        <strong>Warning!</strong> This alert box could indicate a warning that might need attention.
                                                                                        </div>*@
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="no-more-tables" style="margin-top: 15px;">
                                                                        <table class="table table-bordered table-striped table-aggregateAddon">
                                                                            <thead>
                                                                                <tr>
                                                                                    <th>Select Add-On</th>
                                                                                    <th>Quote Description</th>
                                                                                    <th>Price</th>
                                                                                    <th>Per</th>
                                                                                    <th>Table</th>
                                                                                    <th></th>
                                                                                </tr>
                                                                            </thead>
                                                                            <tbody>
                                                                                <tr class="item-row" data-ng-repeat="quoteAggregateAddOnDetail in quoteAggregateAddonDetails">
                                                                                    <td data-title="Select Add-On">
                                                                                        <div class="{{'q_aggAddon_' + $index }}">
                                                                                            <select class="form-control input-sm multiselect" data-ng-model="quoteAggregateAddOnDetail.AddonId" data-ng-change="UpdateAggregateAddon(this, quoteAggregateAddOnDetail.AddonId, {{ quoteAggregateAddOnDetail.AddonId }}, $index)"
                                                                                                    data-ng-options="p.Id as p.Code+(p.Description==''?'':' - '+p.Description) for p in addonList"></select>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td data-title="Description">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteAggregateAddOnDetail.Description" data-ng-blur="UpdateAggregateAddonFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Price">
                                                                                        <input type="text" class="form-control enable-float" data-ng-blur="UpdateAggregateAddonFields($index)" data-ng-model="quoteAggregateAddOnDetail.Price" required />
                                                                                    </td>
                                                                                    <td data-title="Per">
                                                                                        <span data-ng-bind="quoteAggregateAddOnDetail.QuoteUomName"></span>
                                                                                    </td>
                                                                                    <td data-title="Table">
                                                                                        <input type="checkbox" data-ng-change="UpdateAggregateAddonFields($index)" data-ng-model="quoteAggregateAddOnDetail.IsIncludeTable" />
                                                                                    </td>
                                                                                    <td>
                                                                                        <delete-button different-event="deleteAggregateAddon($index,quoteAggregateAddOnDetail.Id)"></delete-button>
                                                                                    </td>
                                                                                </tr>
                                                                            </tbody>
                                                                        </table>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }

                                                    if (Model.EnableBlockProduct)
                                                    {
                                                        <div class="panel panel-primary approved_disable">
                                                            <div class="panel-heading" role="tab" id="heading5">
                                                                <h4 class=" panel-title">
                                                                    @Html.CheckBoxFor(x => x.DetailsView.BlockEnabled, new { @onclick = "enableProductType('block')" })
                                                                    Block Products
                                                                </h4>
                                                                <div class="col-md-8 pull-right">
                                                                    <div class="blk-errors">
                                                                        @*<div class="alert alert-warning alert-dismissable fade in">
                                                                                <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                                                                                <strong>Warning!</strong> This alert box could indicate a warning that might need attention.
                                                                            </div>*@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div data-ng-controller="SIWeb.QuotationBlock">
                                                                <div class="panel-body" id="blockPanel">
                                                                    <div class="form-inline">
                                                                        <a href="javascript:void(0);" class="quick_add_block btn btn-primary btn-sm" data-ng-click="addNewQuoteBlock()">
                                                                            <i class="fa fa-fw fa-plus"></i>Add Product
                                                                        </a>
                                                                        @*@Html.DropDownListFor(x => x.BlockPlantId, Model.ChooseBlockPlants, "", new { @class = "form-control" })*@
                                                                        <select class="form-control block_plant_ddl" data-ng-model="blockPlantId" data-ng-change="getAllBlockPlantAddons(blockPlantId)"
                                                                                data-ng-options="p.Value as p.Text for p in blockPlantList">
                                                                            <option value=""></option>
                                                                        </select>
                                                                        @Html.HiddenFor(x => x.BlockPlantId)
                                                                    </div>
                                                                    <br />
                                                                    <div class="no-more-tables">
                                                                        <table class="table table-striped table-bordered table-block" id="quoteBlockTable">
                                                                            <thead>
                                                                                <tr>
                                                                                    <th style="text-align: center" class="text-center">Seq</th>
                                                                                    <th>Select Product</th>
                                                                                    <th style="min-width: 200px;">Quote Description</th>
                                                                                    <th>Qty</th>
                                                                                    <th>Product Price</th>
                                                                                    <th>Freight</th>
                                                                                    <th>Public Comments</th>
                                                                                    <th>Total Price</th>
                                                                                    <th>Total Revenue</th>
                                                                                    <th></th>
                                                                                </tr>
                                                                            </thead>
                                                                            <tbody>
                                                                                <tr class="item-row" data-ng-repeat="quoteBlockDetail in quoteBlockDetails">
                                                                                    <td data-title="Seq" class="text-center"><span></span><i data-dir="up" class="fa fa-fw fa-arrow-up move_row"></i><i data-dir="down" class="fa fa-fw fa-arrow-down move_row"></i></td>
                                                                                    <td data-title="Select Product">
                                                                                        <div class="{{'q_blk_' + $index }}">
                                                                                            <select class="form-control input-sm multiselect" data-ng-model="quoteBlockDetail.BlockProductId" data-ng-change="UpdateQuoteBlock(this, quoteBlockDetail.BlockProductId, {{ quoteBlockDetail.BlockProductId }}, $index)"
                                                                                                    data-ng-options="p.Id as p.Code+(p.Description==''?'':' - '+p.Description) for p in blockProduct"></select>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td data-title="Quote Description">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteBlockDetail.QuotedDescription" data-ng-blur="UpdateQuoteBlockFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Qty">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteBlockDetail.Qty" data-ng-blur="UpdateQuoteBlockFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Product Price">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteBlockDetail.Price" data-ng-blur="UpdateQuoteBlockFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Freight">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteBlockDetail.Freight" data-ng-blur="UpdateQuoteBlockFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Public Comments">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteBlockDetail.PublicComments" data-ng-blur="UpdateQuoteBlockFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Total Price">
                                                                                        <span class="block-totalPrice_{{$index }}">${{quoteBlockDetail.TotalPrice | number:2}}</span>
                                                                                    </td>
                                                                                    <td data-title="Total Revenue">
                                                                                        <span class="block-totalRevenue_{{$index }}">${{quoteBlockDetail.TotalRevenue| number:2}}</span>
                                                                                    </td>
                                                                                    <td>
                                                                                        <delete-button different-event="deleteBlockProduct($index,quoteBlockDetail.Id)"></delete-button>
                                                                                        @*<a class="btn btn-danger btn-sm" data-product-type="block" ng-click="deleteQuoteBlock($index,$event)" href="javascript:void(0);" data-advanced-confirm="Confirm?" data-block-id="{{quoteBlockDetail.Id}}" data-target="{{quoteBlockDetail.Id}}">
                                                                                                <i class='fa fa-trash'></i>
                                                                                            </a>*@
                                                                                    </td>
                                                                                </tr>
                                                                            </tbody>
                                                                        </table>
                                                                    </div>
                                                                    <h3 class="">Quote-Level Block Add-Ons</h3>
                                                                    <div>
                                                                        <div class="row">
                                                                            <div class="col-md-4">
                                                                                <a class="btn btn-primary btn-sm blockAddOn-btn" data-ng-click="addNewBlockAddon()">
                                                                                    <i class="fa fa-fw fa-plus"></i>Add-On
                                                                                </a>
                                                                            </div>
                                                                            <div class="col-md-8">
                                                                                <div class="blockAddon-errors">
                                                                                    @*<div class="alert alert-warning alert-dismissable fade in">
                                                                                        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                                                                                        <strong>Warning!</strong> This alert box could indicate a warning that might need attention.
                                                                                        </div>*@
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="no-more-tables" style="margin-top: 15px;">
                                                                        <table class="table table-bordered table-striped table-blockAddon">
                                                                            <thead>
                                                                                <tr>
                                                                                    <th>Select Add-On</th>
                                                                                    <th>Quote Description</th>
                                                                                    <th>Price</th>
                                                                                    <th>Per</th>
                                                                                    <th>Table</th>
                                                                                    <th></th>
                                                                                </tr>
                                                                            </thead>
                                                                            <tbody>
                                                                                <tr class="item-row" data-ng-repeat="quoteBlockAddOnDetail in quoteBlockAddonDetails">
                                                                                    <td data-title="Select Add-On">
                                                                                        <div class="{{'q_blkAddon_' + $index }}">
                                                                                            <select class="form-control input-sm multiselect" data-ng-model="quoteBlockAddOnDetail.AddonId" data-ng-change="UpdateBlockAddon(this, quoteBlockAddOnDetail.AddonId, {{ quoteBlockAddOnDetail.AddonId }}, $index)"
                                                                                                    data-ng-options="p.Id as p.Code+(p.Description==''?'':' - '+p.Description) for p in addonList"></select>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td data-title="Description">
                                                                                        <input type="text" class="form-control" data-ng-model="quoteBlockAddOnDetail.Description" data-ng-blur="UpdateBlockAddonFields($index)" />
                                                                                    </td>
                                                                                    <td data-title="Price">
                                                                                        <input type="text" class="form-control enable-float" data-ng-blur="UpdateBlockAddonFields($index)" data-ng-model="quoteBlockAddOnDetail.Price" required />
                                                                                    </td>
                                                                                    <td data-title="Per">
                                                                                        <span data-ng-bind="quoteBlockAddOnDetail.QuoteUomName"></span>
                                                                                    </td>
                                                                                    <td data-title="Table">
                                                                                        <input type="checkbox" data-ng-change="UpdateBlockAddonFields($index)" data-ng-model="quoteBlockAddOnDetail.IsIncludeTable" />
                                                                                    </td>
                                                                                    <td>
                                                                                        <delete-button different-event="deleteBlockAddon($index,quoteBlockAddOnDetail.Id)"></delete-button>
                                                                                    </td>
                                                                                </tr>
                                                                            </tbody>
                                                                        </table>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }

                                                    <div class="panel panel-primary approved_disable">
                                                        <div class="panel-heading" role="tab" id="heading3">
                                                            <h4 class="panel-title">
                                                                Quote Information
                                                            </h4>
                                                        </div>
                                                        @using (Html.BeginForm("UpdateQuoteDetails", "Quote", FormMethod.Post))
                                                        {
                                                            <div class="panel-body quote-info">
                                                                @Html.HiddenFor(x => x.QuotationId)
                                                                @Html.Hidden("projectId", Model.ProjectView.ProjectView.ProjectId)
                                                                <div class="row">
                                                                    <div class="col-md-6 form-horizontal">
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-5">Quote Date</label>
                                                                            <div class="col-md-7">
                                                                                @Html.TextBoxFor(x => x.DetailsView.QuoteDateString, new { @class = "form-control datepicker" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-5">Acceptance Expiration Date</label>
                                                                            <div class="col-md-7">
                                                                                @Html.TextBoxFor(x => x.DetailsView.AcceptanceExpirationString, new { @class = "form-control datepicker" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-5">Quote Expiration Date</label>
                                                                            <div class="col-md-7">
                                                                                @Html.TextBoxFor(x => x.DetailsView.QuoteExpirationString, new { @class = "form-control datepicker" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-5">Bid Date</label>
                                                                            <div class="col-md-7">
                                                                                @*@Html.TextBoxFor(x => x.DetailsView.BiddingDateString, new { @class = "form-control datepicker" })*@
                                                                                @Html.TextBoxFor(x => x.DetailsView.BiddingDate, "{0:M/d/yyyy}", new { @class = "form-control datepicker" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-5">Quotation is Active</label>
                                                                            <div class="col-md-7">
                                                                                <p class="form-control-static">
                                                                                    @Html.CheckBoxFor(x => x.DetailsView.Active)
                                                                                </p>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-6 form-horizontal">
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-1">Add</label>
                                                                            <div class="col-md-5">
                                                                                <div class="input-group">
                                                                                    <span class="input-group-addon">$</span>
                                                                                    @Html.TextBoxFor(x => x.DetailsView.PriceIncrease1, "{0:N2}", new { @class = "form-control  comma_field" })
                                                                                    <span class="input-group-addon">Per @company.DeliveryQtyUomSingular</span>
                                                                                </div>
                                                                            </div>
                                                                            <label class="control-label col-md-2">Effective</label>
                                                                            <div class="col-md-4">
                                                                                @Html.TextBoxFor(x => x.DetailsView.PriceChangeDate1String, new { @class = "form-control datepicker" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-1">Add</label>
                                                                            <div class="col-md-5">
                                                                                <div class="input-group">
                                                                                    <span class="input-group-addon">$</span>
                                                                                    @Html.TextBoxFor(x => x.DetailsView.PriceIncrease2, "{0:N2}", new { @class = "form-control comma_field" })
                                                                                    <span class="input-group-addon">Per @company.DeliveryQtyUomSingular</span>
                                                                                </div>
                                                                            </div>
                                                                            <label class="control-label col-md-2">Effective</label>
                                                                            <div class="col-md-4">
                                                                                @Html.TextBoxFor(x => x.DetailsView.PriceChangeDate2String, new { @class = "form-control datepicker" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label class="control-label col-md-1">Add</label>
                                                                            <div class="col-md-5">
                                                                                <div class="input-group">
                                                                                    <span class="input-group-addon">$</span>
                                                                                    @Html.TextBoxFor(x => x.DetailsView.PriceIncrease3, "{0:N2}", new { @class = "form-control comma_field" })
                                                                                    <span class="input-group-addon">Per @company.DeliveryQtyUomSingular</span>
                                                                                </div>
                                                                            </div>
                                                                            <label class="control-label col-md-2">Effective</label>
                                                                            <div class="col-md-4">
                                                                                @Html.TextBoxFor(x => x.DetailsView.PriceChangeDate3String, new { @class = "form-control datepicker" })
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group">
                                                                            <div class="control-label col-md-1">@Html.CheckBoxFor(x => x.DetailsView.IncludeAsLettingDate)</div>
                                                                            <div class="col-md-5">
                                                                                <label class="control-label">Include as Letting Date on Quote PDF</label>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="form-horizontal">
                                                                    <div class="form-group">
                                                                        <label class="col-md-2 control-label">Private Notes</label>
                                                                        <div class="col-md-10">
                                                                            @Html.TextAreaFor(x => x.DetailsView.PrivateNotes, new { @class = "form-control" })
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="col-md-2 control-label">Public Notes</label>
                                                                        <div class="col-md-10">
                                                                            @Html.TextAreaFor(x => x.DetailsView.PublicNotes, new { @class = "form-control ckeditor" })
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <div class="col-md-10 col-md-offset-2">
                                                                            @Html.CheckBox("toggleTC") <label class="control-label">Edit T&Cs</label>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group tcDetails">
                                                                        <label class="col-md-2 control-label">Disclaimers</label>
                                                                        <div class="col-md-10">
                                                                            @Html.TextAreaFor(x => x.DetailsView.Disclaimers, new { @class = "form-control ckeditor" })
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group tcDetails">
                                                                        <label class="col-md-2 control-label">Disclosures</label>
                                                                        <div class="col-md-10">
                                                                            @Html.TextAreaFor(x => x.DetailsView.Disclosures, new { @class = "form-control ckeditor" })
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group tcDetails">
                                                                        <label class="col-md-2 control-label">Terms and Conditions</label>
                                                                        <div class="col-md-10">
                                                                            @Html.TextAreaFor(x => x.DetailsView.TermsAndConditions, new { @class = "form-control ckeditor" })
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="form-group pull-right">
                                                                    <div class="col-md-10">
                                                                        <button type="submit" id="quote_form_submit_btn" class="btn btn-primary remove_commas_btn">Save Quote Information</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                    <div class="panel panel-primary approved_disable">
                                                        <div class="panel-heading" role="tab" id="heading6">
                                                            <h4 class="panel-title">
                                                                Audit Logs
                                                            </h4>
                                                        </div>
                                                        <div class="panel-body">
                                                            <div data-ng-controller="SIWeb.AuditLogs">
                                                                <div class="alert alert-danger" data-ng-hide="!error">
                                                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                                                    <i class="fa fa-exclamation-circle"></i>{{ " " + message }}
                                                                </div>
                                                                <table class="table table-striped table-condensed table-bordered">
                                                                    <thead>
                                                                        <tr>
                                                                            <th style="width: 50%;">Log</th>
                                                                            <th>User</th>
                                                                            <th>Date & Time</th>
                                                                            <th>Downloads</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody id="audit_logs" class="audit-logs">
                                                                        <tr data-ng-hide="!loaderEnabled">
                                                                            <td colspan="4" style="text-align: center;">
                                                                                <i class="fa fa-spinner fa-spin"></i>
                                                                            </td>
                                                                        </tr>
                                                                        <tr data-ng-repeat="log in logs">
                                                                            <td>
                                                                                <div class="log-desc">
                                                                                    {{ log.desc }}
                                                                                </div>
                                                                            </td>
                                                                            <td>
                                                                                {{ log.user }}
                                                                            </td>
                                                                            <td>
                                                                                {{ log.date | date: 'MM/dd/yyyy hh:mm a' }}
                                                                            </td>
                                                                            <td>
                                                                                <a href="{{ log.refLink==''?'javascript:void(0);':log.refLink }}" target="_blank" title="Click to download file" download>
                                                                                    {{ log.refLink ==''?'':'Quote' }}
                                                                                </a>
                                                                            </td>
                                                                        </tr>
                                                                    </tbody>
                                                                </table>
                                                                <button id="btn_quote_logs" type="button" class="btn btn-sm btn-primary" data-ng-click="loadLogs()" data-ng-hide="noMoreLogs">View Quote Audit Log</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    }
        </div>

        @using (Html.BeginForm("UpdateCustomer", "Json", FormMethod.Post, new { @class = "form form-horizontal" }))
        {
            <div class="modal fade" id="NewCustomerModal">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title">Add New Customer</h4>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label class="control-label col-md-4">Customer Name</label>
                                <div class="col-md-8">
                                    @Html.HiddenFor(x => x.CustomerView.NewCustomerInfo.CustomerId, new { @class = "form-control customer_id_field" })
                                    @Html.TextBoxFor(x => x.CustomerView.NewCustomerInfo.Name, new { @class = "form-control customer_name_field" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Customer Number</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.CustomerView.NewCustomerInfo.Number, new { @class = "form-control customer_number_field" })
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary update_customer_btn" name="ActionClicked" value="NewCustomer">Save changes</button>
                        </div>
                    </div>
                    <!-- /.modal-content -->
                </div>
                <!-- /.modal-dialog -->
            </div>
        }
        @using (Html.BeginForm("UpdateCustomerContact", "Json", FormMethod.Post, new { @class = "form form-horizontal" }))
        {
            <div class="modal fade" id="NewCustomerContactModal">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title">Add New Customer Contact</h4>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label class="control-label col-md-4">Contact Name</label>
                                <div class="col-md-8">
                                    @Html.HiddenFor(x => x.CustomerView.NewCustomerContactInfo.Id, new { @class = "form-control contact_id_field" })
                                    @Html.TextBoxFor(x => x.CustomerView.NewCustomerContactInfo.Name, new { @class = "form-control contact_name_field" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Title</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.CustomerView.NewCustomerContactInfo.Title, new { @class = "form-control contact_title_field" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Phone Number</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.CustomerView.NewCustomerContactInfo.Phone, new { @class = "form-control contact_phone_field" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Fax</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.CustomerView.NewCustomerContactInfo.Fax, new { @class = "form-control contact_fax_field" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-4">Contact Email</label>
                                <div class="col-md-8">
                                    @Html.TextBoxFor(x => x.CustomerView.NewCustomerContactInfo.Email, new { @class = "form-control contact_email_field" })
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary update_contact_btn">Save changes</button>
                        </div>
                    </div>
                    <!-- /.modal-content -->
                </div>
                <!-- /.modal-dialog -->
            </div>
        }
    </div>
</div>
<div id="FskCalculationModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Sack Pricing Calculation Details</h4>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="SearchMixFormulationModal" class="modal fade search-mix-formulation" role="dialog">
    <div class="modal-dialog search-mix-modal modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Search Mix Formulations</h4>
            </div>
            <div class="modal-body">
                @Html.Partial("_SearchMixFormulations")
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="cydVoilation" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Entry violates authorization limit.</h4>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <link href="~/Content/no-more-tables.css" rel="stylesheet" />
    <link href="~/Content/search-mix-responsive-table.css" rel="stylesheet" />
    <script type="text/javascript" src="~/Scripts/search_mix_formulations.js?v1.5"></script>
    <style type="text/css">
        @@media screen and (max-width: 410px) {
            .pl-1 {
                display: none !important;
                visibility: hidden !important;
            }
        }

        .move_row {
            cursor: pointer;
        }

        .addon-alert {
            padding: 15px;
            margin-bottom: -25px;
            border: 1px solid transparent;
            -webkit-border-radius: 0;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.11);
            display: table;
            width: 79%;
        }

        .alert-dismissable .close, .alert-dismissible .close {
            right: 0px !important;
        }

        #QcReqIds.input-validation-error + p, #BackupPlantId.input-validation-error + p {
            background-color: #f7caca !important;
        }

            #QcReqIds.input-validation-error + p > span, #BackupPlantId.input-validation-error + p > span {
                color: #322929 !important;
            }
    </style>

    <script>
        function replaceNumberWithCommas(val) {
            return val.toLocaleString("en");
        }
        function removeCommasFromNumber(val) {
            return val.replace(",", "");
        }

          function enableProductType(pType)
        {
            switch (pType) {
                case "concrete":
                    if ($("#DetailsView_ConcreteEnabled").is(":checked"))
                    {
                        $("#concretePanel").show(400);
                    } else {
                        $("#concretePanel").hide(400);
                    }
                    break;
                case "aggregate":
                    if ($("#DetailsView_AggregateEnabled").is(":checked")) {
                        $("#aggregatePanel").show(400);
                    } else {
                        $("#aggregatePanel").hide(400);
                    }
                    break;
                case "block":
                    if ($("#DetailsView_BlockEnabled").is(":checked")) {
                        $("#blockPanel").show(400);
                    } else {
                        $("#blockPanel").hide(400);
                    }
                    break;
                default:
              }
            $(".plant_names").html("");
          $.ajax({
                    url: '/Quote/UpdateQuoteProductType',
                    data: { productType: pType,quoteId :eval(@Model.QuotationId)},
                    method: 'POST',
                    success: function (data) {
                        $(".plant_names").html(data.plants);
                    },
                    error: function(res){
                    }
                });
        }

          function disableAggregatePlantDDL()
          {
              setTimeout(function () {
                  var totalRows = $(".table-aggregateAddon tbody>tr").length;
                  var aggPlantDDL = $(".agg_plant_ddl");
                  var aggPlantDDLValue = aggPlantDDL.val();
                  var ddlValue = aggPlantDDLValue.split(":");
                  plantId =  ddlValue[1];
                  //console.log("totalRows = "+totalRows);
                  if (totalRows == 0) {
                      aggPlantDDL.attr("disabled", false);

                  }
                  else {
                      aggPlantDDL.attr("disabled", true);

                  }
                  if (plantId == undefined) {
                      $(".quick_add_agg").attr("disabled", true);
                      $(".aggregateAddOn-btn").attr("disabled", true);
                  }
                  else {
                      $(".quick_add_agg").attr("disabled", false);
                      $(".aggregateAddOn-btn").attr("disabled", false);
                  }
              }, 800);
          }

          function disableBlockPlantDDL() {
              setTimeout(function () {
                  var totalRows = $(".table-blockAddon tbody>tr").length;
                  var blockPlantDDL = $(".block_plant_ddl");
                  var blockPlantDDLValue = blockPlantDDL.val();
                  var ddlValue = blockPlantDDLValue.split(":");
                  plantId = ddlValue[1];
                  //console.log("totalRows = " + totalRows);
                  if (totalRows == 0) {
                      blockPlantDDL.attr("disabled", false);

                  }
                  else {
                      blockPlantDDL.attr("disabled", true);

                  }
                  if (plantId == undefined) {
                      $(".quick_add_block").attr("disabled", true);
                      $(".blockAddOn-btn").attr("disabled", true);
                  }
                  else {
                      $(".quick_add_block").attr("disabled", false);
                      $(".blockAddOn-btn").attr("disabled", false);
                  }
              }, 800);
          }

        function disablePlantDDL()
        {
            setTimeout(function(){
                var totalAddonRows = $(".table-addon tbody>tr").length;
                var totalMixesRows = $("#quoteMixTable tbody>tr").length;
                //console.log("MixesRows ="+totalMixesRows+" AddonRows= "+ totalAddonRows);
                if((totalMixesRows == 0) && (totalAddonRows == 0))
                {
                    //console.log("Add-on Table Empty");
                    $("#PlantId").prop("disabled",false);
                    $("#PlantId").attr("disabled",false);
                    selectedPlant = $("#PlantId").val();
                    $("#PlantId").parent().find("input[type='hidden'][name='PlantId']").remove();
                    $("#PlantId").attr("title","");
                }
                else
                {
                    //console.log("Table Add-on have "+totalAddonRows+" and MixesRows have "+totalMixesRows);
                    $("#PlantId").prop("disabled",true);
                    $("#PlantId").attr("disabled",true);
                    selectedPlant = $("#PlantId").val();
                    if($("#PlantId").parent().find("input[type='hidden'][name='PlantId']").length==0)
                        $("#PlantId").parent().append("<input type='hidden' name='PlantId' value='"+selectedPlant+"'>");
                    $("#PlantId").attr("title","Pricing Plant cannot be changed when there are mixes or add-ons on the quote. Please delete quote mixes and add-ons to edit the pricing plant.");
                }
            },800);
        }

        function resetState(el) {
            var scope = angular.element(el).scope();
            if (scope) {
                scope.$applyAsync();
            }
        }

         $(document).on("click","[data-advanced-confirm]:not(.state-confirm)",function(e){
            //var addonerrorDv = $('.addon-errors')
            //addonerrorDv.html("");
            e.preventDefault();
            var item = $(this);
            var originalHtml = item.attr("data-original-html") ? item.attr("data-original-html"): item.html();
            item.attr("data-original-html", originalHtml);
            if(item.hasClass("state-confirm")){
                item.removeClass("state-confirm");
                item.attr("title", "");
                item.attr("data-delete","false");
            }else{
                item.prepend(item.attr("data-advanced-confirm")).addClass("state-confirm");
                item.attr("title","Click again to confirm");
                item.attr("data-delete","true");
            }
            resetState(item);
         }).on("click", function (e) {
             var item = $(this);
            if(e.target && !$(e.target).attr("data-advanced-confirm") && !$(e.target).parents().attr("data-advanced-confirm")){
                var items = $("[data-advanced-confirm].state-confirm");
                $.each(items,function(i,e){
                    $(e).removeClass("state-confirm");
                    $(e).attr("data-delete","false");
                    $(e).html($(e).attr("data-original-html"));
                });
             }
            resetState(item);
        }).on("click","[data-advanced-confirm].state-confirm",function(){
            var item = $(this);
            var itemRow = $(item.parents(".item-row"));
            var type = item.attr("data-product-type");
            var deleteUrl = "";
            var totalRowsLength = $(".table-addon tbody>tr").length;
            var drpClass = ".q_a_";
            switch (type) {
                //case "aggregate":
                //    deleteUrl = "/Quote/DeleteQuotationAggregate?quoteAggregateId=" + item.attr("data-target") + "&productId=" + item.attr("data-agg-id");
                //    totalRows = $(".table-aggregate tbody>tr").length;
                //    drpClass = ".q_agg_";
                //    break;
                //case "block":
                //    deleteUrl = "/Quote/DeleteQuotationblock?quoteBlockId=" + item.attr("data-target") + "&productId=" + item.attr("data-block-id");
                //    totalRows = $(".table-block tbody>tr").length;
                //    drpClass = ".q_blk_";
                //    break;
                case "addon":
                    deleteUrl = "/Quote/DeleteQuotationAddon?quoteAddonId=" + item.attr("data-target") + "&addonId=" + item.attr("data-addon-id");
                    break;
                default:
            }
            $.ajax({
                url: deleteUrl,
                beforeSend: function(){
                    item.html("Deleting...").attr("disabled","disabled");
                    //itemRow.find("[name]").attr("disabled","disabled");
                },
                success: function(data){
                    if(data.deleteStatus){
                        var totalRows = totalRowsLength;
                        disablePlantDDL();
                        var ddlText = data.Code+(data.Description==""?"":' - '+data.Description);
                        for(var i = 0;i < totalRows; i++)
                        {
                            var el = $(drpClass + i);
                            if (el.length) {
                                var ddl = el.find("select:first-child");
                                ddl.find("option[value='number:"+data.lastId+"']").text(ddlText);
                                ddl[0].sumo.reload();
                            }
                        }

                        itemRow.fadeOut(function(){
                            var scope = angular.element(itemRow).scope();
                            resetState(item);
                        });
                    }
                    else
                    {
                        //console.log("Error Deleting");
                    }
                    resetState(item);
                },
                error: function(){
                    //itemRow.find("[name]").attr("disabled","disabled");
                    //item.html(item.attr("data-original-html"));
                    //item.removeClass("state-confirm");
                    //alert('Could not delete the mix constituent');
                }
            });

        });
    </script>

    <script type="text/javascript">

        /**************** VARIABLE DECLARATIONS **************/
        var qId = @Model.QuotationId
        var pricing_plant_id = @(Model.PlantId == null ? 0 : @Model.PlantId);
        var pricing_month = new Date("@Model.PricingMonthActual.ToString("yyyy-MM-dd")");
        var addon_pricing_month = new Date("@Model.PricingMonthActual.ToString("yyyy-MM-dd")");
        //pricing_month = new Date(pricing_month.getTime() + pricing_month.getTimezoneOffset()*60*1000);
        //console.log("The pricing month is " + pricing_month.toISOString());
        //console.log("addon_pricing_month ="+addon_pricing_month.toISOString());
        var formulation_data = null;  // Container for the formulations json data.

        var approved = '@(Model.CustomerView.Profile.Status == "APPROVED")';
        var EnableEdit = '@(Model.CustomerView.Profile.EnableEdit)';
        @if (Model.QuotationId > 0)
        {
            <text>
        var pricing_plant_districtId = @(Model.Plant.DistrictId == null ? 0 : Model.Plant.DistrictId);
        var quotationId = @Model.QuotationId ;
        var fixedCost = @Model.Plant.DeliveryFixedCost.GetValueOrDefault() + @Model.Plant.PlantFixedCost.GetValueOrDefault(0) + @Model.Plant.SGA.GetValueOrDefault(0);
        var plantTime = @Model.Plant.TicketMinutes.GetValueOrDefault() + @Model.Plant.LoadMinutes.GetValueOrDefault() + @Model.Plant.TemperMinutes.GetValueOrDefault();
        var projectTime = @Model.Project.ToJobMinutes.GetValueOrDefault() + @Model.Project.WaitOnJob.GetValueOrDefault() + @Model.Project.WashMinutes.GetValueOrDefault() + @Model.Project.ReturnMinutes.GetValueOrDefault();
        var plantUtilization = @Model.Plant.Utilization.GetValueOrDefault(1);
        var plantVariableCost = @Model.Plant.VariableCostPerMin.GetValueOrDefault();
        </text>
        }


        var sample_row_html = '<tr class="mix_row" data-cyd-hour="" data-mix-cost="" data-addon-cost="" data-id="" id="" > <td data-title="edit"> <a href="" class="btn btn-xs btn-primary"> <i class="glyphicon glyphicon-edit"></i> </a> </td> <td data-title="5sk" class="fsk_related" style="display:none"> <a href="" class="btn show_5sk_calc_btn btn-xs btn-primary"> <i class="fa fa-fw fa-list-ul"></i> </a> </td>  <td data-title="Seq" class="text-center"><span></span><i data-dir="up" class="fa fa-fw fa-arrow-up move_row"></i><i data-dir="down" class="fa fa-fw fa-arrow-down move_row"></i></td> <td data-title="Mix"> <select class="form-control input-sm mix_field multiselect" id="mix_selection" name="mix_selection">@foreach (var mix in Model.StandardMixes)
        {<text>"<option value="@mix.Id">@mix.Number - @mix.SalesDesc</option>"</text>}</select> </td> <td data-title="Description"><input class="desc_field input-sm form-control" value=""/></td> <td data-title="5sk Details" style="display:none" class="fsk_related"><span class="content_field"></span></td> <td data-title="Volume"><input class="volume_field input-sm form-control" data-old-value="" value=""></td> <td  data-title="Price" data-title="edit"><input class="price_field input-sm form-control" data-old-value="" value=""></td> <td  data-title="Unload"><input class="unload_field input-sm form-control" data-old-value="" value=""></td> <td data-title="Avg Load"><input class="avg_load_field input-sm form-control" data-old-value="" value=""></td><td data-title="Public Comment" class="public_notes" style="max-width: 235px;min-width:200px;"><input class="public_notes_field input-sm form-control"></td>'
             @if (!access.HideSpread)
             {
                 <text>
                    +' <td data-title="Spread" class="spread_box public_notes"></td>'
                </text>
             }
             @if (!access.HideContribution)
             {
                 <text>
                +' <td data-title="Contribution" class="contribution_box public_notes"></td> '
                </text>
             }
                @if (!access.HideProfit)
                {
                <text>
            +'<td data-title="Profit" class="profit_box public_notes"></td>'
               </text>
                }
            +' <td data-title="Delete"> <a href="" class="btn btn-xs btn-danger delete_mix" data-confirm="Are you sure you want to delete this mix?"> <i class="fa fa-trash fa-fw"></i> </a> </td> </tr>';

        /**************** FUNCTIONS DECLARATIONS **************/

        function fetchNormalPrice(row, old_value, change_description){
            id = row.data("id");
            standardMix = row.find(".mix_field").val();
            element = row.find(".mix_field");
            $.get("/Quote/FindStandardMixCost",{"id":quotationId,"quoteMixId":id,"standardMixId":standardMix},function(data){
                priceData = JSON.parse(data);
                if (priceData.mixCost == 0){
                    alert("This mix has ingredients without costs, and cannot be added");
                    element.val(old_value);
                    $(element).multiselect('deselectAll', true);
                    $(element).multiselect('deselect', standardMix);
                    $(element).multiselect('select', old_value);
                }else{
                    row.data("mix-cost",priceData.mixCost);
                    row.attr("data-mix-cost",priceData.mixCost);
                    row.find(".price_field").val(priceData.price);
                    //row.find(".public_notes_field").val(priceData.publicNotes);
                    if (change_description)
                        row.find(".desc_field").val(priceData.name);
                    refreshMixCalculations(row.data("id"));
                    updateMixParameters(row.data("id"));
                }
            });
        }

        function refreshAll5sk(){
            $(".mix_row").each(function(index,row){
                row = $(row);
                if ($(".fsk_switch").is(":checked")){
                    fetchFskPrice(row,"",false);
                }
                else{
                    fetchNormalPrice(row,"",false);
                }
            });
        }

        function fetchFskPrice(row,old_value,change_description){
            id = row.data("id");
            standardMix = row.find(".mix_field").val();
            element = row.find(".mix_field");
            fskPriceId = $("#PricingCity").val();
            $.get("/Quote/Find5skPrice",{"id":quotationId,"quoteMixId":id,"standardMixId":standardMix,"fskPriceId":fskPriceId},function(data){
                priceData = JSON.parse(data);
                if (priceData.mixCost == 0){
                    alert("This mix has ingredients without costs, and cannot be added");
                    element.val(old_value);
                    $(element).multiselect('deselectAll', true);
                    $(element).multiselect('deselect', standardMix);
                    $(element).multiselect('select', old_value);
                }else{
                    row.data("mix-cost",priceData.mixCost);
                    row.attr("data-mix-cost",priceData.mixCost);
                    row.find(".price_field").val(priceData.price);
                    //row.find(".public_notes_field").val(priceData.publicNotes);
                    if (change_description){
                        //console.log("Changing descriptions");
                        row.find(".desc_field").val(priceData.name);
                    }
                    row.find(".content_field").text(priceData.content);
                    refreshMixCalculations(row.data("id"));
                    updateMixParameters(row.data("id"));
                }
            });
        }
        function updateMixParameters(id)
        {
            row         =   $("#row_"+id);
            mixId       =   row.find(".mix_field").val();
            volume      =   parseFloat(row.find(".volume_field").val().removeCommas());
            price       =   parseFloat(row.find(".price_field").val().removeCommas());
            unload      =   parseFloat(row.find(".unload_field").val().removeCommas());
            avg_load    =   parseFloat(row.find(".avg_load_field").val().removeCommas());
            var description =   row.find(".desc_field").val();
            var publicNote =   row.find(".public_notes_field").val();
            //console.log("publicNote "+publicNote);
            params = {"mixId":id,"standardMixId":mixId,"volume":volume,"price":price,"unload":unload,"averageLoad":avg_load};

            $.get("/Quote/UpdateMixParameters",params , function(data){
                mixUpdate = JSON.parse(data)
                if (!mixUpdate.Update)
                    console.log("Live Sync Failed! Please refresh the page before further updating the mix parameters.");
                else
                {
                    $.get("/Quote/UpdateQuoteMixDescription",{"id":id,"description":description},function(data){});
                    //$.get("/Quote/UpdateQuoteMixPublicNotes",{"id":id,"publicNotes":publicNote},function(data){});
                }
                if (approved == 'True' && EnableEdit == 'True') {
                    reverBackOldValue(id, mixUpdate);
                }
                checkApprovalStatus(mixUpdate);
                updateApprovalRequestRecipients();
            });
        }

        function reverBackOldValue(id, status) {
            var showError = false;
            var row = $("#row_" + id);
            if (status.ApprovalStatus) {
                row.find(".volume_field").attr("data-old-value", row.find(".volume_field").val());
                row.find(".price_field").attr("data-old-value", row.find(".price_field").val());
                row.find(".unload_field").attr("data-old-value", row.find(".unload_field").val());
                row.find(".avg_load_field").attr("data-old-value", row.find(".avg_load_field").val());
            }
            else {
                if (row.find(".volume_field").val() != row.find(".volume_field").attr("data-old-value")) {
                    showError = true;
                }
                 if (row.find(".price_field").val() != row.find(".price_field").attr("data-old-value")) {
                     showError = true;
                }
                 if (row.find(".unload_field").val() != row.find(".unload_field").attr("data-old-value")) {
                     showError = true;

                }
                 if (row.find(".avg_load_field").val() != row.find(".avg_load_field").attr("data-old-value")) {

                     showError = true;

                }
                row.find(".volume_field").val(row.find(".volume_field").attr("data-old-value"));
                row.find(".price_field").val(row.find(".price_field").attr("data-old-value"));
                row.find(".unload_field").val(row.find(".unload_field").attr("data-old-value"));
                row.find(".avg_load_field").val(row.find(".avg_load_field").attr("data-old-value"));
                if (showError) {
                    $("#cydVoilation").modal("show");

               updateMixParameters(id);
               refreshMixCalculations(id);
                }
            }
        }

        function checkApprovalStatus(status)
        {
            var violationDv = $(".violation-errors");
            ////console.log("ApprovalStatus = "+status.ApprovalStatus);
            if(status.ApprovalStatus){
                $('button[data-page="approve_quote"]').html("<i class='glyphicon glyphicon-check'></i> Approve Quote").attr('data-target','#approve_quote_modal');
                violationDv.html("");
            }
            else
            {
                $('button[data-page="approve_quote"]').html("<i class='glyphicon glyphicon-check'></i> Request Approval").attr('data-target','#request_approval_modal');
                var violationErrors =JSON.parse(status.ViolationError);
                var violationMessage = "";
                $(violationErrors).each(function(i,val){
                    ////console.log(val);
                    violationDv.html("");
                    violationMessage +='<div class="alert alert-warning"><i class="fa fa-exclamation-triangle"></i>'+val+'</div>';
                });
                violationDv.append(violationMessage);
            }
        }

        function updateApprovalRequestRecipients()
        {
            var quoteId  = @Model.QuotationId;
            $.get("/Json/UpdateApprovalRequestRecipients",{"quoteId":quoteId},function(data){
                new_options = [data];
                selectize = $("#ApprovalRecipients")[0].selectize
                selectize.clear()
                selectize.clearOptions()
                selectize.renderCache['option'] = {};
                selectize.renderCache['item'] = {};
                selectize.addOption(new_options)
                //selectize.setValue(new_options[0].value);
                selectize.refreshOptions(false);
            });
        }
        function refreshMixCalculations(id){
            ////console.log("Refreshing for " + id);
            row         =   $("#row_"+id);
            mixCost     =   parseFloat((row.data("mix-cost")+"").removeCommas());
            addonCost   =   parseFloat(row.data("addon-cost"));
            volume      =   parseFloat(row.find(".volume_field").val().removeCommas());
            price       =   parseFloat(row.find(".price_field").val().removeCommas());
            unload      =   parseFloat(row.find(".unload_field").val().removeCommas());
            avg_load    =   parseFloat(row.find(".avg_load_field").val().removeCommas());

            spread = price - mixCost - addonCost;
            num_trips = Math.ceil(volume / avg_load) ;
            ticketed_time = plantTime + projectTime + unload ;
            roundtrip_time = ticketed_time / plantUtilization;
            per_hour_rate = avg_load / roundtrip_time * 60;
            total_time = roundtrip_time * num_trips;
            total_delivery_cost = plantVariableCost * total_time ;
            variable_delivery_cost = total_delivery_cost / volume ;
            contribution = spread - variable_delivery_cost ;
            profit = contribution - fixedCost ;
            row.find(".spread_box").text("$"+spread.toFixed(2));
            row.find(".contribution_box").text("$"+contribution.toFixed(2));
            row.find(".profit_box").text("$"+profit.toFixed(2));
            row.data("cyd-hour",per_hour_rate) ;
            row.attr("data-cyd-hour",per_hour_rate);
            refreshQuoteStatistics();
        }

        function refreshQuoteStatistics(){
            total_volume = 0;
            $(".volume_field").each(function(index,obj){total_volume = total_volume + parseFloat($(obj).val().removeCommas())});

            total_profit = 0;
            total_revenue = 0;
            total_avg_selling_price = 0;
            total_load = 0;
            total_avg_load = 0;

            total_spread = 0;
            total_contribution = 0;
            total_profit = 0;
            total_cyd_hour = 0;
            total_unload = 0;

            $(".mix_row").each(function(index,html_row){
                row = $(html_row);
                cyd_hour    =   parseFloat(row.data("cyd-hour"));
                volume      =   parseFloat(row.find(".volume_field").val().removeCommas());
                price       =   parseFloat(row.find(".price_field").val().removeCommas());
                unload      =   parseFloat(row.find(".unload_field").val().removeCommas());
                avg_load    =   parseFloat(row.find(".avg_load_field").val().removeCommas());

                spread          =   parseFloat(row.find(".spread_box").text().removeCommas().replace(/\$/g,''));
                profit          =   parseFloat(row.find(".profit_box").text().removeCommas().replace(/\$/g,''));
                contribution    =   parseFloat(row.find(".contribution_box").text().removeCommas().replace(/\$/g,''));

                total_profit += profit * volume ;
                total_spread += spread * volume ;
                total_contribution += contribution * volume ;
                total_revenue += price * volume;
                total_load += avg_load * volume ;
                total_cyd_hour += cyd_hour * volume;
                total_unload += unload * volume ;
            });

            total_avg_load = total_load / total_volume ;
            total_avg_selling_price = total_revenue / total_volume;
            total_cyd_hour = total_cyd_hour / total_volume;
            total_unload = total_unload / total_volume ;

            $(".quote_total_volume_box").text(Number(total_volume.toFixed(0)).toLocaleString()+" @company.DeliveryQtyUomPlural");
            $(".quote_total_revenue_box").text("$"+Number(total_revenue.toFixed(2)).toLocaleString());
            $(".quote_total_profit_box").text("$"+Number(total_profit.toFixed(2)).toLocaleString());
            $(".quote_total_avg_selling_price_box").text("$"+total_avg_selling_price.toFixed(2).toLocaleString());
            $(".quote_total_avg_load_box").text(total_avg_load.toFixed(2).toLocaleString()+" @company.DeliveryQtyUomPlural");
            $(".quote_total_unload_box").text(total_unload.toFixed(0)+" min");

            district_default = parseFloat($(".quote_spread_box").data("district"));
            ////console.log("Total Spread = "+total_spread);
            ////console.log("Total volume = "+total_volume);

            quote_spread = total_spread / total_volume;
            $(".quote_spread_box").text("$"+quote_spread.toFixed(2));
            quote_spread_variance = quote_spread - district_default;
            cssClass = quote_spread_variance < 0 ? "red" : "green" ;
            $(".quote_spread_variance").text("$"+quote_spread_variance.toFixed(2)).removeClass("red").removeClass("green").addClass(cssClass);

            district_default = parseFloat($(".quote_contribution_box").data("district"));
            quote_contribution = total_contribution / total_volume;
            $(".quote_contribution_box").text("$"+quote_contribution.toFixed(2));
            quote_contribution_variance = quote_contribution - district_default;
            cssClass = quote_contribution_variance < 0 ? "red" : "green" ;
            $(".quote_contribution_variance").text("$"+quote_contribution_variance.toFixed(2)).removeClass("red").removeClass("green").addClass(cssClass);

            district_default = parseFloat($(".quote_profit_box").data("district"));
            quote_profit = total_profit / total_volume;
            $(".quote_profit_box").text("$"+quote_profit.toFixed(2));
            quote_profit_variance = quote_profit - district_default;
            cssClass = quote_profit_variance < 0 ? "red" : "green" ;
            $(".quote_profit_variance").text("$"+quote_profit_variance.toFixed(2)).removeClass("red").removeClass("green").addClass(cssClass);

            district_default = parseFloat($(".quote_cyd_hour_box").data("district"));
            quote_cyd_hour = total_cyd_hour;
            $(".quote_cyd_hour_box").text(quote_cyd_hour.toFixed(2)+"");
            quote_cyd_hour_variance = quote_cyd_hour - district_default;
            cssClass = quote_cyd_hour_variance < 0 ? "red" : "green" ;
            $(".quote_cyd_hour_variance").text(quote_cyd_hour_variance.toFixed(2)+"").removeClass("red").removeClass("green").addClass(cssClass);
        }

        function fill_customer_contact_info(){
            ccId = $(".customer_contact_select").val();
            console.log("ccId" + ccId);
            if (ccId == null || ccId == undefined || ccId == ""){
                $(".cc_title").text("");
                $(".cc_phone").text("");
                $(".cc_email").text("");
                $(".cc_fax").text("");
            }else{
                $.get("/Home/GetCustomerContactDetails/"+ccId,function(data){
                    info = JSON.parse(data);
                    $(".cc_title").text(info["Title"]);
                    $(".cc_phone").text(info["Phone"]);
                    $(".cc_email").text(info["Email"]);
                    $(".cc_fax").text(info["Fax"]);
                });
            }
        }

        function isFskEnabled(){
            try{
                return $(".fsk_switch").is(":checked");
            }catch(ex){
                return false;
            }
        }

        function quick_add_mix(mixFormulationId){
            fskId = null;
            if (isFskEnabled()){
                fskId = $("#PricingCity").val();
            }
            params = {id:quotationId,fskPriceId:fskId}
            if (mixFormulationId != null){
                params["formulationId"] = mixFormulationId;
            }
            $.get("/Quote/QuickAddQuotationStandardMix",params,function(data){
                mixData = JSON.parse(data);
                sample_row = $(sample_row_html);
                sample_row.attr("id","row_"+mixData.Id);
                sample_row.attr("data-id",mixData.Id);
                sample_row.attr("data-mix-cost",mixData.Cost);
                sample_row.attr("data-addon-cost",0);
                sample_row.find("select").val(mixData.MixId);
                sample_row.find(".desc_field").val(mixData.Description);
                sample_row.find(".public_notes_field").val(mixData.publicNotes);
                if (isFskEnabled()){
                    sample_row.find(".fsk_related").show();
                }
                sample_row.find(".content_field").text(mixData.Content);
                sample_row.find(".volume_field").val(mixData.Volume);
                sample_row.find(".volume_field").attr("data-old-value",mixData.Volume);
                sample_row.find(".price_field").val(mixData.Price.toFixed(2));
                sample_row.find(".price_field").attr("data-old-value",mixData.Price.toFixed(2));
                sample_row.find(".unload_field").val(mixData.Unload.toFixed(0));
                sample_row.find(".unload_field").attr("data-old-value",mixData.Unload.toFixed(0));
                sample_row.find(".avg_load_field").val(mixData.AvgLoad.toFixed(2));
                sample_row.find(".avg_load_field").attr("data-old-value",mixData.AvgLoad.toFixed(2));
                sample_row.find("td:eq(0) a").attr("href","/Quote/EditQuotationStandardMix/"+mixData.Id);
                sample_row.find("td:eq(13) a").attr("href","/Quote/DeleteQuotationMix/"+mixData.Id);
                var isPublicNotesChecked = $(".public_comments").is(":checked");
                if(isPublicNotesChecked)         {
                    //$(".public_notes").show();
                    sample_row.find(".public_notes").show();
                    sample_row.find(".spread_box").hide();
                    sample_row.find(".contribution_box").hide();
                    sample_row.find(".profit_box").hide();
                }
                else
                {
                    sample_row.find(".public_notes").hide();
                    sample_row.find(".spread_box").show();
                    sample_row.find(".contribution_box").show();
                    sample_row.find(".profit_box").show();
                }
                sample_row.find(".multiselect").multiselect({
                    enableFiltering: true,
                    includeSelectAllOption: true,
                    numberDisplayed: 1,
                    maxHeight: 200
                });

                $("#PlantId").prop("disabled","disabled");
                $("#PlantId").attr("disabled","disabled");
                selectedPlant = $("#PlantId").val();
                $("#PlantId").parent().append("<input type='hidden' name='PlantId' value='"+selectedPlant+"'>");
                $("#PlantId").attr("title","Pricing Plant cannot be changed when there are mixes or add-ons on the quote.  Please delete quote mixes and add-ons to edit the pricing plant.");
                $("#mix_table_body").append(sample_row);
                refreshMixCalculations(mixData.Id);
            });
        }


        /**************** JQUERY BINDING DECLARATIONS **************/

        $(window).load(function(e){
            @if (ViewBag.Error != null)
            {
                <text>
            alert("@Html.Raw(ViewBag.Error)");
            </text>
            }
        });

        function FindDuplicateAddon(productType, addonId) {
            //console.log(productType);
            var addonExist = "";
            var concreteTable = $(".table-addon > tbody tr")
            var aggregateTable = $(".table-aggregateAddon tbody>tr");
            var blockTable = $(".table-blockAddon > tbody tr");

            var concreteRowsCount = concreteTable.length;
            var aggRowsCount = aggregateTable.length;
            var blockRowsCount = blockTable.length;

            //console.log("########################### AddonId = "+ addonId);
            ////console.log("concreteRowsCount => " + concreteRowsCount + " aggRowsCount => " + aggRowsCount + " blockRowsCount => " + blockRowsCount)
            if (productType != "concrete") {
                for (i = 0; i < concreteRowsCount; i++) {
                    var dropdown = $(".q_a_" + i + " select");
                    if (dropdown.val().split(":").pop(-1) == addonId) {
                        addonExist = " ";
                    }
                }
            }

            if (productType != "aggregate") {
                for (i = 0; i < aggRowsCount; i++) {
                    var dropdown = $(".q_aggAddon_" + i + " select");
                    if (dropdown.val().split(":").pop(-1) == addonId) {
                        addonExist = "Aggregate";
                    }
                }
            }

            if (productType != "block") {
                for (i = 0; i < blockRowsCount; i++) {
                    var dropdown = $(".q_blkAddon_" + i + " select");
                    if (dropdown.val().split(":").pop(-1) == addonId) {
                        addonExist = "Block";
                    }
                }
            }
            //console.log("addonExist => " + addonExist);
            return addonExist;
        }

        function trigger_change(element) {
            value = $(element).val();
            url = $(element).data("url");
            //console.log("value == " + value);
            selected = $(element).data("selected");
            dependent_selector = $(element).data("dependent");
            var triggerChange = $(element).attr("data-triggerChange") == undefined;
            $.get(url + value, function (data) {
                fetch_and_change(dependent_selector, data, selected, triggerChange);
                var event = jQuery.Event("masterSelectChange", { items: data, targetSelector: dependent_selector });
                //$(element).trigger(event);
            }).fail(function () {
                fetch_and_change(dependent_selector, [], selected, triggerChange);
            });
        }

        var AdjustMixPrice = function (direction)
        {
            var adjustMixPrice = parseFloat($("#AdjustMixPrice").val());

                    $("#quoteMixTable tbody tr").each(function () {
                        var dataId = $(this).attr("data-id");
                        var price = $(this).find(".price_field")
                        var priceData = 0;
                        if (direction == 'up') {
                            priceData = parseFloat(price.val()) + adjustMixPrice;
                        } else if (direction == 'down') {
                            priceData = parseFloat(price.val()) - adjustMixPrice;
                        }
                        price.val(priceData);

                        refreshMixCalculations(dataId);
                        updateMixParameters(dataId);
                    });

                    //$("#quoteMixTable tbody tr").each(function () {
                    //    var dataId = $(this).attr("data-id");
                    //    var price = $(this).find(".price_field")
                    //    var priceData = parseFloat(price.val()) - adjustMixPrice;
                    //    price.val(priceData);
                    //    refreshMixCalculations(dataId);
                    //    updateMixParameters(dataId);
                    //});
        }

        function checkDistrictQcReq() {
            plantId = $("#PlantId").val();
            checkPlantDistrictQcReq(plantId);
        }

        function checkPlantDistrictQcReq(selectedPlantId) {
            var hiddenDistrictQcReq = $("#DistrictQcRequirement");
            var qcReq = $(".qcReq");

                $.get("/Json/GetAllDistrictQCRequirement", function (data) {
                    var info = JSON.parse(data);
                    var isQCReq = info.qcRequirement;
                    if (isQCReq == true) {
                        qcReq.show();
                        hiddenDistrictQcReq.val(true);
                        hideShowBackupPlant(true);
                        if (selectedPlantId != 0) {
                            $.get("/Json/GetPlantDistrictQCRequirement", { "plantId": selectedPlantId }, function (data) {
                                var info = JSON.parse(data);
                                var isQCReq = info.qcRequirement;
                                if (isQCReq == false) {
                                    hiddenDistrictQcReq.val(false);
                                    hideShowBackupPlant(false);
                                }
                                else {
                                    hiddenDistrictQcReq.val(true);
                                    hideShowBackupPlant(true);
                                }
                            });
                        }
                    } else {
                        qcReq.hide();
                        hiddenDistrictQcReq.val(false);
                        hideShowBackupPlant(true);
                    }
                });
        }

        function hideShowBackupPlant(selectedPlantQcReq) {
            var qcReq = $("#QcReqIds");
            var backupPlant = $(".backupPlant");
            var selectedItems = $("#QcReqIds option:selected");
            if (selectedItems.length > 0) {
                if ($("#DistrictQcRequirement").val() == "true") {
                    selectedItems.each(function (i, val) {
                        var $this = $(this);
                        console.log("$this.length = " + $this.length);
                        if ($this.length) {
                            var selId = $this.val();
                            console.log(selId + " value");

                            if (selId == "5") {
                                backupPlant.hide();
                                console.log("Hide Backup Plant");
                                $("#QcReqIds option:selected").removeAttr("selected");
                                qcReq.val('5');
                                qcReq[0].sumo.reload();
                            }
                            else {
                                var isQCReq = $("#DistrictQcRequirement").val();
                                if (isQCReq != "false") {
                                    backupPlant.show();
                                    console.log("Show Backup Plant");
                                }
                            }
                        }
                    });
                }
                else {
                    //$(".qcReq").hide();
                    console.log("Hidden " + selectedPlantQcReq);
                }
            }
            else {
                //if ($("#DistrictQcRequirement").val() == "false") {
                //    $(".qcReq").hide();
                //    console.log("Hide all if DistrictQcRequirement = false");
                //    if (selectedPlantQcReq != true) {
                //        $(".qcReq").show();
                //        console.log("Show all if DistrictQcRequirement = false and SelectedPlantQcReq = true");
                //    }
                //}
                backupPlant.hide();
                console.log("just hide the BakupPlant if nothing is selected");
            }
        }


        $(document).ready(function (e) {
            $(document).on('change', '#PlantId', function () {
                checkDistrictQcReq();
            })

            checkDistrictQcReq();

            setTimeout(function () {
                hideShowBackupPlant(true);
            }, 100);


            var districtQcRequirement = '@Model.DistrictQcRequirement';
            //console.log("districtQcRequirement "+districtQcRequirement);
            //if (districtQcRequirement == 'False') {
            //    $(".qcReq").hide();
            //}

            //$(document).on('change','.project_plant_volume,.project_plant_ddl', function () {
            //    checkDistrictQcReq();
            //}).on("click", ".delete_project_plant", function () { checkDistrictQcReq();});


            $(".tcDetails").hide();
            $("#toggleTC").on("click", function () {
                $(".tcDetails").toggle(500);
            });

            var selectedOption = 0;
            $("#QcReqIds").change(function () {
                var currentSelection;
                if (selectedOption) {
                    var currentValues = $(this).val();
                    if (currentValues != null) {
                        currentSelection = currentValues.filter(function (el) {
                            return selectedOption.indexOf(el) < 0;
                        });
                    }
                }
                selectedOption = $(this).val();

                console.log("currentSelection = " + currentSelection);
                if (currentSelection != "5" && currentSelection != undefined) {
                    $("#QcReqIds")[0].sumo.unSelectItem('5');
                }
                //debugger;
                displayBackupPlant();
            });

            function displayBackupPlant() {
                var qcReq = $("#QcReqIds");
                var backupPlant = $(".backupPlant");
                var selectedItems = $("#QcReqIds option:selected");
                selectedItems.each(function (i, val) {
                    var $this = $(this);
                    console.log("$this.length = " + $this.length);
                    if ($this.length) {
                        var selId = $this.val();
                        console.log(selId + " value");

                        if (selId == "5") {
                            backupPlant.hide();
                            console.log("Hide Backup Plant");
                            $("#QcReqIds option:selected").removeAttr("selected");
                            qcReq.val('5');
                            qcReq[0].sumo.reload();
                        }
                        else {
                            backupPlant.show();
                            console.log("Show Backup Plant");
                        }
                    }
                });
            }


            $("#AdjustMixPrice").on("blur", function () {
                var mixPrice = $(this).val();
                $.ajax({
                    url: '/Quote/UpdateQuotationAdjustMixPrice',
                    data: { adjustMixPrice: mixPrice, quoteId: quotationId },
                    method: 'POST',
                    success: function (data) {

                    },
                    error: function (res) {

                    }
                    });
            })


            var custListDDL = $("#CustomerView_CustomerId");
            var customerSelected = @Model.CustomerView.CustomerId;
            $.ajax({
                url: '/Quote/GetCustomerList',
                method: 'POST',
                success: function (data) {
                    var customerList = data.customers;

                    $(customerList).each(function (index, value) {
                        var option = "";
                        if (customerSelected == value.CustomerId) {
                             option = "<option selected='selected' value=" + value.CustomerId + ">" + value.Name + "</option>";
                        } else {
                            option = "<option value=" + value.CustomerId + ">" + value.Name + "</option>";
                        }
                        custListDDL.append(option);
                    });
                    custListDDL[0].sumo.reload();
                    $(".master_select").each(function (i, obj) {
                        trigger_change($(obj));
                    });
                },
                error: function (res) {
                    //console.log(res);
                }
            });

            // Tax Code DDL
            var taxCodeListDDL = $("#CustomerView_TaxCodeId");
            var taxCodeSelected = @Model.CustomerView.TaxCodeId;
            $.ajax({
                url: '/Quote/GetTaxCodeList',
                method: 'POST',
                success: function (data) {
                    var taxCodeList = data.taxCodes;
                    $(taxCodeList).each(function (index, res) {
                        var option = "";
                        if (taxCodeSelected == res.Value) {
                            option = "<option selected='selected' value=" + res.Value + ">" + res.Text + "</option>";
                        } else {
                            option = "<option value=" + res.Value + ">" + res.Text + "</option>";
                        }
                        taxCodeListDDL.append(option);
                    });
                    taxCodeListDDL[0].sumo.reload();

                },
                error: function (res) {
                    //console.log(res);
                }
            });

            $("#BlockPlantId").on("change", function () {
                var plantId = $(this).val();
                $.ajax({
                    url: '/Quote/UpdateQuotationBlockPlant',
                    data: { plantId: plantId,quoteId :quotationId },
                    method: 'POST',
                    success: function (data) {
                        //console.log("UpdatePlantStatus =" + data.updateStatus);
                    },
                    error: function (res) {
                         //console.log("Error updating Block Plant");
                    }
                });
            });

        var concreteEnabled = '@Model.DetailsView.ConcreteEnabled';
        var aggregateEnabled = '@Model.DetailsView.AggregateEnabled';
        var blockEnabled = '@Model.DetailsView.BlockEnabled';
        //console.log("concreteEnabled "+concreteEnabled);
        if (concreteEnabled == 'True') {
            $("#concretePanel").show();
        }
        else {
            $("#concretePanel").hide();
        }
        if (aggregateEnabled == 'True') {
            $("#aggregatePanel").show();
        }
        else {
            $("#aggregatePanel").hide();
        }
        if (blockEnabled == 'True') {
            $("#blockPanel").show();
        }
        else {
            $("#blockPanel").hide();
        }


            var quotationAccess = '@(ViewBag.AccessRule.HasQuotationAccess == SIRolePermissionLevelConstants.FULL_ACCESS || ViewBag.AccessRule.HasQuotationAccess == SIRolePermissionLevelConstants.EDIT_ONLY)';
            if (quotationAccess == 'False')
            { disableEveryThing(".cant-disable,#btn_quote_logs"); }

            $(document).on("masterSelectChange",function(e){
                var select = $(e.targetSelector);
                var selectedId = $("#CustomerView_CustomerId").data("selected");

                select.find("option").each(function(index,val){
                    if(val.value.toString() === selectedId.toString())
                    {
                        select.find("option").each(function(i,v){
                            $(this).attr("defaultContact","false");
                        });
                        //console.log($(this).attr("defaultContact","true"));
                    }
                });
                select.val($($(select).find("option[defaultContact='true']")[0]).val());
                select.trigger("change");
            });

            //Refresh all button functionality
            $(".refresh_all_btn").click(function(){
                refreshAll5sk();
            });
            //
            $(".public_comments").on("change",function(){
                $(".public_notes").toggle();
            });

            if(approved == 'True' && EnableEdit=='False'){

                $(".approved_disable").find("input,button,textarea,a").not('#DetailsView_PublicNotes,#toggleTC,#DetailsView_Disclaimers,#DetailsView_Disclosures,#DetailsView_TermsAndConditions,#DetailsView_Active,#DetailsView_PrivateNotes,#QuotationId,#quote_form_submit_btn, #btn_quote_logs').attr("readonly", true).attr("title", "Cannot change since the quotation is approved");
                $(".approved_disable").find("select,input:checkbox,.addOn-btn,.refresh_all_btn,#PricingMonth,.quick_add_agg,.quick_add_block").not('#DetailsView_PublicNotes,#toggleTC,#DetailsView_Disclaimers,#DetailsView_Disclosures,#DetailsView_TermsAndConditions,#DetailsView_Active,#DetailsView_PrivateNotes,#QuotationId,#quote_form_submit_btn, #btn_quote_logs').attr("disabled",true).attr("title","Cannot change since the quotation is approved");
                $(".approved_disable").find(".btn-danger").hide();
                $(".approved_disable").find(".add_mix_btn").hide();
                $(".approved_disable").find(".show_formulation_search,.adjust-price").hide();
                $(".approved_disable a").hide();
                setTimeout(function () {
                    $(".approved_disable").find("select").attr("disabled", true);
                    $(".approved_disable .btn-danger").hide();
                }, 800)

                $(".quote-info").find(":input.datepicker").removeClass("datepicker");
                $("#ProjectView_SalesStaffId").removeClass("multiselect").attr("disabled", true).attr("title", "Sales Staff cannot be changed if the quote is approved");

            }


            $("body").on("click",".show_5sk_calc_btn",function(data){
                modal_div = $("#FskCalculationModal");
                mix_id = $(this).parents("tr").data("id");
                fsk_price_id = $("#PricingCity").val();
                $.get("/Quote/Show5skCalculations",{id:quotationId,quoteMixId:mix_id,fskPriceId:fsk_price_id},function(data){
                    modal_div.find(".modal-body").html(data);
                    modal_div.modal("show");
                });
                return false;
            });



            $(".quick_add_mix").click(function(){
                quick_add_mix();
                return false;
            });


            $("body").on("keyup",".volume_field,.price_field,.unload_field,.avg_load_field",function(){
                //console.log("keyup")
                id = $(this).parents("tr").data("id");
                refreshMixCalculations(id);
            });

            $("body").on("keydown",".volume_field,.price_field,.unload_field,.avg_load_field",function(e){
                if (e.keyCode == '38'){
                    col = $(this).parents("td").first().index();
                    $(this).parents("tr").first().prev().find("td:eq("+col+") input").focus();
                }
            });


            $("body").on("blur", ".volume_field,.price_field,.unload_field,.avg_load_field", function () {
                id = $(this).parents("tr").data("id");
                var totalVolume = 0.0;
                $(".volume_field").each(function () {
                    totalVolume = totalVolume + parseFloat($(this).val().removeCommas());
                });
                if (approved == 'True' && EnableEdit == 'True') {
                    $.get("/json/GetUserQuotationApprovalLimit", { "quoteId": @Model.QuotationId }, function (data) {
                        var data = JSON.parse(data)
                        if (totalVolume > data.approvalLimit) {
                            $("#cydVoilation").modal("show");
                            var row = $("#row_" + id);
                            $.get("/json/GetMixVolume", { "id": id }, function (data) {
                                var data = JSON.parse(data)
                                row.find(".volume_field").val(data.mixVolume);
                            });
                            return false;
                        }
                        else {
                            updateMixParameters(id);
                        }
                    });
                } else {
                    updateMixParameters(id);
                }

            });

            try{
                $(".fsk_switch").change(function(){
                    fskId = "";
                    if ($(this).is(":checked")){
                        $(".fsk_related").show();
                        fskId = $("#PricingCity").val();
                    }else{
                        $(".fsk_related").hide();
                        //TODO Reset all 5sk
                    }
                    $.get("/Quote/Update5skPriceInQuote",{id:quotationId,"fskPriceId":fskId},function(data){
                        $("#FskBasePrice").val(data);
                    });
                    refreshAll5sk();
                });
                $("#PricingCity").change(function(){
                    fskId = $("#PricingCity").val();
                    $.get("/Quote/Update5skPriceInQuote",{id:quotationId,"fskPriceId":fskId},function(data){
                        $("#FskBasePrice").val(data);
                        refreshAll5sk();
                    });
                });
                $("#FskBasePrice").blur(function(){
                    price = $("#FskBasePrice").val();
                    $.get("/Quote/Update5skBasePrice",{id:quotationId,"fskPrice":price},function(data){
                        $("#FskBasePrice").val(data);
                        refreshAll5sk();
                    });
                });
            }catch(ex){
                //console.log("no fsk-switch");
            }

            $("body").on("change",".mix_field",function(e){
                row = $(this).parents("tr");
                old_value = $(this).data("oldVal");
                if ($(".fsk_switch").is(":checked")){
                    fetchFskPrice(row,old_value,true);
                }
                else{
                    fetchNormalPrice(row,old_value,true);
                }
            });


            $("body").on("blur",".desc_field",function(e){
                description = $(this).val();
                id = $(this).parents("tr").data("id");
                $.get("/Quote/UpdateQuoteMixDescription",{"id":id,"description":description},function(data){});
            });

            $("body").on("blur",".public_notes_field",function(e){
                publicNotes = $(this).val();
                id = $(this).parents("tr").data("id");
                $.get("/Quote/UpdateQuoteMixPublicNotes",{"id":id,"publicNotes":publicNotes},function(data){});
            });

            //function refreshRowPrices(row){
            //    id = row.data("id");
            //    standardMix = row.find(".mix_field").val();
            //    element = row.find(".mix_field");
            //    $.get("/Quote/FindStandardMixCost",{"id":quotationId,"quoteMixId":id,"standardMixId":standardMix},function(data){
            //        priceData = JSON.parse(data);
            //        if (priceData.mixCost == 0){
            //            alert("This mix has ingredients without costs, and cannot be added");
            //            $(element).multiselect('deselectAll', true);
            //            $(element).multiselect('deselect', standardMix);
            //        }else{
            //            row.data("mix-cost",priceData.mixCost);
            //            row.attr("data-mix-cost",priceData.mixCost);
            //            row.find(".price_field").val(priceData.price);
            //            refreshMixCalculations(row.data("id"));
            //            updateMixParameters(row.data("id"));
            //        }
            //    });
            //}


            $('.datepicker').datepicker({
                format: 'm/d/yyyy' // Default is 'mm/yyyy' and separator char is not mandatory
            }).on('changeDate', function (ev) {
                $(this).datepicker('hide');
            });

            $(".monthpicker").datepicker({
                format: "M, yyyy",
                viewMode: "months",
                minViewMode: "months",
                startDate: new Date(),
            }).on('changeDate', function (ev) {
                $(this).datepicker('hide');
            });

            $("body").on("click",".move_row",function(element){
                dir = $(this).data("dir");
                the_row = $(this).parents("tr").first();
                all_rows = the_row.parents("tbody").find("tr");
                //console.log(all_rows);
                total_rows = all_rows.size();
                //console.log(total_rows);
                max_index = total_rows - 1;
                index = the_row.index();
                if (dir == "down"){
                    if (index < max_index){
                        next_row = the_row.next();
                        //console.log(next_row);
                        next_row.insertBefore(the_row);
                    }
                }else{
                    if (index > 0){
                        prev_row = the_row.prev();
                        the_row.insertBefore(prev_row);
                    }
                }
                table = $(this).parents("table");
                var rows = table.find("tbody > tr");
                var ids = [];
                for (var i = 0; i < rows.length; i++) {
                    tmp_row = rows[i];
                    ids.push($(tmp_row).data("id"));
                }
                $.get("/Quote/UpdateMixPositions", $.param({ ids: ids }, true), function (data) {
                    //console.log(data);
                });
            });

            @if (Model.CustomerView.CustomerId == 0)
            {
                <Text>
            $(".edit_customer_btn").hide();
            </text>
            }

            $(".edit_customer_btn").click(function(){
                selected_entity_id = $("#CustomerView_CustomerId").val();
                $.get("/Json/GetCustomerDetails",{"id":selected_entity_id},function(data){
                    info = JSON.parse(data);
                    if(info.dispatchId!=null && '@aujsAPIEnabled'=="True")
                    {
                        $("#NewCustomerModal").find(".customer_name_field").val(info.name).prop("readonly", true);
                        $("#NewCustomerModal").find(".customer_number_field").val(info.number).prop("readonly", true);
                    }
                    else
                    {
                        $("#NewCustomerModal").find(".customer_name_field").val(info.name).prop("readonly", false);
                        $("#NewCustomerModal").find(".customer_number_field").val(info.number).prop("readonly", false);
                    }
                    $("#NewCustomerModal").find(".customer_id_field").val(info.id);
                    $("#NewCustomerModal").find(".modal-title").text("Edit Customer");
                    $("#NewCustomerModal").modal("show");
                });
            });

            $(".add_customer_btn").click(function(){
                $("#NewCustomerModal").find(".customer_name_field").val("").prop("readonly", false);
                $("#NewCustomerModal").find(".customer_number_field").val("").prop("readonly", false);
                $("#NewCustomerModal").find(".customer_id_field").val("");
                $("#NewCustomerModal").find(".modal-title").text("Add New Customer");
                $("#NewCustomerModal").modal("show");
            });

            $(".update_customer_btn").click(function(){
                name = $("#NewCustomerModal").find(".customer_name_field").val();
                number = $("#NewCustomerModal").find(".customer_number_field").val();
                id = $("#NewCustomerModal").find(".customer_id_field").val();
                $.post("/Json/UpdateCustomer",{"id":id,"name":name,"number":number},function(data){
                    info = JSON.parse(data);
                    //console.log(info);
                    if (info.status == "error"){
                        alert(info.message);
                    }else{
                        if (id == "" || id == undefined){
                            addOption("#CustomerView_CustomerId",info.name,info.id);
                            //$("#CustomerView_CustomerId").multiselect("rebuild");
                        }else{
                            removeOption("#CustomerView_CustomerId",info.id);
                            addOption("#CustomerView_CustomerId",info.name,info.id);
                            //$("#CustomerView_CustomerId").multiselect("rebuild");
                        }
                        $("#CustomerView_CustomerId")[0].sumo.reload();
                        var IdIndex = $("#CustomerView_CustomerId").find('option[value="' + info.id + '"]').index();
                        $("#CustomerView_CustomerId")[0].sumo.selectItem(IdIndex);
                        //$("#CustomerView_CustomerId").multiselect("select",info.id);
                        $("#CustomerView_CustomerId").trigger("change");
                        $("#NewCustomerModal").modal("hide");
                    }
                });
            });

            $(".edit_contact_btn").click(function(){
                selected_entity_id = $("#CustomerView_CustomerContactId").val();
                $.get("/Json/GetCustomerContactDetails",{"id":selected_entity_id},function(data){
                    info = JSON.parse(data);
                    $("#NewCustomerContactModal").find(".contact_title_field").val(info.title);
                    $("#NewCustomerContactModal").find(".contact_name_field").val(info.name);
                    $("#NewCustomerContactModal").find(".contact_phone_field").val(info.phone);
                    $("#NewCustomerContactModal").find(".contact_fax_field").val(info.fax);
                    $("#NewCustomerContactModal").find(".contact_email_field").val(info.email);
                    $("#NewCustomerContactModal").find(".contact_id_field").val(info.id);
                    $("#NewCustomerContactModal").find(".modal-title").text("Edit Customer Contact");
                    $("#NewCustomerContactModal").modal("show");
                });
            });

            $(".add_contact_btn").click(function(){
                $("#NewCustomerContactModal").find(".contact_name_field").val("");
                $("#NewCustomerContactModal").find(".contact_title_field").val("");
                $("#NewCustomerContactModal").find(".contact_phone_field").val("");
                $("#NewCustomerContactModal").find(".contact_fax_field").val("");
                $("#NewCustomerContactModal").find(".contact_email_field").val("");
                $("#NewCustomerContactModal").find(".contact_id_field").val("");
                $("#NewCustomerContactModal").find(".modal-title").text("New Customer Contact");
                $("#NewCustomerContactModal").modal("show");
            });

            $(".update_contact_btn").click(function(){
                name        =   $("#NewCustomerContactModal").find(".contact_name_field").val();
                title       =   $("#NewCustomerContactModal").find(".contact_title_field").val();
                phone       =   $("#NewCustomerContactModal").find(".contact_phone_field").val();
                fax         =   $("#NewCustomerContactModal").find(".contact_fax_field").val();
                email       =   $("#NewCustomerContactModal").find(".contact_email_field").val();
                id          =   $("#NewCustomerContactModal").find(".contact_id_field").val();
                customerId  =   $("#CustomerView_CustomerId").val();
                params = {"id":id,"customerId":customerId,"name":name,"title":title,"phone":phone,"fax":fax,"email":email};
                $.get("/Json/UpdateCustomerContact",params,function(data){
                    info = JSON.parse(data);
                    if (info.status == "error"){
                        alert(info.message);
                    }else{
                        if (id == "" || id == undefined){
                            addOption("#CustomerView_CustomerContactId",info.name,info.id);
                        }else{
                            removeOption("#CustomerView_CustomerContactId",info.id);
                            addOption("#CustomerView_CustomerContactId",info.name,info.id);
                        }
                        $("#CustomerView_CustomerContactId").find("option").prop("selected",false);
                        $("#CustomerView_CustomerContactId").find("option[value="+info.id+"]").prop("selected",true);
                        $("#CustomerView_CustomerContactId").val(info.id);
                        $("#CustomerView_CustomerContactId").trigger("change");
                        $("#NewCustomerContactModal").modal("hide");
                    }
                });
            });

            $(".customer_contact_select").change(function(){
                fill_customer_contact_info();
            });

            $(".new_customer_btn").click(function () {
                $("#CustomerView_CustomerId").val("");
            });

            $(".new_customer_contact_btn").click(function () {
                $("#CustomerView_CustomerContactId").val("");
            });

            /*********************** Search Mix Formulation Table *********************/

            $("#SearchMixFormulationModal").on("shown.bs.modal",function(){
                $(".searching_mixes").show();
                update_search_formulation_modal();
            });

            $("#btn_audit_log").on("click",function(e){
                $.ajax({
                    url: '/Quote/AuditLogs',
                    data: { id: eval(@Model.QuotationId)},
                    method: 'POST',
                    success: function(data){
                        populateLogs(data.logs);
                    },
                    error: function(res){
                    }
                });
            });

            function populateLogs(logs) {
                var output = $("#audit_logs");
                if(logs && logs.length){
                    $(logs).each(function(i,e){
                        output.push();
                    });
                }
            }
            //if (navigator.userAgent.match(/(iPhone)/i)) {
            //    $(window).scroll(function () {
            //        $currentScrollPos = $(document).scrollTop();
            //    })
            //    $('.multiselect').click(function () {
            //        if ($('.SumoSelect').hasClass('open')) {
            //            $('body').css({
            //                'position': 'fixed'
            //            });
            //            localStorage.cachedScrollPos = $currentScrollPos;
            //        } else {
            //            $('body').css({
            //                'position': 'relative'
            //            });
            //            $('body').scrollTop(localStorage.cachedScrollPos);
            //        }
            //    });
            //}
        })

    </script>

    <script>
    //var app = angular.module("SIWeb", ['directive']);

    angular.module('SIWeb')
        .controller("SIWeb.AuditLogs", function($scope, $http, $interval){
            $scope.noMoreLogs = false;
            var logs = [];

            $scope.loadLogs = function(){
                $scope.logs = [];
                $scope.loaderEnabled = true;
                $http({
                    method: 'POST',
                    url: '/Quote/AuditLogs',
                    data: { id: eval(@Model.QuotationId) }
                }).then(function(res){
                    var data = res.data;
                    logs = [];
                    data.logs.forEach(function(item, index){
                        var date = new Date(item.DateUtc);
                    //    if (item.RefLink != "") {
                    //                 $http({
                    //method: 'POST',
                    //url: '/Quote/GetPreSigendURL/' + item.RefLink,
                    //       }).then(function (res) {
                    //           var data = res.data;
                    //           item.RefLink = data.Url;
                    //           }, function onError(response) {
                    //               //$scope.error = true;
                    //               //$scope.message = "Could not load Audit logs";
                    //           }).finally(function () {
                    //               //$scope.loaderEnabled = false;
                    //           });
                    //    }

                        logs.push({ id: item.Id, desc: item.Description, user: item.User, date: date.toISOString(),refLink:item.RefLink });
                    });
                    $scope.logs = logs;
                    $scope.noMoreLogs = true;
                }, function onError(response){
                    $scope.error = true;
                    $scope.message = "Could not load Audit logs";
                }).finally(function(){
                    $scope.loaderEnabled = false;
                });
            }
        })

        .controller("SIWeb.QuoteAddOns", function($scope, $http) {

            $http({
                method: 'POST',
                    url: '/Json/GetAllConcreteAddons',
                    data: { quoteId: eval(@Model.QuotationId) }
            }).then(function (res) {
            $scope.addonList = res.data.concreteAddons;
                    }, function onError(response) {
        }).finally(function () {
            $scope.quoteAddOnDetails = [];
            var quoteAddOns = @(Model.AddOnsView.QuoteAddon != null ? Html.Raw(Json.Encode(Model.AddOnsView.QuoteAddon.OrderBy(x => x.Description))) : Html.Raw(Json.Encode("")));
            var qAddOns = [];
            quoteAddOns.forEach(function (item, index) {
                qAddOns.push({ Id: item.Id, AddonId: item.AddonId, Description: item.Description, Price: item.Price, Per: item.Per, QuoteUomName: item.QuoteUomName, IsIncludeTable: item.IsIncludeTable });
            });
            $scope.quoteAddOnDetails = qAddOns;
            setTimeout(function () {
                var totalConcreteAddons = $scope.quoteAddOnDetails.length;
                $scope.quoteAddOnDetails.forEach(function (item, index) {
                    $(".q_a_" + index).find("select:first-child").SumoSelect({ search: true, forceCustomRendering: true });
                });
                if (approved == 'True' && EnableEdit == 'False') {
                   var tableAddon = ".table-addon ";
                   $(tableAddon + "td > input").attr("disabled", true).attr("title", "Cannot change since the quotation is approved");
                   $(tableAddon + "td > a").hide();
                   $(tableAddon + ".SumoSelect > select").attr("disabled", true);
                   $(tableAddon + ".SumoSelect").addClass("disabled");
                }
            }, 100);
        });

            //Add new Quotation Add On
            $scope.addNew = function(){
                $(".addOn-btn").attr("disabled",true);
                var addonerrorDv = $('.addon-errors');
                addonerrorDv.html("");

                var totalRows = $(".table-addon tbody>tr").length;
                var addonSelectedIdArray = new Array();
                addonSelectedIdArray[0] = 0;
                for(var i = 0;i < totalRows; i++)
                {
                    var el = $(".q_a_" + i);
                    if (el.length) {
                        var ddl = el.find("select:first-child");
                        addonSelectedIdArray[i] = ddl.find("option:selected").val().split(":").pop(-1);
                    }
                }
                var addonIdArray = new Array();
                addonIdArray[0] = 0;
                var elo = $(".q_a_0");
                if (elo.length) {
                    var ddlo = elo.find("select:first-child");
                    ddlo.find('option').each(function(i,v){
                        addonIdArray[i] = v.value.split(":").pop(-1);
                    });
                }

                addonIdArray = addonIdArray.filter(function (el) {
                        return addonSelectedIdArray.indexOf(el) < 0;
                });
                var addonId = 0;
                if (addonIdArray[0] == undefined) {
                    var addonListCounts = $scope.addonList.length;
                    for (var j = 0; j < addonListCounts; j++) {
                        if (FindDuplicateAddon("concrete", $scope.addonList[j].Id) == "") {
                            addonId = $scope.addonList[j].Id;
                            j = addonListCounts;
                        }
                    }
                }
                else {
                    var addonListCount = addonIdArray.length;
                    for (var i = 0; i < addonListCount; i++) {
                        if (FindDuplicateAddon("concrete", addonIdArray[i]) == "") {
                            addonId = addonIdArray[i];
                            i = addonListCount;
                        }
                    }
                }
                if (addonId != 0) {
                    $http({
                        method: 'POST',
                        url: '/json/AddUpdateQuotationAddon',
                        data: { quoteId: eval(@Model.QuotationId), addonIds: addonSelectedIdArray, plantDistrict: pricing_plant_districtId, addonId: addonId }
                    }).then(function (res) {
                        disablePlantDDL();
                        var addon = res.data;
                        $scope.quoteAddOnDetails.push({
                            'Id': addon.QuotationAddonId,
                            'QuotationAddonId': addon.QuotationAddonId,
                            'AddonId': addon.AddonId,
                            'Description': addon.Description,
                            'Price': addon.Price,
                            'QuoteUomName': addon.QuoteUomName,
                            'IsIncludeTable': addon.IsIncludeTable,
                        });
                        setTimeout(function () {
                            $(".addOn-btn").attr("disabled", false);
                            var el = $(".q_a_" + ($scope.quoteAddOnDetails.length - 1));
                            if (el.length) {
                                var sumo = el.find("select:first-child").SumoSelect({ search: true, forceCustomRendering: true });
                            }
                        }, 100);
                    }, function onError(response) {
                        //console.log("Error");
                    }).finally(function () {
                        //console.log("finally");
                    });
                } else {
                    alert("All Add-Ons are already in use.");
                }
            };
            $scope.UpdateAddon= function(item, newValue, oldValue, rowIndex){
                var sItem = item.quoteAddOnDetail;
                var errorExist ='<div class="addon-alert alert alert-warning alert-dismissable fade in">'+
                    '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+
                "<strong><i class='fa fa-exclamation-triangle'></i></strong> ERROR</div>";
                var addonerrorDv = $('.addon-errors');

                var addonExistSection = FindDuplicateAddon("concrete", newValue);
                if ($scope.quoteAddOnDetails.filter(function (x) { return x.AddonId == newValue }).length > 1 || addonExistSection != "") {
                    if (addonExistSection != "") {
                        addonerrorDv.html("").html(errorExist.replace("ERROR", " Selected Add-On exist in Quote-Level " + addonExistSection + " Add-Ons."));
                        addonerrorDv.find("div:first").addClass("fixed-error-dv alert-danger shake");
                    }
                    else
                    {
                        addonerrorDv.html("").html(errorExist.replace("ERROR", " Selected Add-On exist."));
                    }
                    sItem.AddonId = oldValue;
                    setTimeout(function(){
                        var el = angular.element(".q_a_" + rowIndex);
                        if (el.length) {
                            el.find("select:first-child")[0].sumo.reload();
                        }
                    }, 800);
                }else{
                    addonerrorDv.html("");
                    var addonSelectedIdArray = new Array();
                    addonSelectedIdArray[0] = 0;
                    var quotationTableRow = $scope.quoteAddOnDetails[rowIndex];
                    var params ={quoteId:eval(@Model.QuotationId),
                        addonIds:addonSelectedIdArray,
                        plantDistrict:pricing_plant_districtId,
                        addonId:quotationTableRow.AddonId,
                        quotationAddonId:quotationTableRow.Id}
                    $http({
                        method: 'POST',
                        url: '/json/AddUpdateQuotationAddon',
                        data: params,
                    }).then(function(res){
                        var addon = res.data;
                        quotationTableRow.AddonId = addon.AddonId;
                        quotationTableRow.Description = addon.Description;
                        quotationTableRow.Price = addon.Price;
                        quotationTableRow.QuoteUomName = addon.QuoteUomName;
                        quotationTableRow.IsIncludeTable = addon.IsIncludeTable;
                        if (!addon.IsAddonExistForQuotation)
                        { }
                        else
                        { }
                            //console.log("Add on exist for this quote")
                        //$scope.quoteAddOnDetails[rowIndex]=addon;
                    }, function onError(response){
                        //console.log("Error");
                    }).finally(function(){
                        //console.log("finally");
                    });
                }
            };


            $scope.UpdateAddonFields=function(rowIndex){
                var addonerrorDv = $('.addon-errors')
                addonerrorDv.html("");
                var quotationTableRow = $scope.quoteAddOnDetails[rowIndex];

                var params ={quotationAddonId:quotationTableRow.Id,
                    addonId:quotationTableRow.AddonId,
                    description:quotationTableRow.Description==null?"":quotationTableRow.Description,
                    price:quotationTableRow.Price==null?0:quotationTableRow.Price,
                    isIncludeTable:quotationTableRow.IsIncludeTable==null?false:quotationTableRow.IsIncludeTable}
                $http({
                    method: 'POST',
                    url: '/json/UpdateQuotationAddonFields',
                    data: params,
                }).then(function(res){
                    var status = res.data;
                    //if(status.fieldupdateStatus)
                    //{
                    //    var ddlText = status.addonCode+(quotationTableRow.Description==""?"":' - '+quotationTableRow.Description);
                    //    setTimeout(function(){
                    //        var el = angular.element(".q_a_" + rowIndex);
                    //        if (el.length) {
                    //            var ddl = el.find("select:first-child");
                    //            ddl.find(":selected").text(ddlText);
                    //            ddl[0].sumo.reload();
                    //        }
                    //    }, 800);
                    //    for(var i = 0;i < $scope.quoteAddOnDetails.length; i++)
                    //    {
                    //        if(i != rowIndex)
                    //        {
                    //            var el = $(".q_a_" + i);
                    //            if (el.length) {
                    //                var ddl = el.find("select:first-child");
                    //                ddl.find("option[value='number:"+quotationTableRow.AddonId+"']").text(ddlText);
                    //                ddl[0].sumo.reload();
                    //            }
                    //        }
                    //    }
                    //}
                }, function onError(response){
                    //console.log("Error");
                }).finally(function(){
                    //console.log("finally");
                });
            }
            $scope.deleteQuoteAddon = function(index,e){
                if($(e.target).data("delete"))
                { //console.log("sliced");
                    $scope.quoteAddOnDetails.splice(index,1);
                }
            }
        })

        //Quotation Aggregate
        .controller("SIWeb.QuotationAggregate", function ($scope, $http, $filter) {
            $scope.aggProduct = @Html.Raw(Json.Encode(Model.QuotationAgg.AggProductList));
            $scope.aggPlantList = @Html.Raw(Json.Encode(Model.ChooseAggregatePlants));
            $scope.aggregatePlantId = "@Model.AggregatePlantId.GetValueOrDefault(0)";
            $scope.quoteAggregateDetails = [];
            $scope.addonList = @Html.Raw(Json.Encode(Model.QuoteAggAddon.AllAggregateAddonsList));

            var qAggsAddon = [];
            $scope.quoteAggregateAddonDetails = [];
            var quoteAggsAddon =@(Model.QuoteAggAddon.QuoteAggAddonModel != null ? Html.Raw(Json.Encode(Model.QuoteAggAddon.QuoteAggAddonModel.OrderBy(x=>x.Description))):Html.Raw(Json.Encode("")));

            var quoteAggs = @(Model.QuotationAgg.QuoteAggModel != null ? Html.Raw(Json.Encode(Model.QuotationAgg.QuoteAggModel.OrderBy(x => x.QuotedDescription))) : Html.Raw(Json.Encode("")));
            var qAggs = [];
            quoteAggs.forEach(function (item, index) {
                qAggs.push({
                    Id: item.Id,
                    AggregateProductId: item.AggregateProductId,
                    QuotedDescription: item.QuotedDescription,
                    Qty: item.Volume == 0 ? "" : $filter('number')(item.Volume, 2),
                    Price: item.Price == 0 ? "" : $filter('number')(item.Price, 2),
                    Freight: $filter('number')(item.Freight, 2),
                    PublicComments: item.PublicNotes == "" ? "" : item.PublicNotes,
                    TotalPrice: item.TotalPrice == 0 ? "" : item.TotalPrice,
                    TotalRevenue: item.TotalRevenue == 0 ? "" : item.TotalRevenue
                });
            });
            $scope.quoteAggregateDetails = qAggs;

            quoteAggsAddon.forEach(function (item, index) {
                qAggsAddon.push({
                    'Id': item.Id,
                    'QuotationAddonId': item.QuotationAddonId,
                    'AddonId': item.AddonId,
                    'Description': item.Description,
                    'Price': item.Price,
                    'QuoteUomName': item.QuoteUomName,
                    'IsIncludeTable': item.IsIncludeTable
                });
            });
            $scope.quoteAggregateAddonDetails = qAggsAddon;

            disableAggregatePlantDDL();

            $scope.addNewAggregateAddon = function(){
                $(".aggregateAddOn-btn").attr("disabled", true);
                var plantId = $(".agg_plant_ddl").val().split(":");

                var totalRows = $(".table-aggregateAddon tbody>tr").length;
                var addonSelectedIdArray = new Array();
                addonSelectedIdArray[0] = 0;
                for(var i = 0;i < totalRows; i++)
                {
                    var el = $(".q_aggAddon_" + i);
                    if (el.length) {
                        var ddl = el.find("select:first-child");
                        addonSelectedIdArray[i] = ddl.find("option:selected").val().split(":").pop(-1);
                    }
                }
                var addonIdArray = new Array();
                addonIdArray[0] = 0;
                var elo = $(".q_aggAddon_0");
                var totalDDLOptions = 0;
                if (elo.length) {
                    var ddlo = elo.find("select:first-child");
                    ddlo.find('option').each(function (i, v) {
                        totalDDLOptions = i;

                        addonIdArray[i]=v.value.split(":").pop(-1);
                    });
                }

                if (totalDDLOptions < totalRows) {
                    alert("All Add-On exist.");
                    $(".aggregateAddOn-btn").attr("disabled", false);

                } else {
                addonIdArray = addonIdArray.filter( function( el ) {
                    return addonSelectedIdArray.indexOf( el ) < 0;
                } );

                var addonId = 0;
                if (addonIdArray[0] == undefined) {
                    var addonListCounts = $scope.addonList.length;
                    for (var j = 0; j < addonListCounts; j++) {
                        //console.log("Aggregate Addon " + $scope.addonList[j].Id);
                        if (FindDuplicateAddon("aggregate", $scope.addonList[j].Id) == "") {
                            addonId = $scope.addonList[j].Id;
                            j = addonListCounts;
                        }
                    }
                }
                else {
                    var addonListCount = addonIdArray.length;
                    for (var i = 0; i < addonListCount; i++) {
                        if (FindDuplicateAddon("aggregate", addonIdArray[i]) == "") {
                            addonId = addonIdArray[i];
                            i = addonListCount;
                        }
                    }
                }
                if (addonId != 0) {
                $http({
                    method: 'POST',
                    url: '/json/AddQuotationAggregateAddon',
                    data: { quoteId: eval(@Model.QuotationId), addonIds: addonSelectedIdArray, plantId: plantId[1], addonId: addonId }
                }).then(function(res){
                    //disablePlantDDL();
                    var addon = res.data;
                    $scope.quoteAggregateAddonDetails.push({
                        'Id': addon.QuotationAddonId,
                        'QuotationAddonId': addon.QuotationAddonId,
                        'AddonId': addon.AddonId,
                        'Description': addon.Description,
                        'Price': addon.Price,
                        'QuoteUomName': addon.QuoteUomName,
                        'IsIncludeTable': addon.IsIncludeTable,
                    });
                    setTimeout(function(){
                        $(".aggregateAddOn-btn").attr("disabled",false);
                        var el = $(".q_aggAddon_" + ($scope.quoteAggregateAddonDetails.length-1));
                        if (el.length) {
                            var sumo=el.find("select:first-child").SumoSelect({search : true, forceCustomRendering: true});
                        }
                        if (approved == 'True' && EnableEdit == 'False') {
                            var tableAddon = ".table-aggregateAddon ";
                            $(tableAddon + "td > input,a").attr("disabled", true).attr("title", "Cannot change since the quotation is approved");;
                            $(tableAddon + ".SumoSelect > select").attr("disabled", true);
                            $(tableAddon + ".SumoSelect").addClass("disabled");
                        }
                    }, 100);
                }, function onError(response){
                    //console.log("Error");
                }).finally(function(){
                    //console.log("finally");
                    });
                }
                else {
                    alert("All Add-Ons are already in use.");
                }
              }
                disableAggregatePlantDDL();

            };

            //Adding all addon when plant is selected
            $scope.getAllPlantAddons = function (item) {
                var plantId = item;
                if (plantId == null) {
                    plantId = 0;
                }
              $http({
                    method: 'POST',
                    url: '/Quote/UpdateQuotationAggregatePlant',
                    data: { plantId: plantId, quoteId: quotationId },
                })
               .then(function (res) {
                   var aggAddon = res.data.aggAddonList;
                  var addonList = res.data.addonList;
                  $scope.addonList = addonList;

                   if (aggAddon.length > 0) {
                       aggAddon.forEach(function (item, index) {
                           $scope.quoteAggregateAddonDetails.push({
                               'Id': item.Id,
                               'QuotationAddonId': item.QuotationAddonId,
                               'AddonId': item.AddonId,
                               'Description': item.Description,
                               'Price': item.Price,
                               'QuoteUomName': item.QuoteUomName,
                               'IsIncludeTable': item.IsIncludeTable
                           });
                       })
                   }
                 }, function onError(response){
                     //console.log("Error");
                 }).finally(function(){
                     //console.log("finally");
                    });
              disableAggregatePlantDDL();
            };

            //Updating Aggregagate Addon Fields
            $scope.UpdateAggregateAddonFields = function (rowIndex) {
                var addonerrorDv = $('.addon-errors')
                addonerrorDv.html("");
                var quotationTableRow = $scope.quoteAggregateAddonDetails[rowIndex];

                var params = {
                    quotationAddonId: quotationTableRow.Id,
                    addonId: quotationTableRow.AddonId,
                    description: quotationTableRow.Description == null ? "" : quotationTableRow.Description,
                    price: quotationTableRow.Price == null ? 0 : quotationTableRow.Price,
                    isIncludeTable: quotationTableRow.IsIncludeTable == null ? false : quotationTableRow.IsIncludeTable
                }
                $http({
                    method: 'POST',
                    url: '/json/UpdateQuotationAggregateAddonFields',
                    data: params,
                }).then(function (res) {
                    var status = res.data;
                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
            }

              $scope.UpdateAggregateAddon = function(item, newValue, oldValue, rowIndex){
                  var plantId = $(".agg_plant_ddl").val().split(":");
                var sItem = item.quoteAggregateAddOnDetail;
                var errorExist ='<div class="addon-alert alert alert-warning alert-dismissable fade in">'+
                    '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+
                "<strong><i class='fa fa-exclamation-triangle'></i></strong>ERROR</div>";
                var addonerrorDv = $('.aggregateAddon-errors');

                var addonExistSection = FindDuplicateAddon("aggregate", newValue);
                if ($scope.quoteAggregateAddonDetails.filter(function (x) { return x.AddonId == newValue }).length > 1 || addonExistSection != "") {
                    if (addonExistSection != "") {
                        addonerrorDv.html("").html(errorExist.replace("ERROR", " Selected Add-On exist in Quote-Level " + addonExistSection + " Add-Ons."));
                        addonerrorDv.find("div:first").addClass("fixed-error-dv alert-danger shake");
                            }
                            else {
                        addonerrorDv.html("").html(errorExist.replace("ERROR", " Selected Add-On exist."));
                    }
                    sItem.AddonId = oldValue;
                    setTimeout(function(){
                        var el = angular.element(".q_aggAddon_" + rowIndex);
                        if (el.length) {
                            el.find("select:first-child")[0].sumo.reload();
                        }
                    }, 800);
                }else{
                    addonerrorDv.html("");
                    var addonSelectedIdArray = new Array();
                    addonSelectedIdArray[0] = 0;
                    var quotationTableRow = $scope.quoteAggregateAddonDetails[rowIndex];
                    var params ={quoteId:eval(@Model.QuotationId),
                        addonIds:addonSelectedIdArray,
                        plantId: plantId[1],
                        addonId:quotationTableRow.AddonId,
                        quotationAddonId:quotationTableRow.Id}
                    $http({
                        method: 'POST',
                        url: '/json/AddUpdateQuotationAggregateAddon',
                        data: params,
                    }).then(function(res){
                        var addon = res.data;
                        quotationTableRow.AddonId = addon.AddonId;
                        quotationTableRow.Description = addon.Description;
                        quotationTableRow.Price = addon.Price;
                        quotationTableRow.QuoteUomName = addon.QuoteUomName;
                        quotationTableRow.IsIncludeTable = addon.IsIncludeTable;
                        if (!addon.IsAddonExistForQuotation)
                        { }
                        else
                        { }
                            //console.log("Add on exist for this quote")
                        //$scope.quoteAddOnDetails[rowIndex]=addon;
                    }, function onError(response){
                        //console.log("Error");
                    }).finally(function(){
                        //console.log("finally");
                    });
                }
            };

            //Add new Quotation Aggregate
            $scope.addNewQuoteAgg = function () {
                $(".quick_add_agg").attr("disabled",true);
                var totalRows = $(".table-aggregate tbody>tr").length;
                var aggregateSelectedIdArray = new Array();
                aggregateSelectedIdArray[0] = 0;

                for(var i = 0;i < totalRows; i++)
                {
                    var el = $(".q_agg_" + i);
                    if (el.length) {
                        var ddl = el.find("select:first-child");
                        aggregateSelectedIdArray[i] = ddl.find("option:selected").val().split(":").pop(-1);
                    }
                }
                var aggregateIdArray = new Array();
                aggregateIdArray[0] = 0;
                var elo = $(".q_agg_0");
                if (elo.length) {
                    var ddlo = elo.find("select:first-child");
                    ddlo.find('option').each(function(i,v){
                        aggregateIdArray[i]=v.value.split(":").pop(-1);
                    });
                }

                aggregateIdArray = aggregateIdArray.filter( function( el ) {
                    return aggregateSelectedIdArray.indexOf( el ) < 0;
                } );
                var aggregateProductId = 0;
                if (aggregateIdArray[0] == undefined)
                    aggregateProductId = $scope.aggProduct[0].Id;
                else
                    aggregateProductId = aggregateIdArray[0];

                $http({
                    method: 'POST',
                    url: '/json/AddUpdateQuotationAggregate',
                    data: { quoteId: eval(@Model.QuotationId), aggregateProductId: aggregateProductId }
                }).then(function(res){
                    var quoteAgg = res.data;
                    $scope.quoteAggregateDetails.push({
                        'Id': quoteAgg.QuotationAggregateId,
                        'AggregateProductId': quoteAgg.AggregateProductId,
                        'QuotedDescription': quoteAgg.QuotedDescription,
                        'Price': $filter('number')(quoteAgg.Price,2),
                        'Qty': $filter('number')(quoteAgg.Volume, 2),
                        'Freight': $filter('number')(quoteAgg.Freight, 2),
                        'TotalPrice': quoteAgg.TotalPrice,
                        'TotalRevenue': quoteAgg.TotalRevenue
                    });
                    setTimeout(function(){
                        $(".quick_add_agg").attr("disabled",false);
                        var el = $(".q_agg_" + ($scope.quoteAggregateDetails.length-1));
                        if (el.length) {
                            var sumo=el.find("select:first-child").SumoSelect({search : true, forceCustomRendering: true});
                        }
                    }, 100);
                }, function onError(response){
                    //console.log("Error");
                }).finally(function(){
                    //console.log("finally");
                });
            };

            //update Aggregate Product
            $scope.UpdateQuoteAggregate= function(item, newValue, oldValue, rowIndex){
                var sItem = item.quoteAggregateDetail;
                var errorExist ='<div class="addon-alert alert alert-warning alert-dismissable fade in">'+
                    '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+
                "<strong><i class='fa fa-exclamation-triangle'></i></strong> ERROR</div>";
                var aggregateErrorDv = $('.agg-errors')
                if ($scope.quoteAggregateDetails.filter(function (x) { return x.AggregateProductId == newValue }).length > 1){
                    aggregateErrorDv.html("").html(errorExist.replace("ERROR"," Selected Product exist."));
                    sItem.AggregateProductId = oldValue;
                    setTimeout(function(){
                        var el = angular.element(".q_agg_" + rowIndex);
                        if (el.length) {
                            el.find("select:first-child")[0].sumo.reload();
                        }
                    }, 800);
                }else{
                    aggregateErrorDv.html("");
                    var aggregateProductSelectedIdArray = new Array();
                    aggregateProductSelectedIdArray[0] = 0;
                    var quotationTableRow = $scope.quoteAggregateDetails[rowIndex];
                    var params ={quoteId:eval(@Model.QuotationId),
                        newProductId: newValue,
                        oldProductId:oldValue}
                    $http({
                        method: 'POST',
                        url: '/json/AddUpdateQuotationAggregateProduct',
                        data: params,
                    }).then(function(res){
                        var quoteAgg = res.data;
                        quotationTableRow.QuotedDescription = quoteAgg.description;
                        quotationTableRow.Price = $filter('number')(quoteAgg.price, 2);
                        quotationTableRow.TotalPrice = $filter('number')(quoteAgg.totalPrice, 2);
                        quotationTableRow.TotalRevenue = $filter('number')(quoteAgg.totalRevenue, 2);
                    }, function onError(response){
                        //console.log("Error");
                    }).finally(function(){
                        //console.log("finally");
                    });
                }
            };


            //Update Quotation Fields

            $scope.UpdateQuoteAggFields = function (rowIndex) {
                //var addonerrorDv = $('.addon-errors')
                //addonerrorDv.html("");
                var quoteAggTableRow = $scope.quoteAggregateDetails[rowIndex];
                var params = {
                    quoteAggId: quoteAggTableRow.Id,
                    quotedDescription: quoteAggTableRow.QuotedDescription,
                    quantity: quoteAggTableRow.Qty == "" ? 0 : removeCommasFromNumber(quoteAggTableRow.Qty),
                    price: quoteAggTableRow.Price == "" ? 0 : removeCommasFromNumber(quoteAggTableRow.Price),
                    freight: quoteAggTableRow.Freight == "" ? 0 : removeCommasFromNumber(quoteAggTableRow.Freight),
                    publicComments: quoteAggTableRow.PublicComments
                }
                $http({
                    method: 'POST',
                    url: '/json/UpdateQuotationAggregateFields',
                    data: params,
                }).then(function (res) {
                    var quoteAgg = res.data;
                    quoteAggTableRow.Price = $filter('number')(quoteAgg.Price, 2);
                    quoteAggTableRow.Qty = $filter('number')(quoteAgg.Volume, 2);
                    quoteAggTableRow.Freight = $filter('number')(quoteAgg.Freight, 2);
                    quoteAggTableRow.TotalPrice = quoteAgg.TotalPrice;
                    quoteAggTableRow.TotalRevenue = quoteAgg.TotalRevenue;

                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
            };

            // Delete Aggregate Addon
            $scope.deleteAggregateAddon= function (index, id) {
                var item = $scope.quoteAggregateAddonDetails.filter(function (x) { return x.Id == id; });
                $scope.quoteAggregateAddonDetails.splice(index, 1);
                var params = { quoteAggregateAddonId: id }

                $http({
                    method: 'POST',
                    url: '/quote/DeleteQuotationAggregateAddon',
                    data: params,
                }).then(function (res) {
                    var deleteStatus = res.deleteStatus;
                    //console.log("Delete Status = " + deleteStatus);
                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                    });
                disableAggregatePlantDDL()
            };


         // Delete Aggregate
            $scope.deleteAggregateProduct = function (index,id) {
                var item = $scope.quoteAggregateDetails.filter(function (x) { return x.Id == id; });
                $scope.quoteAggregateDetails.splice(index,1);
                //console.log("Deleting Item");
                var params = { quoteAggregateId: id }

                $http({
                    method: 'POST',
                    url: '/quote/DeleteQuotationAggregate',
                    data: params,
                }).then(function (res) {
                    var deleteStatus = res.deleteStatus;
                    //console.log("Delete Status = "+ deleteStatus);

                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
            };


        })

        //Quotation Block

        .controller("SIWeb.QuotationBlock", function ($scope, $http, $filter) {
            $scope.blockProduct = @Html.Raw(Json.Encode(Model.QuotationBlock.BlockProductList));
            $scope.quoteBlockDetails = [];
            var quoteBlocks = @(Model.QuotationBlock.QuoteBlockModel != null ? Html.Raw(Json.Encode(Model.QuotationBlock.QuoteBlockModel.OrderBy(x => x.QuotedDescription))) : Html.Raw(Json.Encode("")));
            var qBlocks = [];

            $scope.blockPlantList = @Html.Raw(Json.Encode(Model.ChooseBlockPlants));
            $scope.blockPlantId = "@Model.BlockPlantId.GetValueOrDefault(0)";
            $scope.addonList = @Html.Raw(Json.Encode(Model.QuoteBlockAddon.AllBlockAddonsList));
            var qBlockAddon = [];
            $scope.quoteBlockAddonDetails = [];
            var quoteBlockAddon =@(Model.QuoteBlockAddon.QuoteBlockAddonModel != null ? Html.Raw(Json.Encode(Model.QuoteBlockAddon.QuoteBlockAddonModel.OrderBy(x=>x.Description))):Html.Raw(Json.Encode("")));

            quoteBlocks.forEach(function(item, index){
                qBlocks.push({
                    Id: item.Id,
                    BlockProductId: item.BlockProductId,
                    QuotedDescription: item.QuotedDescription,
                    Qty: item.Volume == 0 ? "" : $filter('number')(item.Volume, 2),
                    Price: item.Price == 0 ? "" : $filter('number')(item.Price, 2),
                    Freight: $filter('number')(item.Freight, 2),
                    PublicComments: item.PublicNotes == "" ? "" : item.PublicNotes,
                    TotalPrice: item.TotalPrice == 0 ? "" : item.TotalPrice,
                    TotalRevenue: item.TotalRevenue == 0 ? "" : item.TotalRevenue
                });
            });
            $scope.quoteBlockDetails = qBlocks;

            //Quotatoin Block Addon
               quoteBlockAddon.forEach(function (item, index) {
                qBlockAddon.push({
                    'Id': item.Id,
                    'QuotationAddonId': item.QuotationAddonId,
                    'AddonId': item.AddonId,
                    'Description': item.Description,
                    'Price': item.Price,
                    'QuoteUomName': item.QuoteUomName,
                    'IsIncludeTable': item.IsIncludeTable
                });
            });
               $scope.quoteBlockAddonDetails = qBlockAddon;

            disableBlockPlantDDL();

            $scope.addNewBlockAddon = function(){
                $(".blockAddOn-btn").attr("disabled", true);
                var plantId = $(".block_plant_ddl").val().split(":");
                ////console.log("plantId==" + plantId[1]);
                var totalRows = $(".table-blockAddon tbody>tr").length;
                var addonSelectedIdArray = new Array();
                addonSelectedIdArray[0] = 0;
                for(var i = 0;i < totalRows; i++)
                {
                    var el = $(".q_blkAddon_" + i);
                    if (el.length) {
                        var ddl = el.find("select:first-child");
                        addonSelectedIdArray[i] = ddl.find("option:selected").val().split(":").pop(-1);
                    }
                }
                var addonIdArray = new Array();
                addonIdArray[0] = 0;
                var elo = $(".q_blkAddon_0");
                var totalDDLOptions = 0;
                if (elo.length) {
                    var ddlo = elo.find("select:first-child");
                    ddlo.find('option').each(function (i, v) {
                        totalDDLOptions = i;

                        addonIdArray[i] = v.value.split(":").pop(-1);
                    });
                }

                if (totalDDLOptions < totalRows) {
                    alert("All Add-On exist.");
                    $(".blockAddOn-btn").attr("disabled", false);

                } else {
                    addonIdArray = addonIdArray.filter(function (el) {
                        return addonSelectedIdArray.indexOf(el) < 0;
                    });

                    var addonId = 0;
                    if (addonIdArray[0] == undefined) {
                        var addonListCounts = $scope.addonList.length;
                        for (var j = 0; j < addonListCounts; j++) {
                            if (FindDuplicateAddon("block", $scope.addonList[j].Id) == "") {
                                addonId = $scope.addonList[j].Id;
                                j = addonListCounts;
                            }
                        }
                    }
                    else {
                        var addonListCount = addonIdArray.length;
                        for (var i = 0; i < addonListCount; i++) {
                            if (FindDuplicateAddon("block", addonIdArray[i]) == "") {
                                addonId = addonIdArray[i];
                                i = addonListCount;
                            }
                        }
                    }

                    if (addonId != 0) {
                        $http({
                            method: 'POST',
                            url: '/json/AddQuotationBlockAddon',
                            data: { quoteId: eval(@Model.QuotationId), addonIds: addonSelectedIdArray, plantId: plantId[1], addonId: addonId }
                        }).then(function (res) {
                            //disablePlantDDL();
                            var addon = res.data;
                            $scope.quoteBlockAddonDetails.push({
                                'Id': addon.QuotationAddonId,
                                'QuotationAddonId': addon.QuotationAddonId,
                                'AddonId': addon.AddonId,
                                'Description': addon.Description,
                                'Price': addon.Price,
                                'QuoteUomName': addon.QuoteUomName,
                                'IsIncludeTable': addon.IsIncludeTable,
                            });
                            setTimeout(function () {
                                $(".blockAddOn-btn").attr("disabled", false);
                                var el = $(".q_blkAddon_" + ($scope.quoteBlockAddonDetails.length - 1));
                                if (el.length) {
                                    var sumo = el.find("select:first-child").SumoSelect({ search: true, forceCustomRendering: true });
                                }
                                if (approved == 'True' && EnableEdit == 'False') {
                                    var tableAddon = ".table-blockAddon ";
                                    $(tableAddon + "td > input").attr("disabled", true).attr("title", "Cannot change since the quotation is approved");
                                    $(tableAddon + ".SumoSelect > select").attr("disabled", true);
                                    $(tableAddon + ".SumoSelect").addClass("disabled");
                                }
                            }, 100);
                        }, function onError(response) {
                            //console.log("Error");
                        }).finally(function () {
                            //console.log("finally");
                        });
                    }
                    else {
                        alert("All Add-Ons are already in use.");
                    }
                }
                disableBlockPlantDDL();
            };

            //Adding all addon when plant is selected
            $scope.getAllBlockPlantAddons = function (item) {
                var plantId = item;
                //console.log("plantId == " + plantId);
                if (plantId == null) {
                    plantId = 0;
                }
              $http({
                    method: 'POST',
                    url: '/Quote/UpdateQuotationBlockPlant',
                    data: { plantId: plantId, quoteId: quotationId },
                })
               .then(function (res) {
                   var blockAddon = res.data.blockAddonList;
                  var addonList = res.data.addonList;
                  $scope.addonList = addonList;

                  if (blockAddon.length > 0) {
                       blockAddon.forEach(function (item, index) {
                           $scope.quoteBlockAddonDetails.push({
                               'Id': item.Id,
                               'QuotationAddonId': item.QuotationAddonId,
                               'AddonId': item.AddonId,
                               'Description': item.Description,
                               'Price': item.Price,
                               'QuoteUomName': item.QuoteUomName,
                               'IsIncludeTable': item.IsIncludeTable
                           });
                       })
                   }
                 }, function onError(response){
                     //console.log("Error");
                 }).finally(function(){
                     //console.log("finally");
                    });
              disableBlockPlantDDL();
            };

            //Updating Block Addon Fields
            $scope.UpdateBlockAddonFields = function (rowIndex) {
                var addonerrorDv = $('.blockAddon-errors')
                addonerrorDv.html("");
                var quotationTableRow = $scope.quoteBlockAddonDetails[rowIndex];

                var params = {
                    quotationAddonId: quotationTableRow.Id,
                    addonId: quotationTableRow.AddonId,
                    description: quotationTableRow.Description == null ? "" : quotationTableRow.Description,
                    price: quotationTableRow.Price == null ? 0 : quotationTableRow.Price,
                    isIncludeTable: quotationTableRow.IsIncludeTable == null ? false : quotationTableRow.IsIncludeTable
                }
                //console.log(params);
                $http({
                    method: 'POST',
                    url: '/json/UpdateQuotationBlockAddonFields',
                    data: params,
                }).then(function (res) {
                    var status = res.data;
                    //console.log("Update_BlockAddon_FieldStatus = " + status.fieldupdateStatus)
                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
            }

            $scope.UpdateBlockAddon= function(item, newValue, oldValue, rowIndex){
                var sItem = item.quoteBlockAddOnDetail;
                var plantId = $(".block_plant_ddl").val().split(":");
                var errorExist ='<div class="addon-alert alert alert-warning alert-dismissable fade in">'+
                    '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+
                "<strong><i class='fa fa-exclamation-triangle'></i></strong> ERROR</div>";
                var addonerrorDv = $('.blockAddon-errors')

                var addonExistSection = FindDuplicateAddon("block", newValue);

                if ($scope.quoteBlockAddonDetails.filter(function (x) { return x.AddonId == newValue }).length > 1 || addonExistSection != "") {
                    if (addonExistSection != "") {
                        addonerrorDv.html("").html(errorExist.replace("ERROR", " Selected Add-On exist in Quote-Level " + addonExistSection + " Add-Ons."));
                        addonerrorDv.find("div:first").addClass("fixed-error-dv alert-danger shake");
                    }
                    else {
                        addonerrorDv.html("").html(errorExist.replace("ERROR", " Selected Add-On exist."));
                         }

                    sItem.AddonId = oldValue;
                    setTimeout(function(){
                        var el = angular.element(".q_blkAddon_" + rowIndex);
                        if (el.length) {
                            el.find("select:first-child")[0].sumo.reload();
                        }
                    }, 800);
                }else{
                    addonerrorDv.html("");
                    var addonSelectedIdArray = new Array();
                    addonSelectedIdArray[0] = 0;
                    var quotationTableRow = $scope.quoteBlockAddonDetails[rowIndex];
                    var params ={quoteId:eval(@Model.QuotationId),
                        addonIds:addonSelectedIdArray,
                        plantId: plantId[1],
                        addonId:quotationTableRow.AddonId,
                        quotationAddonId:quotationTableRow.Id}
                    $http({
                        method: 'POST',
                        url: '/json/AddUpdateQuotationBlockAddon',
                        data: params,
                    }).then(function(res){
                        var addon = res.data;
                        quotationTableRow.AddonId = addon.AddonId;
                        quotationTableRow.Description = addon.Description;
                        quotationTableRow.Price = addon.Price;
                        quotationTableRow.QuoteUomName = addon.QuoteUomName;
                        quotationTableRow.IsIncludeTable = addon.IsIncludeTable;
                        if (!addon.IsAddonExistForQuotation)
                        { }
                        else
                        { }
                            //console.log("Add on exist for this quote")
                        //$scope.quoteAddOnDetails[rowIndex]=addon;
                    }, function onError(response){
                        //console.log("Error");
                    }).finally(function(){
                        //console.log("finally");
                    });
                }
            };

            // Delete Block Addon
            $scope.deleteBlockAddon = function (index, id) {
                var item = $scope.quoteBlockAddonDetails.filter(function (x) { return x.Id == id; });
                $scope.quoteBlockAddonDetails.splice(index, 1);
                //console.log("Deleting Item");
                var params = { quoteBlockAddonId: id }

                $http({
                    method: 'POST',
                    url: '/quote/DeleteQuotationBlockAddon',
                    data: params,
                }).then(function (res) {
                    var deleteStatus = res.deleteStatus;
                    //console.log("Delete Status = " + deleteStatus);
                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
                disableBlockPlantDDL()
            };


            //Quotation Block
            $scope.addNewQuoteBlock = function () {
                $(".quick_add_block").attr("disabled", true);

                var totalRows = $(".table-block tbody>tr").length;
                var blockSelectedIdArray = new Array();
                blockSelectedIdArray[0] = 0;
                for (var i = 0; i < totalRows; i++) {
                    var el = $(".q_blk_" + i);
                    if (el.length) {
                        var ddl = el.find("select:first-child");
                        blockSelectedIdArray[i] = ddl.find("option:selected").val().split(":").pop(-1);
                    }
                }
                var blockIdArray = new Array();
                blockIdArray[0] = 0;
                var elo = $(".q_blk_0");
                if (elo.length) {
                    var ddlo = elo.find("select:first-child");
                    ddlo.find('option').each(function (i, v) {
                        blockIdArray[i] = v.value.split(":").pop(-1);
                    });
                }

                blockIdArray = blockIdArray.filter(function (el) {
                    return blockSelectedIdArray.indexOf(el) < 0;
                });
                var blockProductId = 0;
                if (blockIdArray[0] == undefined)
                    blockProductId = $scope.blockProduct[0].Id;
                else
                    blockProductId = blockIdArray[0];

                //console.log("blockProductId = " + blockProductId);
                $http({
                    method: 'POST',
                    url: '/json/AddUpdateQuotationBlock',
                    data: { quoteId: eval(@Model.QuotationId), blockProductId: blockProductId }
                }).then(function (res) {
                    var quoteBlock = res.data;
                    $scope.quoteBlockDetails.push({
                        'Id': quoteBlock.QuotationBlockId,
                        'BlockProductId': quoteBlock.BlockProductId,
                        'QuotedDescription': quoteBlock.QuotedDescription,
                        'Price': $filter('number')(quoteBlock.Price, 2),
                        'Qty': $filter('number')(quoteBlock.Volume, 2),
                        'Freight': $filter('number')(quoteBlock.Freight, 2),
                        'TotalPrice': quoteBlock.TotalPrice,
                        'TotalRevenue':quoteBlock.TotalRevenue
                    });
                    setTimeout(function () {
                        $(".quick_add_block").attr("disabled", false);
                        //console.log($scope.quoteBlockDetails.length - 1);
                        var el = $(".q_blk_" + ($scope.quoteBlockDetails.length - 1));
                        //console.log(el);
                        if (el.length) {
                            var sumo = el.find("select:first-child").SumoSelect({ search: true, forceCustomRendering: true });
                        }
                    }, 100);
                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
            };

              //update Block Product
            $scope.UpdateQuoteBlock = function(item, newValue, oldValue, rowIndex){
                //console.log(newValue);
                var sItem = item.quoteBlockDetail;
                var errorExist ='<div class="addon-alert alert alert-warning alert-dismissable fade in">'+
                    '<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>'+
                "<strong><i class='fa fa-exclamation-triangle'></i></strong> ERROR</div>";
                var blockErrorDv = $('.blk-errors')
                if ($scope.quoteBlockDetails.filter(function (x) { return x.BlockProductId == newValue }).length > 1){
                    blockErrorDv.html("").html(errorExist.replace("ERROR"," Selected Product exist."));
                    sItem.BlockProductId = oldValue;
                    setTimeout(function(){
                        var el = angular.element(".q_blk_" + rowIndex);
                        if (el.length) {
                            el.find("select:first-child")[0].sumo.reload();
                        }
                    }, 800);
                }else{
                    blockErrorDv.html("");
                    var blockProductSelectedIdArray = new Array();
                    blockProductSelectedIdArray[0] = 0;
                    var quotationTableRow = $scope.quoteBlockDetails[rowIndex];
                    var params ={quoteId:eval(@Model.QuotationId),
                        newProductId: newValue,
                        oldProductId:oldValue}
                    $http({
                        method: 'POST',
                        url: '/json/AddUpdateQuotationBlockProduct',
                        data: params,
                    }).then(function(res){
                        var quoteBlock = res.data;
                        quotationTableRow.QuotedDescription = quoteBlock.description;
                        quotationTableRow.Price = $filter('number')(quoteBlock.price, 2);
                        quotationTableRow.TotalPrice = $filter('number')(quoteBlock.totalPrice, 2);
                        quotationTableRow.TotalRevenue = $filter('number')(quoteBlock.totalRevenue, 2);
                    }, function onError(response){
                        //console.log("Error");
                    }).finally(function(){
                        //console.log("finally");
                    });
                }
            };

            //Update Quotation Fields
            $scope.UpdateQuoteBlockFields = function (rowIndex) {
               var quoteBlockTableRow = $scope.quoteBlockDetails[rowIndex];
                var params = {
                    quoteBlockId: quoteBlockTableRow.Id,
                    quotedDescription: quoteBlockTableRow.QuotedDescription,
                    quantity: quoteBlockTableRow.Qty == "" ? 0 : removeCommasFromNumber(quoteBlockTableRow.Qty),
                    price: quoteBlockTableRow.Price == "" ? 0 : removeCommasFromNumber(quoteBlockTableRow.Price),
                    freight: quoteBlockTableRow.Freight == "" ? 0 : removeCommasFromNumber(quoteBlockTableRow.Freight),
                    publicComments: quoteBlockTableRow.PublicComments
                }
                //console.log(params);
                $http({
                    method: 'POST',
                    url: '/json/UpdateQuotationBlockFields',
                    data: params,
                }).then(function (res) {
                    var quoteBlock = res.data;
                    quoteBlockTableRow.Price = $filter('number')(quoteBlock.Price, 2);
                    quoteBlockTableRow.Qty = $filter('number')(quoteBlock.Volume, 2);
                    quoteBlockTableRow.Freight = $filter('number')(quoteBlock.Freight, 2);
                    quoteBlockTableRow.TotalPrice = quoteBlock.TotalPrice;
                    quoteBlockTableRow.TotalRevenue = quoteBlock.TotalRevenue;

                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
            }
            // Delete Block
            $scope.deleteBlockProduct = function (index, id) {
                var item = $scope.quoteBlockDetails.filter(function (x) { return x.Id == id; });
                $scope.quoteBlockDetails.splice(index, 1);
                //console.log("Deleting Item");
                var params = { quoteBlockId: id }

                $http({
                    method: 'POST',
                    url: '/quote/DeleteQuotationBlock',
                    data: params,
                }).then(function (res) {
                    var deleteStatus = res.deleteStatus;
                    //console.log("Delete Status = " + deleteStatus);

                }, function onError(response) {
                    //console.log("Error");
                }).finally(function () {
                    //console.log("finally");
                });
            };
            //$scope.deleteQuoteBlock = function (index, e) {
            //    if ($(e.target).attr("data-delete")) {
            //        $scope.quoteBlockDetails.splice(index, 1);
            //    }
            //}
            });

        function validateFloatKeyPress(el, evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            var number = el.value.split('.');
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }
            //just one dot
            if (number.length > 1 && charCode == 46) {
                return false;
            }
            //get the carat position
            var caratPos = getSelectionStart(el);
            var dotPos = el.value.indexOf(".");
            if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
                return false;
            }
            return true;
        }

        function getSelectionStart(o) {
            if (o.createTextRange) {
                var r = document.selection.createRange().duplicate()
                r.moveEnd('character', o.value.length)
                if (r.text == '') return o.value.length
                return o.value.lastIndexOf(r.text)
            } else return o.selectionStart
        }
    </script>
}
