@using RedHill.SalesInsight.Web.Html5.Helpers;
@model RedHill.SalesInsight.Web.Html5.Models.DistrictView
@{
    ViewBag.Title = (Model.DistrictId == 0 ? "New" : Model.Name);
    ViewBag.UsingMaps = true;
   ViewBag.UsingCKEditor = true;
     ViewBag.UsingSlider = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var company = ConfigurationHelper.Company;
    ViewBag.UsingDatePicker = true;
 }

<div class="page-head">
    <h2>
        @if (Model.DistrictId > 0)
        {
            <span>Edit District</span>
        }
        else
        {
            <span>Add District</span>
        }
    </h2>
    <ol class="breadcrumb">
        <li><a href="/Home/Index">Home</a></li>
        <li><a href="/Home/Settings">Settings</a></li>
        <li><a href="/Home/Companies">Manage Company Settings</a></li>
        <li><a href="/Home/Companies/structure">Structure</a></li>
        <li class="active">@(Model.DistrictId == 0 ? "New" : Model.Name)</li>
    </ol>
</div>
<div class="cl-mcont">
    <div class="block-flat">
        @using (Html.BeginForm("UpdateDistrict", "Home", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data" , id="districtForm"}))
        {
            @Html.ValidationSummary(true)

            <fieldset>
                <legend>Basic Settings
                </legend>

                @Html.HiddenFor(model => model.DistrictId, new { @class = "form-control" })
                @Html.HiddenFor(model => model.CompanyId, new { @class = "form-control" })
                @Html.HiddenFor(m => m.FileKey)
                @Html.HiddenFor(m => m.FileName)
                <div class="form-group">
                    <div class="control-label col-md-2">
                        @Html.LabelFor(model => model.Name)
                    </div>
                    <div class="col-md-10">
                        @if (Model.DistrictId == 0)
                        {
                            @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @readonly = "readonly" })
                        }
                        @Html.ValidationMessageFor(model => model.Name, string.Empty, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="control-label col-md-2">
                        @Html.LabelFor(model => model.RegionId)
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.RegionId, Model.AvailableRegions, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RegionId, string.Empty, new { @class = "help-inline" })
                    </div>
                </div>

                <div class="form-group">

                    <div class="control-label col-md-2">
                        <label>Map Location</label>
                    </div>

                    <div class="col-md-10 clearfix">
                        <div class="col-xs-3 padding-0">
                            @Html.TextBoxFor(x => x.MapCenterLat, new { @id = "Latitude", @class = "form-control", @readonly = "readyonly" })
                        </div>
                        <div class="col-xs-3 ">
                            @Html.TextBoxFor(x => x.MapCenterLong, new { @id = "Longitude", @class = "form-control", @readonly = "readyonly" })
                        </div>
                        <div class="col-xs-1">
                            @Html.TextBoxFor(x => x.Zoom, new { @class = "form-control", @readonly = "readyonly" })
                        </div>
                        <div class="col-xs-5">
                            <button type="button" class="btn btn-primary map_marker_btn" data-address="@Model.Name" data-latitude="@Model.MapCenterLat" data-zoom="@Model.Zoom" data-longitude="@Model.MapCenterLong" data-default-latitude="" data-default-longitude="" data-trigger="modal" data-target="map_modal">
                                <i class="fa fa-map-marker fa-fw"></i>
                                Set Location and Zoom
                            </button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-md-2">
                        <label>Map Scale Radius (10-100)</label>
                    </div>
                    <div class="col-md-10 clearfix">
                        <div class="col-xs-3 padding-0">
                            <div class="input-group">
                                @Html.TextBoxFor(x => x.MapScaleRadius10, new { @class = "form-control" })
                                <span class="input-group-addon">@company.DeliveryQtyUomPlural</span>
                            </div>
                        </div>
                        <div class="col-xs-3">
                            <div class="input-group">
                                @Html.TextBoxFor(x => x.MapScaleRadius100, new { @class = "form-control" })
                                <span class="input-group-addon">@company.DeliveryQtyUomPlural</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="control-label col-md-2">
                        @Html.LabelFor(model => model.Active)
                    </div>
                    <div class="col-md-10">
                        @Html.CheckBoxFor(model => model.Active)
                        @Html.ValidationMessageFor(model => model.Active, string.Empty, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="control-label col-md-2">
                        <strong>QC Requirements</strong>
                    </div>
                    <div class="col-md-10">
                        @Html.CheckBoxFor(model => model.QCRequirement)
                        @Html.ValidationMessageFor(model => model.QCRequirement, string.Empty, new { @class = "help-inline" })
                    </div>
                </div>

                <legend>Quotation Defaults
                </legend>
                <div class="form-group">
                    <label class="control-label col-md-2">Letting Date</label>
                    <div class="col-md-1">
                        <div class="control-label pull-left">@Html.CheckBoxFor(model => model.LettingDate)</div>
                    </div>
                </div>
                @*<div class="form-group">
                    <label class="col-md-3">Show Customer Number on PDF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Html.CheckBoxFor(model => model.CustomerNumberOnPDF)</label>
                </div>*@
                <div class="form-group">
                    <label class="control-label col-md-2">Show Customer Number on PDF</label>
                    <div class="col-md-1">
                        <div class="control-label pull-left">@Html.CheckBoxFor(model => model.CustomerNumberOnPDF)</div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="control-label col-md-2">
                        <label>Price Adjustment</label>
                    </div>
                    <div class="col-md-2">
                        <div class="input-group">
                            <span class="input-group-addon">$</span>
                            @Html.TextBoxFor(model => model.AdjustMixPrice, new { @class = "form-control", onkeypress = "return validateFloatKeyPress(this,event)" })
                        </div>
                    </div>
                    </div>
                    <!-- Loads and To Jobs settings -->
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Average Load</label>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.Load, new { @class = "form-control" })
                                <span class="input-group-addon">@company.DeliveryQtyUomSingular</span>
                            </div>
                        </div>
                        <div class="control-label col-md-2">
                            <label>To Job</label>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.ToJob, new { @class = "form-control" })
                                <span class="input-group-addon">mins</span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Average Unload</label>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.Unload, new { @class = "form-control" })
                                <span class="input-group-addon">mins</span>
                            </div>
                        </div>
                        <div class="control-label col-md-2">
                            <label>Avg Wash</label>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.Wash, new { @class = "form-control" })
                                <span class="input-group-addon">mins</span>
                            </div>
                        </div>
                        <div class="control-label col-md-1">
                            <label>Return</label>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.Return, new { @class = "form-control" })
                                <span class="input-group-addon">mins</span>
                            </div>
                        </div>
                    </div>
                    <!-- Quote expiration settings -->
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>'Acceptance' Expiration</label>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.AcceptanceExpiration, new { @class = "form-control" })
                                <span class="input-group-addon">days</span>
                            </div>
                        </div>
                        <div class="control-label col-md-2">
                            <label>'Quote' Expiration</label>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.QuoteExpiration, new { @class = "form-control" })
                                <span class="input-group-addon">days</span>
                            </div>
                        </div>
                    </div>
                    <!-- Message Templates -->
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Quotation Approval Request Default Message Text</label>
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(x => x.QuotationApprovalRequestText, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Project Entry Form Notification Default Message Text</label>
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(x => x.ProjectEntryFormNotification, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Email Quote To Customer Default Message Text</label>
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(x => x.EmailQuoteToCustomer, new { @class = "form-control" })
                        </div>
                    </div>
                    <legend>
                        Quotation Form Settings
                    </legend>
                    <!-- Table For PSI values etc  -->
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Default Quote Form View Settings</label>
                        </div>
                        <div class="col-md-10">
                            <table id="draggable" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Mix Table Column</th>
                                        <th>Include?</th>
                                        <th>Position (drag-drop rows)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < 15; i++)
                                    {
                                        if (Model.PriceSequence == i)
                                        {
                                            <tr data-id="Price" id="Price_row">
                                                <td>Price</td>
                                                <td>@Html.CheckBoxFor(x => x.PriceInclude)</td>
                                                <td><span>@(Model.PriceSequence + 1)</span> @Html.HiddenFor(x => x.PriceSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.QuantitySequence == i)
                                        {
                                            <tr data-id="Quantity" id="Quantity_row">
                                                <td>Quantity</td>
                                                <td>@Html.CheckBoxFor(x => x.QuantityInclude)</td>
                                                <td><span>@(Model.QuantitySequence + 1)</span> @Html.HiddenFor(x => x.QuantitySequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.MixIdSequence == i)
                                        {
                                            <tr data-id="MixId" id="MixId_row">
                                                <td>Mix ID</td>
                                                <td>@Html.CheckBoxFor(x => x.MixIdInclude)</td>
                                                <td><span>@(Model.MixIdSequence + 1)</span> @Html.HiddenFor(x => x.MixIdSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.DescriptionSequence == i)
                                        {
                                            <tr data-id="Description" id="Description_row">
                                                <td>Description</td>
                                                <td>@Html.CheckBoxFor(x => x.DescriptionInclude)</td>
                                                <td><span>@(Model.DescriptionSequence + 1)</span> @Html.HiddenFor(x => x.DescriptionSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.PsiSequence == i)
                                        {
                                            <tr data-id="Psi" id="Psi_row">
                                                <td>PSI</td>
                                                <td>@Html.CheckBoxFor(x => x.PsiInclude)</td>
                                                <td><span>@(Model.PsiSequence + 1)</span> @Html.HiddenFor(x => x.PsiSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.PublicCommentsSequence == i)
                                        {
                                            <tr data-id="PublicComments" id="PublicComments_row">
                                                <td>Public Comments</td>
                                                <td>@Html.CheckBoxFor(x => x.PublicCommentsInclude)</td>
                                                <td><span>@(Model.PublicCommentsSequence + 1)</span> @Html.HiddenFor(x => x.PublicCommentsSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.SlumpSequence == i)
                                        {
                                            <tr data-id="Slump" id="Slump_row">
                                                <td>Slump</td>
                                                <td>@Html.CheckBoxFor(x => x.SlumpInclude)</td>
                                                <td><span>@(Model.SlumpSequence + 1)</span> @Html.HiddenFor(x => x.SlumpSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.AirSequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>Air</td>
                                                <td>@Html.CheckBoxFor(x => x.AirInclude)</td>
                                                <td><span>@(Model.AirSequence + 1)</span> @Html.HiddenFor(x => x.AirSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        //---- New Column
                                        if (Model.AshSequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>Ash %</td>
                                                <td>@Html.CheckBoxFor(x => x.AshInclude)</td>
                                                <td><span>@(Model.AshSequence + 1)</span> @Html.HiddenFor(x => x.AshSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }

                                        if (Model.FineAggSequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>Fine Agg %</td>
                                                <td>@Html.CheckBoxFor(x => x.FineAggInclude)</td>
                                                <td><span>@(Model.FineAggSequence + 1)</span> @Html.HiddenFor(x => x.FineAggSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.SacksSequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>Sacks</td>
                                                <td>@Html.CheckBoxFor(x => x.SacksInclude)</td>
                                                <td><span>@(Model.SacksSequence + 1)</span> @Html.HiddenFor(x => x.SacksSequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.MD1Sequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>@Model.MD1String</td>
                                                <td>@Html.CheckBoxFor(x => x.MD1Include)</td>
                                                <td><span>@(Model.MD1Sequence + 1)</span> @Html.HiddenFor(x => x.MD1Sequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.MD2Sequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>@Model.MD2String</td>
                                                <td>@Html.CheckBoxFor(x => x.MD2Include)</td>
                                                <td><span>@(Model.MD2Sequence + 1)</span> @Html.HiddenFor(x => x.MD2Sequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.MD3Sequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>@Model.MD3String</td>
                                                <td>@Html.CheckBoxFor(x => x.MD3Include)</td>
                                                <td><span>@(Model.MD3Sequence + 1)</span> @Html.HiddenFor(x => x.MD3Sequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                        if (Model.MD4Sequence == i)
                                        {
                                            <tr data-id="Air" id="Air_row">
                                                <td>@Model.MD4String</td>
                                                <td>@Html.CheckBoxFor(x => x.MD4Include)</td>
                                                <td><span>@(Model.MD4Sequence + 1)</span> @Html.HiddenFor(x => x.MD4Sequence, new { @class = "position_box" })</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                <div class="form-group">
                    <div class="control-label col-md-2">
                        <label>Pricing and Availability Disclaimer</label>
                    </div>
                    <div class="col-md-10">
                        @Html.TextAreaFor(x => x.PricingAvailabilityDisclaimer, new { @class = "form-control ckeditor" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="control-label col-md-2">
                        <label>Expiration Date Label</label>
                    </div>
                    <div class="col-md-10">
                        @Html.TextAreaFor(x => x.ExpirationDateLabel, new { @class = "form-control ckeditor" })
                    </div>
                </div>

                    <!-- Quote Form information -->
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Disclaimers</label>
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(x => x.Disclaimers, new { @class = "form-control ckeditor" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Disclosures</label>
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(x => x.Disclosures, new { @class = "form-control ckeditor" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Terms and Conditions</label>
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(x => x.TermsAndConditions, new { @class = "form-control ckeditor" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Acceptance</label>
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(x => x.Acceptance, new { @class = "form-control ckeditor" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Quote PDF Supplement</label>
                        </div>
                        <div class="col-md-10 form-horizontal">
                            <div class="col-md-2">
                                <div class="browse-wrap btn btn-primary">
                                    <div class="title">Choose a PDF</div>
                                    <input type="file" name="SupplementPdfFile" id="SupplementPdfFile" class="upload" title="Choose a Pdf" accept=".pdf">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <span class="upload-path"></span>
                                @if (Model.FileKey != null)
                                {
                                    <a class="cloud-file" href="/Home/DownloadFile?key=@Model.FileKey" data-toggle="tooltip" target="_blank" title="Download PDF" download>
                                        <i class="fa fa-cloud-download down-pdf" aria-hidden="true"></i>&nbsp;&nbsp;
                                    </a><a class="supp-file" href="/Home/DownloadFile?key=@Model.FileKey" data-toggle="tooltip" target="_blank" title="View PDF">
                                        @(string.IsNullOrEmpty(Model.FileName) ? "" : Model.FileName)
                                    </a>
                                }
                            </div>

                            <div class="col-md-4">
                                <div class="checkbox custom">
                                    <input type="checkbox" id="IncludeDefault" />
                                    <label for="IncludeDefault" class="myCheck">
                                        <i class="fa fa-square-o"></i><span class="checkboxText">&nbsp;Include by default</span>
                                    </label>
                                    @Html.HiddenFor(model => model.IncludeByDefault)
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Dispatch Address Form  -->
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Dispatch Address</label>
                        </div>
                        <div class="col-md-6">
                            @Html.TextBoxFor(model => model.DispatchAddress, new { @class = "form-control" })
                        </div>
                        <div class="control-label col-md-2">
                            <label>Dispatch Phone</label>
                        </div>
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.DispatchPhone, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            <label>Dispatch City, State, Zip</label>
                        </div>
                        <div class="col-md-6">
                            @Html.TextBoxFor(model => model.DispatchCityStateZip, new { @class = "form-control" })
                        </div>
                        <div class="control-label col-md-2">
                            <label>Dispatch Fax</label>
                        </div>
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.DispatchFax, new { @class = "form-control" })
                        </div>
                    </div>

                <h4 class="header"><i class="fa fa-1x fa-calendar"></i> Typical Workday Percentages</h4>

                <div class="panel-body">
                    <div class="col-md-12 form-group">
                        <div class="control-label col-md-2">Monday</div>
                        <div class="col-md-10">
                            <span class="badge badge-warning r-margin-10">0</span>
                            <input type="text" class="slider_control bslider form-control" name="Monday" data-slider-enabled="@(ViewBag.CanEdit ? "true":"false")" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-orientation="horizontal" data-slider-value="@Model.Calendar.Distribution.Monday" value="@Model.Calendar.Distribution.Monday" />
                            <span class="badge badge-success l-margin-10">100</span>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <div class="control-label col-md-2">Tuesday</div>
                        <div class="col-md-10">
                            <span class="badge badge-warning r-margin-10">0</span>
                            <input type="text" class="slider_control bslider form-control" name="Tuesday" data-slider-enabled="@(ViewBag.CanEdit ? "true":"false")" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-orientation="horizontal" data-slider-value="@Model.Calendar.Distribution.Tuesday" value="@Model.Calendar.Distribution.Tuesday" />
                            <span class="badge badge-success l-margin-10">100</span>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <div class="control-label col-md-2">Wednesday</div>
                        <div class="col-md-10">
                            <span class="badge badge-warning r-margin-10">0</span>
                            <input type="text" class="slider_control bslider form-control" name="Wednesday" data-slider-enabled="@(ViewBag.CanEdit ? "true":"false")" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-orientation="horizontal" data-slider-value="@Model.Calendar.Distribution.Wednesday" value="@Model.Calendar.Distribution.Wednesday" />
                            <span class="badge badge-success l-margin-10">100</span>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <div class="control-label col-md-2">Thursday</div>
                        <div class="col-md-10">
                            <span class="badge badge-warning r-margin-10">0</span>
                            <input type="text" class="slider_control bslider form-control" name="Thursday" data-slider-enabled="@(ViewBag.CanEdit ? "true":"false")" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-orientation="horizontal" data-slider-value="@Model.Calendar.Distribution.Thursday" value="@Model.Calendar.Distribution.Thursday" />
                            <span class="badge badge-success l-margin-10">100</span>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <div class="control-label col-md-2">Friday</div>
                        <div class="col-md-10">
                            <span class="badge badge-warning r-margin-10">0</span>
                            <input type="text" class="slider_control bslider form-control" name="Friday" data-slider-enabled="@(ViewBag.CanEdit ? "true":"false")" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-orientation="horizontal" data-slider-value="@Model.Calendar.Distribution.Friday" value="@Model.Calendar.Distribution.Friday" />
                            <span class="badge badge-success l-margin-10">100</span>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <div class="control-label col-md-2">Saturday</div>
                        <div class="col-md-10">
                            <span class="badge badge-warning r-margin-10">0</span>
                            <input type="text" class="slider_control bslider form-control" name="Saturday" data-slider-enabled="@(ViewBag.CanEdit ? "true":"false")" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-orientation="horizontal" data-slider-value="@Model.Calendar.Distribution.Saturday" value="@Model.Calendar.Distribution.Saturday" />
                            <span class="badge badge-success l-margin-10">100</span>
                        </div>
                    </div>
                    <div class="col-md-12 form-group">
                        <div class="control-label col-md-2">Sunday</div>
                        <div class="col-md-10">
                            <span class="badge badge-warning r-margin-10">0</span>
                            <input type="text" class="slider_control bslider form-control" name="Sunday" data-slider-enabled="@(ViewBag.CanEdit ? "true":"false")" data-slider-min="0" data-slider-max="100" data-slider-step="1" data-slider-orientation="horizontal" data-slider-value="@Model.Calendar.Distribution.Sunday" value="@Model.Calendar.Distribution.Sunday" />
                            <span class="badge badge-success l-margin-10">100</span>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-10 col-md-offset-2">
                            @*<button type="button" value="@(Model.DistrictId > 0 ? "Update" : "Create")" class="btn btn-primary apply_week_day_distribution" />*@
                            <button type="button" value="@(Model.DistrictId > 0 ? "Update" : "Create")" class="btn btn-primary apply_week_day_distribution">@(Model.DistrictId > 0 ? "Update" : "Create")</button>
                        </div>
                    </div>
  </div>

                <div id="district_processing" class="district_detail_processing" style="display: none;"><img height="60px;" src="~/Content/images/pre-loader.gif"></div>


                <h4 class="header"><i class="fa fa-1x fa-warning"></i> Exceptions To Typical Workday Percentages</h4>

                <div class="">
                    <div class="form-inline">
                        @if (ViewBag.CanEdit)
                        {

                            <div class="form-group">
                                <div class="col-md-3">
                                    <label class="control-label">Date</label>
                                    @Html.TextBoxFor(x => x.Calendar.WorkDayException.ExceptionDate, "{0:M/d/yyyy}", new { @class = "form-control datepicker", id = "exceptionDate" })
                                    @Html.Hidden("ExceptionId")
                                </div>
                                <div class="col-md-3">
                                    <label class="control-label">Description</label>
                                    @Html.TextBoxFor(x => x.Calendar.WorkDayException.Description, new { @class = "form-control", id = "exceptionDescription" })
                                </div>
                                <div class="col-md-2">
                                    <label class="control-label">Percentage</label>
                                    @Html.DropDownListFor(x => x.Calendar.WorkDayException.Distribution, Model.Calendar.ZeroToHundred, new { @class = "form-control", id = "exceptionPercent" })
                                </div>
                                <div class="col-md-1">
                                    <label class="control-label">&nbsp;</label>
                                    <button type="button" class="btn btn-primary apply_weekday_exception" value="Save and Apply">Save</button>

                                </div>
                            </div>

                        }
                    </div>
                    <br />
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Percentage</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var exception in Model.Calendar.Exceptions)
                            {
                                <tr>
                                    <td>
                                        @exception.ExceptionDate.ToString("M/d/yyyy")
                                    </td>
                                    <td>
                                        @exception.Description
                                    </td>
                                    <td>
                                        @exception.Distribution %
                                    </td>
                                    <td>
                                        @if (ViewBag.CanEdit)
                                        {
                                            <a class="btn btn-primary btn-xs" id="edit-exception" onclick="getExceptioData(@exception.Id)"><i class="fa fa-fw fa-edit"></i></a>
                                        }
                                        @if (ViewBag.CanEdit)
                                        {
                                            <a data-id="@exception.Id" href="javascript:deleteException(@exception.Id)" data-confirm="Are you sure you want to delete this exception? <br/> Date : @exception.ExceptionDate.ToString("M/d/yyyy") <br/> Percentage : @exception.Distribution %" class="btn btn-danger btn-xs"><i class="fa fa-fw fa-close"></i></a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </fieldset>
        }
    </div>
</div>

@Html.Partial("_MapMarker", true)

<style>
    #QCRequirement, #Active {
        margin: 10px 0 0 !important;
    }

</style>

@section Scripts {
    @Scripts.Render("~/js/project_loc")
    <script src="~/Scripts/jquery-sortable.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            timer = function () {
                setInterval(function () {
                    if ($(".down-pdf").attr("style")) {
                        $(".down-pdf").removeAttr("style");
                    } else {
                        $(".down-pdf").css("color", "#5cb85c");
                    }
                }, 800);
            }
            $(".down-pdf").css("color", "#5cb85c");
            timer();

            if ($("#IncludeByDefault").val().toLowerCase() === "true") {
                $("#IncludeDefault").prop("checked", true);
            } else {
                $("#IncludeDefault").prop("checked", false);
            }
            chekbox();
            $("#IncludeDefault").on("click", function () {
                chekbox();
            });

            function chekbox() {
                var check = $("#IncludeDefault").prop("checked");
                if (check) {
                    $("#IncludeByDefault").val(true);
                    if ($('.myCheck i').hasClass('fa-square-o')) {
                        $('.myCheck i').removeClass('fa-square-o').addClass('fa-check-square');
                    }
                } else {
                    $("#IncludeByDefault").val(false);
                    if ($('.myCheck i').hasClass('fa-check-square')) {
                        $('.myCheck i').removeClass('fa-check-square').addClass('fa-square-o');
                    }
                }
            }

            var span = document.getElementsByClassName('upload-path');
            var uploader = document.getElementsByName('SupplementPdfFile');
            for (item in uploader) {
                uploader[item].onchange = function () {
                    myfile = $(this).val();
                    var ext = myfile.split('.').pop().toLowerCase();
                    if (ext != "pdf") {
                        span[0].innerHTML = "Please select PDF format file only.";
                        $(span[0]).css("color", "red");
                        $(this).val("");
                    } else {
                        $(span[0]).css("color", "#3380FF");
                        span[0].innerHTML = this.files[0].name;
                    }
                    $(".cloud-file").hide();
                    $(".supp-file").hide();
                }
            }

            var structureAccess = '@(ViewBag.AccessRule.HasStructureAccess == SIRolePermissionLevelConstants.FULL_ACCESS)';
            if (structureAccess == 'False')
            { disableEveryThing(); }

            $("body").on("MapMoved", function (e, data) {
                $("#Latitude").val(e.center_lat);
                $("#Longitude").val(e.center_lng);
                $("#Zoom").val(e.zoom);
            });

            $("#draggable").sortable({
                containerSelector: 'table',
                itemPath: '> tbody',
                itemSelector: 'tr',
                placeholder: '<tr class="placeholder"/>',
                onDrop: function ($item, container, _super) {
                    table = $($item).parents("table");
                    var rows = table.find("tbody > tr");
                    for (var i = 0; i < rows.length; i++) {
                        tmp_row = rows[i];
                        $(tmp_row).find("span").html(i + 1);
                        $(tmp_row).find(".position_box").val(i);
                    }
                    _super($item, container);
                }
            });
        function validateFloatKeyPress(el, evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode;
            var number = el.value.split('.');
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }
            //just one dot
            if (number.length > 1 && charCode == 46) {
                return false;
            }
            //get the carat position
            var caratPos = getSelectionStart(el);
            var dotPos = el.value.indexOf(".");
            if (caratPos > dotPos && dotPos > -1 && (number[1].length > 1)) {
                return false;
            }
            return true;
        }

        function getSelectionStart(o) {
            if (o.createTextRange) {
                var r = document.selection.createRange().duplicate()
                r.moveEnd('character', o.value.length)
                if (r.text == '') return o.value.length
                return o.value.lastIndexOf(r.text)
            } else return o.selectionStart
            //workday distribution
        }

            $(".apply_week_day_distribution").click(function () {
                $(this).html("<i class='fa fa-spinner fa-spin'></i> Update");
                $(this).prop("disabled", true);
                Monday = $("input[name=Monday]").val();
                Tuesday = $("input[name=Tuesday]").val();
                Wednesday = $("input[name=Wednesday]").val();
                Thursday = $("input[name=Thursday]").val();
                Friday = $("input[name=Friday]").val();
                Saturday = $("input[name=Saturday]").val();
                Sunday = $("input[name=Sunday]").val();
                btn = $(this);
                $("#district_processing").show();
                $.post("/Home/UpdateWeekDayDistribution", { "monday": Monday, "tuesday": Tuesday, "wednesday": Wednesday, "thursday": Thursday, "friday": Friday, "saturday": Saturday, "sunday": Sunday, "districtId": $("#DistrictId").val() }, function (data) {
                    if (data == "OK") {
                        //btn.removeProp("disabled");
                        $("#districtForm").submit();
                    }
                    else {
                        //btn.removeProp("disabled");
                    }
                });
            });

            //workday exception
            $(".apply_weekday_exception").click(function () {
                //$(this).html("<i class='fa fa-spinner fa-spin'></i> Save");
                $(this).prop("disabled", true);
                var date = $("#exceptionDate").val();
                var description = $("#exceptionDescription").val();
                var percentage = parseInt($("#exceptionPercent").val());

                btn = $(this);
                $.post("/Home/AddWeekDayException", { "date": date, "description": description, "percentage": percentage, "districtId": $("#DistrictId").val() }, function (data) {
                    if (data == "OK") {

                        window.location.reload();
                        //$("#districtForm").submit();
                    }
                    else {

                        //$("#districtForm").submit();
                    }
                });
            });

            @if(!ViewBag.CanEdit){
                <text>
                setTimeout(200, function () { console.log("Hiding"); $(".bslider").slider("disable") });
                </text>
            }
            $(".datepicker").datepicker({
                format: "m/d/yyyy"
            }).on("changeDate", function (e) {
                $(this).datepicker("hide");
            });
        });



        function getExceptioData(id) {
                  $.ajax({
                    url: '/Home/EditException',
                    data: { id: id},
                    method: 'GET',
                      success: function (data) {
                          var exceptionData = JSON.parse(data);
                          if (exceptionData.status) {
                              $("#exceptionDate").val(formatDate(exceptionData.exceptionDate).toLocaleDateString("en-US"));
                              $("#exceptionDescription").val(exceptionData.exceptionDescription);
                              $("#exceptionPercent").val(exceptionData.exceptionPercent);
                              $("#ExceptionId").val(id);
                          }
                    },
                    error: function(res){
                    }
                });
        }

        function deleteException(id)
        {
            $.ajax({
                url: '/Home/DeleteException',
                data: { id: id, districtId: @Model.DistrictId },
                method: 'POST',
                success: function (data) {

                    if (data == "OK") {
                        window.location.reload();
                    }
                },
                error: function (res) {
                }
            });
        }

        function formatDate(value) {
            if (typeof value === 'string') {
                var a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)(?:([\+-])(\d{2})\:(\d{2}))?Z?$/.exec(value);
                if (a) {
                    var utcMilliseconds = Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]);

                    return new Date(utcMilliseconds);
                 }
            }
            return value;
        }
    </script>
}



