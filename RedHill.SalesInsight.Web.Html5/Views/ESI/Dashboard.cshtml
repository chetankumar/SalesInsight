@model RedHill.SalesInsight.Web.Html5.Models.ESI.DashboardSettingsView

@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_ESILayout.cshtml";
    ViewBag.IsESIModule = true;
    ViewBag.UsingDatePicker = true;
    ViewBag.UsingMultiselect = true;
    ViewBag.UsingSparkline = true;
    var accessRule = ViewBag.AccessRule;
    bool disableEditing = false;
    disableEditing = (Model.AccessType == "Standard" && accessRule.HasDashboardAccess != SIRolePermissionLevelConstants.ADMIN);
}
<style>
</style>
<div class="page-head">
    <h2>
        <i class="fa fa-home"></i>  Home
        <a class="btn btn-primary pull-right" data-toggle="modal" data-target="#Add_Dashboard">
            <i class="fa fa-plus"></i>
            Dashboard
        </a>
    </h2>
</div>
@Html.Partial("_AddDashboard")
@if (Model.Id != 0)
{
    <div class="esi-dashboard">
        <div>
            <div class="cl-mcont setting-mode" style="display:@(ViewBag.IsNewDashboard?"block":"none")">
                <div class="edit-mode">
                    <div class="form-inline">
                        <div class="edit-mode-title">Edit Mode</div>
                        <input name="DashboardName" @(disableEditing ? "disabled" : "") type="text" class="dasbrd-name form-control" value="@Model.Name" />
                        <div class="checkbox default-dash">
                            <label>
                                <input type="checkbox" name="Default" @(Model.Default ? "checked" : "" ) /> default
                            </label>
                        </div>
                        <span class="default-dash">
                            Max Columns
                            <input type="number" max="7" min="1" name="MaxColumn" autocomplete="off" class="form-control" id="maxWidgetColumn" value="@Model.MaxColumn" />
                        </span>
                        @if (!disableEditing)
                        {
                            <a class="btn btn-primary add-newWidget">
                                <i class="fa fa-plus"></i>
                                Widget
                            </a>
                        }

                        @if (Model.AccessType == "Personal" && ViewBag.IsAdmin == true)
                        {
                            <div class="checkbox-inline">
                                <a href="javascript:changeAccessType()" name="setAsStandard" title="click to make this as Standard Dashboard" data-confirm="Are you sure you want to set this dashboard as standard" class="btn btn-primary"> Make Standard</a>
                            </div>
                        }
                        @if (!disableEditing)
                        {
                            <a href="/ESI/DeleteDashboard/@Model.Id" class="btn btn-sm btn-danger pull-right inplace-delete" title="Delete Dashboard">
                                <i class="fa fa-trash" aria-hidden="true"><span title="click again to confirm delete" style="display:none;">&nbsp;&nbsp;Confirm?</span></i>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
        @Html.Partial("_WidgetSettings")

        <div class="cl-mcont">
            <div class="block-flat">
                @Html.Partial("_DashboardFilters")
                <div class="row">
                    <div class="col-sm-12">
                        @{
                            int index = 0;
                        }
                        <div class="gridly">
                            @foreach (var widget in Model.Widgets)
                            {
                                <div id="gridly_@index" data-toggle="flip" data-target="#widget_nav_@widget.WidgetId" class="esi-widget brick small" style="background-color:@widget.BackgroundColor" data-id="@widget.WidgetId">
                                    <input type="hidden" value="@widget.WidgetId" class="widget_id" />
                                    <a class="editor" title="Edit Widget" data-widgetId="@widget.WidgetId" style="display:none"> <i class="fa fa-pencil"></i></a>
                                    <a class="widget-deletor" title="Delete Widget" data-widgetId="@widget.WidgetId" style="display:none"><i class="fa fa-trash"></i> </a>
                                    <div class="widget-content front active">
                                        <div class="esi-widget-title">@widget.Title</div>
                                        <div class="esi-widget-value">
                                            <span data-item="primary.value" class="widget-value"> @(Math.Round(widget.Value, widget.DecimalPlaces.GetValueOrDefault(0)))</span>
                                            <span class="widget-action-indicator" data-item="action_indicator">
                                            </span>
                                        </div>
                                        <div class="widget-visualization">
                                            @if (widget.HasStaticMessage)
                                            {
                                                <div class="widget-static-msg">@widget.StaticMessage</div>
                                            }
                                        </div>
                                    </div>
                                    <div class="widget-content back">
                                        <div id="widget_nav_@widget.WidgetId" class="widget-nav">
                                            <div class="list-group">
                                                <a class="list-group-item" target="_blank" data-link="goal_analysis" href="/ESI/GoalAnalysis@(widget.GoalAnalysisReportId > 0 ? "/"+widget.GoalAnalysisReportId.ToString(): "")?persistFilter=true&wId=@(widget.WidgetId)">Goal Analysis</a>
                                                <a class="list-group-item" target="_blank" data-link="benchmark" href="/ESI/BenchmarkAnalysis@(widget.BenchmarkReportId > 0 ? "/"+widget.BenchmarkReportId.ToString() : "")?persistFilter=true&wId=@(widget.WidgetId)">Benchmark Analysis</a>
                                                <a class="list-group-item" target="_blank" data-link="trend" href="/ESI/TrendAnalysis@(widget.TrendAnalysisReportId >0 ? "/"+widget.TrendAnalysisReportId.ToString() :"")?persistFilter=true&wId=@(widget.WidgetId)">Trend Analysis</a>
                                                <a class="list-group-item" target="_blank" data-link="drillin" href="/ESI/DrillIn@(widget.DrillInReportId > 0 ?"/"+ widget.DrillInReportId.ToString():"")?persistFilter=true&wId=@(widget.WidgetId)">Drill In</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                index = index + 1;
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
                            }
<script src="~/Scripts/managers/ajax_manager.js"></script>
<script>
    var refIds = [];
    var entityIds = [];
    function ApplyandSaveFilter(submitValue) {
        if (submitValue == "Apply") {
            $("#SubmitValue").val(submitValue);
        }

    }
    function disableButton() {
        var submitButton = $("#FilterForm :input[type=submit]");
        submitButton.attr("disabled", true);
        submitButton.prepend("<i>");
        submitButton.find("i").addClass("fa fa-spinner fa-spin");
    }
    function validateForm() {
        var titleValue = $("#AddEdit_Widget input[name=Title]")
        var validation = false;
        if (titleValue.val() != "") {
            validation = true;
        }
        else {
            $(".form-validation").show();
            titleValue.focus();
        }
        return validation;
    }

    $('.tab-pane input:checkbox').click(function () {
        var tabId = $(this).parents(".tab-pane").attr("id");
        $('#' + tabId + ' input:checkbox').not(this).prop('checked', false);
    });

    $(".dashboardList").on("change", (function () {
        var dashboardId = $(this).val();
        if (dashboardId != "") {
            window.location = "/ESI/Dashboard/" + dashboardId;
        }
    }));

    $('.datepicker').datepicker({ format: "mm/dd/yyyy" });

    var reordering = function ($elements) {
        //console.log("Called before the drag and drop starts with the elements in their starting position.");
        console.log("before reordering");
    };

    var reordered = function ($elements) {
        console.log("reordered");
        var order = [];
        $.each($elements, function (i, e) {
            order.push({ 'WidgetId': $(e).find(".widget_id").val(), 'Position': i });
        });
        var data = JSON.stringify({
            'dashboardId': eval(@Model.Id),
            'order': order
        });
        $.ajax({
            url: '/ESI/UpdateWidgetOrder',
            method: 'POST',
            type: 'POST',
            data: data,
            contentType: 'application/json; charset=utf-8',
            success: function (res) {
            },
            error: function (res) {
            }
        });
    };



    $(".gridly").gridly("draggable", "off");

    $(document).on("click", ".esi-widget:not(.edit)", function (e) {
        if (!$(e.target).parents().hasClass("widget-content")) {
            return;
        }
        var wc = $(this).find(".widget-content");
        $.each(wc, function (i, e) {
            $(this).toggleClass("active");
        });
    });

    $("a.add-newWidget").click(function () {
        var model = "#AddEdit_Widget";
        $(".form-validation").hide();
        $(model).find(".modal-title").text("Add Widget");
        $(model + " button[type=submit]").html("Add");
        $(model + " input[name=WidgetId]").val(0);
        $(model + " input[name=Title]").val("");
        $(model + " select[name=MetricType]").val(0);
        $(model + " select[name=DecimalPlaces]").val(0);
        //$(model + " input[name=BackgroundColor]").val("#e3e3e3");
        //$(model + " a[data-id=BackgroundColor]").css("background-color", "#e3e3e3");
        //$(model + " input[name=BackgroundColor]").spectrum("set", "#e3e3e3");
        $(model + " select[name=PrimaryMetricDefinitionId]").val(0);
        $(model + " select[name=PrimaryMetricPeriod]").val(0);
        $(model + " select[name=ComparisonMetricDefinitionId]").val(0);
        $(model + " select[name=ComparisonMetricPeriod]").val(0);
        $(model + " input[name=ShowActionIcon]").prop("checked", false);
        $(".action_limit").collapse("hide");
        $(model + " input[name=SuccessLimitPercent]").val("");
        $(model + " input[name=AlertLimitPercent]").val("");
        $(model + " input[value=HasBarGraph]").prop("checked", true);
        $(model + " input[name=BarGraphDaysPerBar]").val("");
        $(model + " input[value=HasFrequencyDistribution]").prop("checked", false);
        $(model + " input[value=HasLineGraph]").prop("checked", false);
        $(model + " input[name=LineGraphRangeInDays]").val("");
        $(model + " input[value=HasPOPSummary]").prop("checked", false);
        $(model + " input[value=HasStaticMessage]").prop("checked", false);
        $(model + " input[name=StaticMessage]").val("");
        var totalWidgetExists = $(".gridly >.brick").length;
        $(model + " input[name=Position]").val(totalWidgetExists);
        $('select[name=GoalAnalysisReportId]')[0].sumo.selectItem("0");
        $('select[name=TrendAnalysisReportId]')[0].sumo.selectItem("0");
        $('select[name=BenchmarkReportId]')[0].sumo.selectItem("0");
        $('select[name=DrillInReportId]')[0].sumo.selectItem("0");
        $(model).modal();
        reloadColorSpectrum();
    });

    $('.gridly').on("click", ".widget-deletor", function (event) {
        event.preventDefault();
        event.stopPropagation();
        var r = confirm("Are you sure you want to delete this widget?");
        if (r == true) {
            var $this;
            $this = $(this);
            var widgetId = $this.attr("data-widgetId")
            $.ajax({
                type: "POST",
                url: '/ESI/DeleteWidget?widgetId=' + widgetId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                },
                error: function (res) {
                }
            });

            $this.closest('.brick').remove();
            return $('.gridly').gridly('layout');
        } else {

        }
    });
    $('.gridly').on('click', '.editor', function (e) {
        event.preventDefault();
        event.stopPropagation();
        $(".form-validation").hide();
        var editor = $(this);
        var widgetId = editor.attr("data-widgetId");
        var model = "#AddEdit_Widget";
        $.ajax({
            type: "POST",
            url: '/ESI/GetWidgetDetails?widgetId=' + widgetId,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                var widgetDetails = JSON.parse(data);
                $(model).find(".modal-title").text("Edit Widget");
                $(model + " .btn_save_widget").html("Update");
                $(model + " input[name=WidgetId]").val(widgetDetails.widgetId);
                $(model + " input[name=Title]").val(widgetDetails.title);
                $(model + " select[name=MetricType]").val(widgetDetails.metricType == null ? "" : widgetDetails.metricType)
                $(model + " select[name=DecimalPlaces]").val(widgetDetails.decimalPlaces);
                //$(model + " input[name=BackgroundColor]").val(widgetDetails.backgroundColor);
                //$(model + " a[data-id=BackgroundColor]").css("background-color", widgetDetails.backgroundColor);
                $(model + " input[name=BackgroundColor]").spectrum("set", widgetDetails.backgroundColor);
                $(model + " select[name=PrimaryMetricDefinitionId]").val(widgetDetails.primaryMetricDefinitionId == null ? "" : widgetDetails.primaryMetricDefinitionId);
                $(model + " select[name=PrimaryMetricPeriod]").val(widgetDetails.primaryMetricPeriod == null ? "" : widgetDetails.primaryMetricPeriod);
                $(model + " select[name=ComparisonMetricDefinitionId]").val(widgetDetails.comparisonMetricDefinitionId == null ? "" : widgetDetails.comparisonMetricDefinitionId);
                $(model + " select[name=ComparisonMetricPeriod]").val(widgetDetails.comparisonMetricPeriod == null ? "" : widgetDetails.comparisonMetricPeriod);
                $(model + " input[name=ShowActionIcon]").prop("checked", widgetDetails.showActionIcon);
                $(".action_limit").collapse(widgetDetails.showActionIcon == true ? "show" : "hide");
                $(model + " input[name=SuccessLimitPercent]").val(widgetDetails.successLimitPercent);
                $(model + " input[name=AlertLimitPercent]").val(widgetDetails.alertLimitPercent);
                $(model + " input[value=HasBarGraph]").prop("checked", widgetDetails.hasBarGraph);
                $(model + " input[name=BarGraphDaysPerBar]").val(widgetDetails.barGraphDaysPerBar);
                $(model + " input[value=HasFrequencyDistribution]").prop("checked", widgetDetails.hasFrequencyDistribution);
                $(model + " input[value=HasLineGraph]").prop("checked", widgetDetails.hasLineGraph);
                $(model + " input[name=LineGraphRangeInDays]").val(widgetDetails.lineGraphRangeInDays);
                $(model + " input[value=HasPOPSummary]").prop("checked", widgetDetails.hasPOPSummary);
                $(model + " input[value=HasStaticMessage]").prop("checked", widgetDetails.hasStaticMessage);
                $(model + " input[name=StaticMessage]").val(widgetDetails.staticMessage);

                $('select[name=GoalAnalysisReportId]')[0].sumo.selectItem(widgetDetails.goalAnalysisReportId == null ? "0" : widgetDetails.goalAnalysisReportId.toString());
                $('select[name=TrendAnalysisReportId]')[0].sumo.selectItem(widgetDetails.trendAnalysisReportId == null ? "0" : widgetDetails.trendAnalysisReportId.toString());
                $('select[name=BenchmarkReportId]')[0].sumo.selectItem(widgetDetails.benchmarkReportId == null ? "0" : widgetDetails.benchmarkReportId.toString());
                $('select[name=DrillInReportId]')[0].sumo.selectItem(widgetDetails.drillInReportId == null ? "0" : widgetDetails.drillInReportId.toString());
                $(model + " input[name=Position]").val(widgetDetails.position);
                $(model).modal();
            },
            error: function (res) {

            }
        });
        reloadColorSpectrum();
    });

    function updateWidget(data) {
        var widget = $($(".esi-widget[data-id='" + data.WidgetId + "']")[0]);
        var goalId = data.GoalAnalysisReportId, benchmarkId = data.BenchmarkAnalysisReportId, trendId = data.TrendAnalysisReportId, drillInId = data.DrillInReportId;

        if (widget.length) {
            widget.find(".esi-widget-title").text(data.Title);
            widget.css("background-color", data.BackgroundColor);
            widget.find('[data-link="goal_analysis"]').attr("href", "/ESI/GoalAnalysis" + (goalId ? "/" + goalId : "") + "?persistFilter=true&wId=" + data.WidgetId ).attr("target","_blank");
            widget.find('[data-link="benchmark"]').attr("href", "/ESI/BenchmarkAnalysis" + (benchmarkId ? "/" + benchmarkId : "") + "?persistFilter=true&wId=" + data.WidgetId ).attr("target", "_blank");
            widget.find('[data-link="trend"]').attr("href", "/ESI/TrendAnalysis" + (trendId ? "/" + trendId : "") + "?persistFilter=true&wId=" + data.WidgetId ).attr("target", "_blank");
            widget.find('[data-link="drillin"]').attr("href", "/ESI/DrillIn" + (drillInId ? "/" + drillInId : "") + "?persistFilter=true&wId=" + data.WidgetId ).attr("target", "_blank");
        } else {
            var brick = $("<div/>");
            brick.attr("id", "gridly_" + $(".esi-widget").length);
            brick.attr("data-toggle", "flip");
            brick.attr("data-target", "#widget_nav_" + data.WidgetId);
            brick.addClass("esi-widget brick small edit");
            brick.attr("style", "background-color: " + data.BackgroundColor);
            brick.attr("data-id", data.WidgetId);

            var input = $("<input type='hidden' />");
            input.addClass("widget_id");
            input.val(data.WidgetId);

            brick.append(input);

            var html = '<a class="editor" title="Edit Widget" data-widgetId="' + data.WidgetId + '"> <i class="fa fa-pencil"></i></a><a class="widget-deletor" title="Delete Widget" data-widgetId="' + data.WidgetId + '"><i class="fa fa-trash"></i> </a>' +
                '<div class="widget-content front active"><div class="esi-widget-title">' + data.Title + '</div><div><span data-item="primary.value" class="widget-value">0</span><span class="widget-action-indicator" data-item="action_indicator"></span></div><div class="widget-visualization">';

            var backContent = '<div class="widget-content back"><div id="widget_nav_' + data.WidgetId + '" class="widget-nav"><div class="list-group"><a class="list-group-item" data-link="goal_analysis" target="_blank" href="/ESI/GoalAnalysis' + (goalId ? "/" + goalId : "") + '?persistFilter=true&wId=' + data.WidgetId + '">Goal Analysis</a><a class="list-group-item" data-link="benchmark" target="_blank" href="/ESI/BenchmarkAnalysis' + (benchmarkId ? "/" + benchmarkId : "") + '?persistFilter=true&wId=' + data.WidgetId + '">Benchmark Analysis</a><a class="list-group-item" data-link="trend" target="_blank" href="/ESI/TrendAnalysis' + (trendId ? "/" + trendId : "") + '?persistFilter=true&wId=' + data.WidgetId + '">Trend Analysis</a><a class="list-group-item" data-link="drillin" target="_blank" href="/ESI/DrillIn' + (drillInId ? "/" + drillInId : "") + '?persistFilter=true&wId=' + data.WidgetId + '">Drill In</a></div></div></div>';

            brick.append($(html));
            brick.append($(backContent));

            $('.gridly').append(brick);

            var gridly = $('.gridly').gridly({
                base: 60, // px
                gutter: 20, // px
                columns: eval(@Model.MaxColumn) * 2,
                callbacks: { reordering: reordering, reordered: reordered }
            });
        }
    }

    $(document).on("click", ".btn_save_widget", function (e) {
        var preloader = $(".widget-detail.preloader");
        preloader.show();
        var formData = $("#form_widget_detail").serialize();
        $.ajax({
            type: "POST",
            url: '/ESI/UpdateWidgetDetails',
            data: formData,
            success: function (res) {
                var r = JSON.parse(res);
                if (r.data && r.data.WidgetId) {
                    $("#AddEdit_Widget").modal("hide");
                    updateWidget(r.data);
                    loadWidgetData(r.data.WidgetId);
                }
            },
            error: function (res) {

            },
            complete: function () {
                preloader.hide();
            }
        });
    });

    function enableDisableFilterDDL(){
        var regionIds = $("#regionFilter").val();
        var districtIds = $("#districtFilter").val();
        if (regionIds != null && regionIds.length > 0 && districtIds != null && districtIds.length > 0) {
            $("#districtFilter").prop("disabled", false);
            $("#plantFilter").prop("disabled", false);
            $("#regionFilter").prop("disabled", false);
            $("#marketSegmentFilter").prop("disabled", false);
            $("#customerFilter").prop("disabled", false);
            $("#salesStaffFilter").prop("disabled", false);
        }
        else if (regionIds != null && regionIds.length > 0) {
            $("#districtFilter").prop("disabled", false);
            $("#plantFilter").prop("disabled", true);
            $("#marketSegmentFilter").prop("disabled", true);
            $("#customerFilter").prop("disabled", true);
            $("#salesStaffFilter").prop("disabled", true);
        }
        else {
            $("#districtFilter").prop("disabled", true);
            $("#plantFilter").prop("disabled", true);
            $("#marketSegmentFilter").prop("disabled", true);
            $("#customerFilter").prop("disabled", true);
            $("#salesStaffFilter").prop("disabled", true);
        }
    }

    $(".regionFilter").change(function () {
            $('#divLoading').addClass('show');
            var regionIds = $(this).val();
            $.ajax({
                url: "/ESI/GetDistrictRegionWise",
                traditional: true,
                data: { regionId: regionIds, dashboardId:eval(@Model.Id) },
                method: 'POST',
                complete: function () {
                    resetDashboardFilters();
                    $('#divLoading').removeClass('show');
                },
                success: function (res) {
                    enableDisableFilterDDL();
                    var districtIds = $("#districtFilter").val();
                    entityIds = [];
                    entityIds.push(districtIds);
                    $("#districtFilter").empty();
                    var entityRefIds = entityIds[0];
                    $.each(res, function (i, value) {
                        if (entityRefIds != undefined) {
                            $("#districtFilter").append($("<option " + (entityRefIds.indexOf(value.Value) > -1 ? 'selected' : '') + "></option>").val(value.Value).html(value.Text));
                        }
                        else {
                            $("#districtFilter").append($("<option></option>").val(value.Value).html(value.Text));
                        }
                    });
                    $("#districtFilter" + '.multiselect')[0].sumo.reload();

            },
            error: function (res) {
            }
        });

    });

    $('#districtFilter').change(function () {
        var districtIds = $("#districtFilter").val();
        entityIds = [];
        entityIds.push(districtIds);
    })

    $(".districtFilter").change(function () {
        resetDashboardFilters();
    });

    function resetDashboardFilters() {
        $('#divLoading').addClass('show');
        var districtIds = $("#districtFilter").val();
        $.ajax({
            url: "/ESI/GetFiltersDistrictWise",
            traditional: true,
            data: { districtId: districtIds, dashboardId: eval(@Model.Id) },
            method: 'POST',
            complete: function () {
                $('#divLoading').removeClass('show');
            },
            success: function (res) {
                enableDisableFilterDDL();
                var list = res
                var plantList = list.plants
                var marketSegmentList = list.marketSegments
                var customerList = list.customers
                var salesStaffList = list.salesStaffs

                var array = [];
                array.push({ key: "#plantFilter", value: plantList })
                array.push({ key: "#marketSegmentFilter", value: marketSegmentList })
                array.push({ key: "#customerFilter", value: customerList })
                array.push({ key: "#salesStaffFilter", value: salesStaffList })

                var plantIds = $("#plantFilter").val();
                var segmentIds = $("#marketSegmentFilter").val();
                var customerIds = $("#customerFilter").val();
                var staffIds = $("#salesStaffFilter").val();

                refIds = [];
                refIds.push(plantIds);
                refIds.push(segmentIds);
                refIds.push(customerIds);
                refIds.push(staffIds);

                $.each(array, function (i, e) {
                    var entityRefIds = refIds[i];
                    $(e.key).empty();
                    $.each(e.value, function (i, value) {
                        if (entityRefIds != undefined) {
                            $(e.key).append($("<option " + (entityRefIds.indexOf(value.Value) > -1 ? 'selected' : '') + "></option>").val(value.Value).html(value.Text));
                        }
                        else {
                            $(e.key).append($("<option></option>").val(value.Value).html(value.Text));
                        }
                    });
                    $(e.key + '.multiselect')[0].sumo.reload();

                });
            },
            error: function (res) {
            }
        });
    }


     $('#plantFilter ,#marketSegmentFilter, #customerFilter, #salesStaffFilter').change(function () {
            var plantIds = $("#plantFilter").val();
            var segmentIds = $("#marketSegmentFilter").val();
            var customerIds = $("#customerFilter").val();
            var staffIds = $("#salesStaffFilter").val();
            refIds = [];
            refIds.push(plantIds);
            refIds.push(segmentIds);
            refIds.push(customerIds);
            refIds.push(staffIds);
    })

    $(document).ready(function () {

        wrapDashboardWidget();
        //enableDisableFilterDDL();//disable filter dropdown when none selected

        $(".goal-btn,.bench-btn,.trend-btn,.drill-btn").click(function () {
            $(this).attr("disabled", true);
            $(this).find("i").remove();
            $(this).prepend("<i>");
            $(this).find("i").addClass("fa fa-spinner fa-spin");
        });

        $("#StartDate").on("change", function () {
            //updateDashboardDetails();
            updateDashboardStartDate();
            $("#RunDashboard_btn").show(600);
        });

        $("#RunDashboard_btn").click(function () {
            $(this).find("a").prepend("<i>").attr("disabled", true);
            $(this).find("a i").addClass("fa fa-spin fa-spinner");
            var nonAdminStandard = '@(disableEditing)' == 'True';
            if (nonAdminStandard) {
                $("#FilterForm").find("button[value='Apply']").trigger("click");
            } else {
                $("#FilterForm").find("button[value='Apply and Save']").trigger("click");
            }
        });

        $('#myTab a:last').tab('show');

        $(".mode").click(function () {
            $(this).find('i').toggleClass("slow-spin").toggleClass("");
            $(".brick ").toggleClass("edit").toggleClass("");
            var nonAdminStandard = '@(disableEditing)'=='True';
            if (!nonAdminStandard) {
                if ($(this).find("i").hasClass("slow-spin")) {
                    $(".gridly").gridly("draggable", "on");
                } else {
                    $(".gridly").gridly("draggable", "off");
                }
                $(".setting-mode, .editor, .change_color, .widget-deletor").toggle(600);
            }
            else {
                $(".setting-mode").toggle(600);
            }
        });

        $(".favourite").click(function () {
            if ($(".favourite").hasClass("non-fav")) {
                $(".favourite").removeClass("non-fav").addClass("fav").attr("title", "Click to remove it from favourite dashboard");
            }
            else {
                $(".favourite").removeClass("fav").addClass("non-fav").attr("title", "Click to make this as favourite dashboard");
            }
            updateDashboardDetails();
        });

        $(".default-dash").click(function (e) {
            //if ($(this).is(":checked")) {
            //    e.preventDefault();
            //}
            updateDashboardDetails();
        });

        $("input[name=MaxColumn]").blur(function () {
            //dashboardId = 1;
            updateDashboardDetails();
            //window.location = "/ESI/Dashboard/" + dashboardId;
        });

        $("input[name=DashboardName]").blur(function () {
            udpateReportName();
         });

        function changeReportDDLName(name) {
            var dashboardId = eval(@Model.Id)
            $(".dashboardList option[value=" + dashboardId + "]").html(name);
            $(".dashboardList")[0].sumo.reload();
        }

        function udpateReportName()
        {
            var dashboardName = $("input[name=DashboardName]").val();
            var params = {
                 dashboardId: eval(@Model.Id),
                dashboardName: dashboardName
            }
            $.ajax({
                url: '/ESI/UpdateDashboardName',
                data: params,
                method: 'POST',
                success: function (data) {
                    changeReportDDLName(dashboardName);
                },
                error: function (res) {
                }
            });
        }

        function updateDashboardStartDate()
        {
            var StartDate = $("input[name=StartDate]").val();
             var nonAdminStandard = '@(disableEditing)' == 'True';
            var params = {
                dashboardId: eval(@Model.Id),
                startDate: StartDate,
                nonAdminStandardReport : nonAdminStandard
            }

            $.ajax({
                url: '/ESI/UpdateDashboardStartDate',
                data: params,
                method: 'POST',
                success: function (data) {
                    //wrapDashboardWidget();
                },
                error: function (res) {
                }
            });

        }

        function updateDashboardDetails() {
            var isDefault = $("input[name=Default]").is(':checked');
            var maxColumn = $("input[name=MaxColumn]").val();
            //var StartDate = $("input[name=StartDate]").val();
            var isFavorite = $(".favourite").hasClass("fav") ? true : false;
            var params = {
                isDefault: isDefault,
                maxColumn: maxColumn,
                isFavorite: isFavorite,
                dashboardId: eval(@Model.Id)
            }

            $.ajax({
                url: '/ESI/UpdateDashboardSetting',
                data: params,
                method: 'POST',
                success: function (data) {
                    wrapDashboardWidget();
                },
                error: function (res) {
                }
            });
        }

        $(window).resize(function () {
            wrapDashboardWidget();
        });

        function wrapDashboardWidget() {
            var currentColumnCount = parseInt($("input[name=MaxColumn]").val());
            var currentScreenWidth = $(window).width();
            var columns = [8,7, 6, 5, 4, 3, 2, 1];
            var screenWidths = [1576 ,1406, 1255, 1100, 932, 776, 560, 400];
            var maxColumn = -1;
            $.each(screenWidths, function (i, v) {
                //console.log("currentScreenWidth = " + currentScreenWidth + " " + ((currentScreenWidth < screenWidths[i]) ? "<" : ">") + "  screenWidths = " + screenWidths[i]);

                if (currentScreenWidth > 1576) {
                    maxColumn = columns[i] >= currentColumnCount ? currentColumnCount : 9;
                    return false
                } else {
                    if (currentScreenWidth <= screenWidths[i]) {
                        maxColumn = columns[i] > currentColumnCount ? currentColumnCount : columns[i];
                    }
                    else {
                        return false;
                    }
                }
            });

            $('.gridly').gridly('refresh', {
                base: 60, // px
                gutter: 20, // px
                columns: maxColumn * 2,
                callbacks: { reordering: reordering, reordered: reordered }
            });
        }

        $(".filter-count").html($(".dash-filters .multiselect :selected").length);

        $(".clear-all-filter").click(function () {
            $(".dash-filters .multiselect").each(function (i, val) {
                $(".dash-filters .multiselect option:selected").each(function (j, val) {
                    $(".dash-filters .multiselect")[i].sumo.unSelectItem($(this).val());
                });
            })
        });

        setTimeout(loadWidgetData, 1000);
    });

    function loadWidgetData(widgetId) {
        //Load Data
        var widgets = widgetId ? $(".esi-widget[data-id='" + widgetId + "']") : $(".esi-widget");
        var date = $($(".date_selector")[0]).val();
        var xhrList = [];
        $.each(widgets, function (i, e) {
            var widget = $($(e));
            var widgetId = widget.find("input[type='hidden'].widget_id").val();
            var widgetLoader = $("<div class='loading'/>");
            widgetLoader.html("<i class='fa fa-spinner fa-spin'></i>");
            if (widgetId) {
                var xhr = $.ajax({
                    url: '/esi/getwidgetdata',
                    method: "POST",
                    data: { dashboardId: eval(@Model.Id),widgetId: widgetId, date: date },
                    beforeSend: function () {
                        //show loader
                        widget.append(widgetLoader);
                    },
                    success: function (res) {
                        if (res && res.Data) {
                            widget.find("[data-item='primary.value']").html(res.Data.PrimaryMetric.Value.Formatted);
                            renderWidgetVisuals(res);
                        }
                    },
                    error: function (res) {
                    },
                    complete: function (data) {
                        //hide loader
                        widgetLoader.slideUp(800, function () {
                            widgetLoader.remove();
                        });
                    }
                });

                xhrList.push(xhr);
            }
        });
    }

    function renderWidgetVisuals(res) {
        var widget = $(".esi-widget[data-id='" + res.WidgetId + "']");

        if (res.Data && res.Data.Variance && res.Data.Variance.ActionIndicator) {
            var actionIndicator = widget.find("[data-item='action_indicator']");
            var indication = res.Data.Variance.ActionIndicator.Indication;

            switch (indication) {
                case "Ok":
                    actionIndicator.html("<i class='fa fa-check text-success'></i>");
                    break;
                case "Alert":
                    actionIndicator.html("<i class='fa fa-exclamation-triangle text-warning'></i>");
                    break;
                case "Danger":
                    actionIndicator.html("<i class='fa fa-times text-danger'></i>");
                    break;
            }
        }

        if (res.VisualIndication) {
            var widgetVisualization = $(widget).find(".widget-visualization");
            var vIndication = res.VisualIndication;
            switch (vIndication.Type) {
                case "BarGraph":
                    widgetVisualization.empty();
                    widgetVisualization.sparkline(vIndication.Config.BarGraph.Data, {
                        barWidth: "6px",
                        height: '25',
                        type: "bar",
                        tooltipSuffix: ""
                    });
                    break;
                case "LineGraph":
                    widgetVisualization.empty();
                    widgetVisualization.sparkline(vIndication.Config.LineGraph.Data, {
                        type: 'line',
                        width: '100',
                        height: '25',
                        fillColor: '#9db5e4',
                        spotColor: false,
                        minSpotColor: false,
                        maxSpotColor: false,
                        highlightSpotColor: false,
                        highlightLineColor: false
                    });
                    break;
                case "FrequencyDistribution":
                    widgetVisualization.empty();
                    binnedData = binData(vIndication.Config.FrequencyDistribution.Data);
                    widgetVisualization.sparkline(binnedData, {
                        type: 'line',
                        width: '100',
                        height: '25',
                        fillColor: '#3e70d6',
                        spotColor: false,
                        minSpotColor: false,
                        maxSpotColor: false,
                        highlightSpotColor: false,
                        highlightLineColor: false
                    });
                    break;
                case "POPSummary":
                    widgetVisualization.empty();

                    var currentValue = vIndication.Config.POPSummary.Data.Current;
                    var prevValue = vIndication.Config.POPSummary.Data.Previous;
                    var variance = vIndication.Config.POPSummary.Data.Variance.Actual;
                    var varianceFormatted = vIndication.Config.POPSummary.Data.Variance.Formatted;

                    var div = $("<div class='widget-var-indication' />");
                    var i = $("<i class='fa' />");

                    if (variance > 0) {
                        i.addClass("fa-caret-up")
                    } else {
                        i.addClass("fa-caret-down");
                    }

                    var varSpan = $("<span/>");
                    varSpan.html(varianceFormatted);
                    div.append(i);
                    div.append(varSpan);

                    widgetVisualization.html(div);
                    break;
                case "StaticMessage":
                    widgetVisualization.empty();

                    var msg = $("<div/>");
                    msg.addClass("widget-static-msg");
                    msg.html(vIndication.Config.StaticMessage.Message);

                    widgetVisualization.html(msg);
                    break;
            }
        }
    }

    //function standardDeviation(numbersArr) {
    //    //--CALCULATE AVAREGE--
    //    var total = 0;
    //    for (var key in numbersArr)
    //        total += numbersArr[key];
    //    var meanVal = total / numbersArr.length;
    //    //--CALCULATE AVAREGE--

    //    //--CALCULATE STANDARD DEVIATION--
    //    var SDprep = 0;
    //    for (var key in numbersArr)
    //        SDprep += Math.pow((parseFloat(numbersArr[key]) - meanVal), 2);
    //    var SDresult = Math.sqrt(SDprep / numbersArr.length);
    //    //--CALCULATE STANDARD DEVIATION--
    //    alert(SDresult);

    //    var numberArray = numbersArr, thisTotal = 0, thisAverage = 0;
    //    // add elements of array together
    //    for (var i = 0; i < numberArray.length; i++)
    //    { thisTotal += numberArray[i]; }
    //    // calculate average
    //    thisAverage = (thisTotal / numberArray.length);
    //    // display result
    //    alert(thisAverage)

    //}

    var standardDeviation = function (arr) {
        var n = arr.length;
        var sum = 0;

        arr.map(function (data) {
            sum += data;
        });

        var mean = sum / n;

        var variance = 0.0;
        var v1 = 0.0;
        var v2 = 0.0;

        if (n != 1) {
            for (var i = 0; i < n; i++) {
                v1 = v1 + (arr[i] - mean) * (arr[i] - mean);
                v2 = v2 + (arr[i] - mean);
            }

            v2 = v2 * v2 / n;
            variance = (v1 - v2) / (n - 1);
            if (variance < 0) { variance = 0; }
        }
        stddev = Math.sqrt(variance);

        return {
            mean: Math.round(mean * 100) / 100,
            variance: variance,
            deviation: Math.round(stddev * 100) / 100
        };
    };
    //################
    var Gaussian = function (mean, std) {
        this.mean = mean;
        this.std = std;
        this.a = 1 / Math.sqrt(2 * Math.PI);
    };

    Gaussian.prototype = {
        addStd: function (v) {
            this.std += v;
        },

        get: function (x) {
            var f = this.a / this.std;
            var p = -1 / 2;
            var c = (x - this.mean) / this.std;
            c *= c;
            p *= c;
            return f * Math.pow(Math.E, p);
        },

        generateValues: function (start, end) {
            var LUT = [];
            var step = (Math.abs(start) + Math.abs(end)) / 100;
            for (var i = start; i < end; i += step) {
                LUT.push(this.get(i));
            }

            return binData(LUT);
        }
    };

    //// program code

    //var gauss = new Gaussian(0, 1);
    //var cvs = document.querySelector("canvas");
    //var width = cvs.width;
    //var height = cvs.height;
    //var ctx = cvs.getContext("2d");

    //function showStd() {
    //    document.querySelector("span").textContent = ('' + gauss.std).substring(0, 3);
    //    gauss.draw(ctx);
    //}

    //var btn = document.querySelectorAll("button");
    //var up = btn[0], down = btn[1];
    //up.addEventListener("click", function () { gauss.addStd(0.1); showStd(); });
    //down.addEventListener("click", function () { gauss.addStd(-0.1); showStd(); });

    //showStd();
    //#################
    function calculateGraphValue(arr)
    {
        console.log(arr);
        var stdResult = standardDeviation(arr);
        var mean = stdResult.mean;
        var std = stdResult.deviation;
        var leftGraphLimit = Math.floor(stdResult.mean - (3 * stdResult.deviation));
        var rightGraphLimit = Math.ceil(stdResult.mean + (3 * stdResult.deviation));
        console.log(leftGraphLimit + " L -- R " + rightGraphLimit);
        var diff = Math.abs(rightGraphLimit) - Math.abs(leftGraphLimit);
        var per = diff / 22;
        var avg = per/2
        console.log(avg);
         //Gaussian distribution generator
        //var gauss = new Gaussian(mean, std);
        //var lut = gauss.generateValues(leftGraphLimit, rightGraphLimit)
        //console.log(lut);
    }


    function binData(data) {
        var hData = new Array(); //the output array
        var stdResult = standardDeviation(data);
        var mean = stdResult.mean;
        var std = stdResult.deviation;
        var leftGraphLimit = Math.floor(stdResult.mean - (3 * stdResult.deviation));
        var rightGraphLimit = Math.ceil(stdResult.mean + (3 * stdResult.deviation));
           var size = data.length, //how many data points
            bins = Math.round(Math.sqrt(size)); //determine how many bins we need
            bins = bins > 50 ? 50 : bins; //adjust if more than 50 cells
            var max = rightGraphLimit,//Math.max.apply(null, data), //lowest data value
                min = leftGraphLimit,//Math.min.apply(null, data), //highest data value
            range = max - min, //total range of the data
            width = range / bins, //size of the bins
            bin_bottom, //place holders for the bounds of each bin
            bin_top;

        //loop through the number of cells
        for (var i = 0; i < bins; i++) {

            //set the upper and lower limits of the current cell
            bin_bottom = min + (i * width);
            bin_top = bin_bottom + width;

            //check for and set the x value of the bin
            if (!hData[i]) {
                hData[i] = new Array();
                hData[i][0] = bin_bottom + (width / 2);
            }

            //loop through the data to see if it fits in this bin
            for (var j = 0; j < size; j++) {
                var x = data[j];

                //adjust if it's the first pass
                i == 0 && j == 0 ? bin_bottom -= 1 : bin_bottom = bin_bottom;

                //if it fits in the bin, add it
                if (x > bin_bottom && x <= bin_top) {
                    !hData[i][1] ? hData[i][1] = 1 : hData[i][1]++;
                }
            }
        }
        $.each(hData, function (i, point) {
            if (typeof point[1] == 'undefined') {
                hData[i][1] = 0;
            }
        });
        return hData;
    }

    $(".inplace-delete").on("click", function () {
        if ($(this).hasClass("confirm-delete")) {
            $(this).attr("disabled", "disabled").html("");
            $(this).append("<i>");
            $(this).find("i").addClass("fa fa-spinner fa-spin");
            return true
        } else {
            $(this).addClass("confirm-delete").find("span").show(200);
            return false;
        }
    });

    $(window).click(function () {
        $(".confirm-delete").removeClass("confirm-delete").find("span").hide(300);
    });
    $(function () {
        reloadColorSpectrum();
    });
    var reloadColorSpectrum = function () {
        var selectedColors = [];

        $(".gridly .esi-widget").each(function () {
            selectedColors.push($(this).css("background-color"));
        });

        palette = [["rgb(244, 141, 167)", "rgb(216, 147, 193)", "rgb(217, 164, 209)", "rgb(242, 188, 242)", "rgb(198, 142, 255)"],
            ["rgb(253, 195, 155)", "rgb(255, 191, 130)", "rgb(247, 135, 74)", "rgb(255, 181, 82)", "rgb(255, 98, 108)"],
            ["rgb(247, 114, 114)", "rgb(253, 139, 139)", "rgb(145, 178, 255)", "rgb(133, 164, 184)", "rgb(6, 247, 108)"],
            ["rgb(116, 221, 103)", "rgb(191, 232, 83)", "rgb(156, 227, 8)", "rgb(244, 239, 74)", "rgb(222, 242, 49)"],
            ["rgb(143, 202, 255)", "rgb(117, 232, 203)", "rgb(130, 226, 255)", "rgb(72, 247, 232)", "rgb(227, 227, 227)"]]

        $("#BackgroundColor").spectrum({
            color: "#e3e3e3",
            showInput: false,
            className: "full-spectrum",
            showInitial: false,
            showPalette: true,
            showPaletteOnly: true,
            showButtons: false,
            showSelectionPalette: true,
            maxSelectionSize: 0,
            preferredFormat: "hex",
            localStorageKey: "spectrum.demo",
            move: function (color) {
            },
            show: function () {
                $(".palette-title").remove();
                $("span.sp-thumb-active").attr("title", "Used");
                //$(".sp-palette.sp-thumb.sp-cf").after("<span class='palette-title'>Used Colors</span> <i class='fa fa-check'></i>");
            },
            beforeShow: function () {

            },
            hide: function () {

            },
            change: function () {

            },
            palette: palette,
            selectedColors: selectedColors
        });

    }

    //save as standard dashboard
        function changeAccessType() {
            var Name = $("input[name=DashboardName]").val();
            var AccessType = "Standard";
            var params = {
                dashboardId: eval(@Model.Id),
                accessType: AccessType
            }

            $.ajax({
                url: '/ESI/UpdateAccessType',
                data: params,
                method: 'POST',
                success: function (res) {
                    if (res.updateStatus) {
                        window.location.reload();
                    }
                    //console.log(data);
                },
                error: function (res) {
                }
            });

        }
</script>