@model RedHill.SalesInsight.Web.Html5.Models.IndicatorsView
@using RedHill.SalesInsight.Web.Html5.Helpers;
@{
    ViewBag.Title = "Manage Indicators";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var company = ConfigurationHelper.Company;
}
<div class="page-head">
    <h2>Manage Indicators</h2>
    <ol class="breadcrumb">
        <li><a href="/Home/Index">Home</a></li>
        @if (ViewBag.AccessRule.HasReportsAccess == SIRolePermissionLevelConstants.NO_ACCESS)
        {
            <li><a href="/Home/Settings">Settings</a></li>
            <li><a href="/Reports/Settings">Report Settings</a></li>
        }
        else
        {
            <li><a href="/Reports/Index">Reports</a></li>
            <li><a href="/Reports/Settings">Settings</a></li>
        }
        <li class="active">Indicators</li>
    </ol>
</div>
<div class="cl-mcont">
    <div class="panel-body block-flat">
        <h2> Productivity & Financials</h2>
        <p class="spacer2"></p>
        <fieldset class="col-md-6 form form-horizontal">
            <legend>Productivity Metrics</legend>
            <div class="alert alert-info">
                Enter allowable target violation for ‘ok’ and ‘caution’ indicators.
            </div>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th class="text-right" style="min-width:120px;">Metric</th>
                        <th><i class="fa fa-check text-success"></i> OK</th>
                        <th><i class="fa fa-exclamation-triangle text-warning"></i> CAUTION</th>
                    </tr>
                </thead>
                <tbody>
                    @{RedHill.SalesInsight.DAL.MetricIndicatorAllowance indicator = null;}
                    @foreach(var metric in Model.PerformanceMetrics){
                        {indicator = Model.GetMetricIndicator(metric);}
                        <tr>
                           <td class="text-right">@indicator.DisplayName</td>
                            <td>
                                <input type="text" data-init="@indicator.Ok.ToString(indicator.NumFormat)" value="@indicator.Ok.ToString(indicator.NumFormat)" class="form-control input-sm metric_allowance" data-metric="@metric" data-attribute="OK" />
                            </td>
                            <td>
                                <input type="text" data-init="@indicator.Caution.ToString(indicator.NumFormat)" value="@indicator.Caution.ToString(indicator.NumFormat)" class="form-control input-sm metric_allowance" data-metric="@metric" data-attribute="CAUTION" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </fieldset>
        <fieldset class="col-md-6 form form-horizontal">
            <legend>Financial Metrics</legend>
            <div class="alert alert-info">
                Enter allowable $/@company.DeliveryQtyUomSingular target violation for ‘ok’ and ‘caution’ indicators.
            </div>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th class="text-right" style="min-width:120px;">Metric</th>
                        <th><i class="fa fa-check text-success"></i> OK</th>
                        <th><i class="fa fa-exclamation-triangle text-warning"></i> CAUTION</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var metric in Model.FinancialMetrics){
                        {indicator = Model.GetMetricIndicator(metric);}
                        <tr>
                           <td  class="text-right">@indicator.DisplayName</td>
                            <td>
                                <div class="input-group">
                                    <input type="text" data-init="@indicator.Ok.ToString(indicator.NumFormat)" value="@indicator.Ok.ToString(indicator.NumFormat)" class="form-control input-sm metric_allowance" data-metric="@metric" data-attribute="OK" />
                                    <span class="input-group-addon">$/@company.DeliveryQtyUomSingular</span>
                                </div>
                            </td>
                            <td>
                                <div class="input-group">
                                    <input type="text" data-init="@indicator.Caution.ToString(indicator.NumFormat)" value="@indicator.Caution.ToString(indicator.NumFormat)" class="form-control input-sm metric_allowance" data-metric="@metric" data-attribute="CAUTION" />
                                    <span class="input-group-addon">$/@company.DeliveryQtyUomSingular</span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </fieldset>
	</div>
    
    <hr />
   			
    <div class="panel-body block-flat">
        <h2>DSO &amp; Cancellations</h2>
        <fieldset class="col-md-6 form form-horizontal">
            <div class="alert alert-info">
                Enter Targets and allowable target violation for 'ok' and 'caution' indicators.
            </div>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th class="text-right" style="min-width:120px;">Metric</th>
                        <th><i class="fa fa-bullseye"></i> Target</th>
                        <th><i class="fa fa-check text-success"></i> OK</th>
                        <th><i class="fa fa-exclamation-triangle text-warning"></i> CAUTION</th>
                    </tr>
                </thead>
                <tbody>
                    @{RedHill.SalesInsight.DAL.TargetIndicatorAllowance indicator2 = null;}
                    @foreach (var metric in new List<String> {"DSO", "Cancellations" })
                    {
                        { indicator2 = Model.GetTargetIndicator(metric); }
                        <tr>
                            <td  class="text-right">@indicator2.DisplayName</td>
                            <td>
                                <input type="text" data-init="@indicator2.Target.ToString(indicator2.NumFormat)" value="@indicator2.Target.ToString(indicator2.NumFormat)" class="form-control input-sm target_allowance" data-metric="@metric" data-attribute="TARGET" />
                            </td>
                            <td>
                                <input type="text" data-init="@indicator2.Ok.ToString(indicator2.NumFormat)" value="@indicator2.Ok.ToString(indicator2.NumFormat)" class="form-control input-sm target_allowance" data-metric="@metric" data-attribute="OK" />
                            </td>
                            <td>
                                <input type="text" data-init="@indicator2.Caution.ToString(indicator2.NumFormat)" value="@indicator2.Caution.ToString(indicator2.NumFormat)" class="form-control input-sm target_allowance" data-metric="@metric" data-attribute="CAUTION" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </fieldset>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            var reportSettingsAccess = '@(ViewBag.AccessRule.HasReportSettingsAccess == SIRolePermissionLevelConstants.FULL_ACCESS)';
            if (reportSettingsAccess == 'False') {
                $(":input").attr("disabled", true);
            }

            $(".metric_allowance").blur(function () {
                metric = $(this).data("metric");
                attribute = $(this).data("attribute");
                value = $(this).val();
                init = $(this).data("init");
                element = $(this);
                try {
                    num_value = parseFloat(value);
                    if (isNaN(num_value)) {
                        element.val(init);
                        return;
                    }
                } catch (ex) {
                    console.log("error");
                    element.val(init);
                    return;
                }

                if (init != value) {
                    params = { "metric": metric, "attribute": attribute, "value": value };
                    $.post("/Reports/UpdateMetricAllowances", params, function (data) {
                        if (data == "OK") {
                            console.log("Saved");
                        }
                    });
                }
            });

            $(".target_allowance").blur(function () {
                metric = $(this).data("metric");
                attribute = $(this).data("attribute");
                value = $(this).val();
                init = $(this).data("init");
                element = $(this);
                try {
                    num_value = parseFloat(value);
                    if (isNaN(num_value)) {
                        element.val(init);
                        return;
                    }
                } catch (ex) {
                    console.log("error");
                    element.val(init);
                    return;
                }

                if (init != value) {
                    params = { "metric": metric, "attribute": attribute, "value": value };
                    $.post("/Reports/UpdateTargetAllowances", params, function (data) {
                        if (data == "OK") {
                            console.log("Saved");
                        }
                    });
                }
            });
        });
    </script>
}