@model RedHill.SalesInsight.Web.Html5.Models.ProjectView
@using RedHill.SalesInsight.DAL;
@using RedHill.SalesInsight.Web.Html5.Helpers;
@using RedHill.SalesInsight.DAL.DataTypes;
@{
    ViewBag.Title = "Add Project";
    ViewBag.UsingDatePicker = true;
    ViewBag.UsingMultiselect = true;
    ViewBag.UsingMaps = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var company = ConfigurationHelper.Company;
    var Unit = company.DeliveryQtyUomSingular;
    if (Model.CompanyEnableAggregate || Model.CompanyEnableBlock)
    {
        Unit = "Unit";
    }
}
<div class="page-head">
    <h2>Add Project</h2>
    <ol class="breadcrumb">
        <li><a href="/Home/Index">Home</a></li>
        <li><a href="/Home/Pipeline">Pipeline</a></li>
        <li class="active">New</li>
    </ol>
</div>
<div class="cl-mcont">
    <div>
        @using (Html.BeginForm("UpdateProject", "Home", FormMethod.Post, new { @class = "form form-horizontal" }))
        {
            if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger rounded">
                    @Html.ValidationSummary(false)
                </div>
            }
            <div class="block-flat">
                <div class="heading"><h3 class="underlined">Job Information</h3></div>
                <div class="content">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label class="control-label col-sm-3">Project Name</label>
                                <div class="col-sm-9">
                                    @Html.HiddenFor(m => m.ProjectId)
                                    @Html.TextBoxFor(m => m.ProjectName, new { @class = "form-control", @tabindex = "1" })
                                </div>
                            </div>
                            @*<div class="form-group">
                                    <label class="control-label col-sm-3">Address</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.Address, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-3">City</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => m.City, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-3">State</label>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(m => m.State, new { @class = "form-control" })
                                    </div>
                                    <label class="control-label col-sm-3">ZipCode</label>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(m => m.Zipcode, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-sm-3">Location</label>
                                    <div class="col-sm-9">
                                        <div class="col-xs-3 padding-0">
                                            @Html.TextBoxFor(m => m.Latitude, new { @class = "form-control",@readonly="readonly" })
                                        </div>
                                        <div class="col-xs-4">
                                            @Html.TextBoxFor(m => m.Longitude, new { @class = "form-control",@readonly="readonly" })
                                        </div>
                                        <div class="col-xs-4">
                                            <button type="button" class="btn btn-primary map_marker_btn" id="set_location_btn" data-address="@Model.AddressLine" data-latitude="@Model.Latitude" data-longitude="@Model.Longitude" data-default-latitude="" data-default-longitude="" >
                                                <i class="fa fa-map-marker fa-fw"></i>
                                                Set Location
                                            </button>
                                        </div>
                                    </div>
                                </div>*@
                            <div class="form-group">
                                <label class="control-label col-sm-3">Address</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(m => m.Address, new { @class = "form-control", @tabindex = "2" })
                                </div>
                            </div>
                            <div class="form-group" style="display: none;">
                                <label class="control-label col-sm-3">Location</label>
                                <div class="col-sm-9">
                                    <div class="col-xs-3 padding-0">
                                        @Html.TextBoxFor(m => m.Latitude, new { @class = "form-control", @readonly = "readonly" })
                                    </div>
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.Longitude, new { @class = "form-control", @readonly = "readonly" })
                                    </div>
                                    <div class="col-xs-4">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group" style="position: relative;">
                                <div class="map-preview-container">
                                    <button type="button" class="btn btn-sm @(Model.LocationSet ? "btn-primary" : "btn-danger") map_marker_btn abs" title="@((Model.LocationSet && ViewBag.RequireProjectLocation == false  ) ? "" : "The project location is required.") Click to set the project location" data-address="@Model.Address,@Model.City" data-latitude="@Model.Latitude" data-longitude="@Model.Longitude" data-default-latitude="" data-default-longitude="" data-trigger="modal" data-target="map_modal">
                                        <i class="fa fa-map-marker fa-fw"></i>
                                        Set Location
                                    </button>
                                    <div id="map_preview" class="map-preview" style="width: 100%; height: 200px;"></div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">City</label>
                                <div class="col-sm-3">
                                    @Html.TextBoxFor(m => m.City, new { @class = "form-control", @tabindex = "3" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">State</label>
                                <div class="col-sm-3">
                                    @Html.TextBoxFor(m => m.State, new { @class = "form-control", @tabindex = "4" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-sm-3">ZipCode</label>
                                <div class="col-sm-3">
                                    @Html.TextBoxFor(m => m.Zipcode, new { @class = "form-control", @tabindex = "5" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Market Segment</label>
                                <div class="col-sm-3">
                                    @Html.DropDownListFor(m => m.MarketSegmentId, new SelectList(Model.MarketList, "MarketSegmentId", "Name", Model.MarketSegmentId), "", new { @class = "form-control", @tabindex = "6" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Customer Job Ref</label>
                                <div class="col-sm-3">
                                    @Html.TextBoxFor(m => m.CustomerRefName, new { @class = "form-control", @tabindex = "7" })
                                </div>
                                <label class="control-label col-sm-3">Project Upload ID</label>
                                <div class="col-sm-3">
                                    @Html.TextBoxFor(m => m.ProjectRefId, new { @class = "form-control", @tabindex = "8" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">GC</label>
                                <div class="col-sm-9">
                                    <div class="input-group">
                                        @Html.DropDownListFor(m => m.ContractorId, new SelectList(Model.ContractorList, "ContractorId", "Name", Model.ContractorId), "", new { @class = "form-control multiselect" })
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-primary edit_contact_btn"><span class="glyphicon glyphicon-edit"></span></button>
                                            <button type="button" class="btn btn-success add_contact_btn"><span class="glyphicon glyphicon-plus"></span></button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-9 col-sm-offset-3">
                                    <div class="checkbox">
                                        <label>
                                            @Html.CheckBoxFor(m => m.Active, new { @tabindex = "10" })
                                            @Html.DisplayNameFor(m => m.Active)
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-9 col-sm-offset-3">
                                    <div class="checkbox">
                                        <label>
                                            @Html.CheckBoxFor(m => m.ExcludeFromReports, new { @tabindex = "11" })
                                            Exclude From Reports
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label class="control-label col-sm-3">Start Date</label>
                                <div class="col-sm-9">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.StartDate, "{0:M/d/yyyy}", new { @class = "form-control datepicker", @tabindex = "12" })
                                        <span class="input-group-btn">
                                            <button class="btn btn-default" type="button" data-picker="#StartDate">
                                                <i class="fa fa-calendar"></i>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">@Model.UDF1Label</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(m => m.UDF1, new { @class = "form-control", @tabindex = "13" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">@Model.UDF2Label</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(m => m.UDF2, new { @class = "form-control", @tabindex = "14" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Distance to Job</label>
                                <div class="col-sm-9">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.DistanceToJob, new { @class = "form-control", @tabindex = "15" })
                                        <span class="input-group-addon">miles</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">To Job</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.ToJobMinutes, new { @class = "form-control", @tabindex = "16" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                                <label class="control-label col-sm-3">Wait on Job</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.WaitOnJob, new { @class = "form-control", @tabindex = "17" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Wash</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.WashMinutes, new { @class = "form-control", @tabindex = "18" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                                <label class="control-label col-sm-3">Return</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.ReturnMinutes, new { @class = "form-control", @tabindex = "19" })
                                        <span class="input-group-addon">mins</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Delivery Instructions</label>
                                <div class="col-sm-9">
                                    @Html.TextAreaFor(m => m.DeliveryInstructions, new { @class = "form-control", @tabindex = "20" })
                                </div>
                            </div>
                            <div class="form-group qcReq">
                                <label class="control-label col-sm-3">QC Requirements</label>
                                <div class="col-md-9">
                                    @Html.HiddenFor(x => x.DistrictQcRequirement)
                                    @Html.DropDownList("QcReqIds", Model.QCRequirement, new { @class = "form-control multiselect", @multiple = "multiple" })
                                </div>
                            </div>
                            <div class="form-group backupPlant qcReq">
                                <label class="control-label col-sm-3">Backup Plant</label>
                                <div class="col-md-9">
                                    @Html.DropDownListFor(m => m.BackupPlantId, new SelectList(Model.BackupPlantList, "PlantId", "Name", Model.BackupPlantId), "", new { @class = "form-control multiselect" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="heading"><h3 class="underlined">Status and Bid Info</h3></div>
                <div class="content">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label class="control-label col-sm-3">Status</label>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(m => m.ProjectStatusId, new SelectList(Model.StatusList, "ProjectStatusId", "Name", Model.ProjectStatusId), "", new { @class = "form-control status_box" })
                                </div>
                            </div>
                            <div class="form-group won_lost">
                                <label class="control-label col-sm-3">Won/Lost Date</label>
                                <div class="col-sm-9">
                                    @if (Model.ProjectStatusType == RedHill.SalesInsight.DAL.DataTypes.SIStatusType.LostBid.Id)
                                    {
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.WonLostDate, "{0:M/d/yyyy}", new { @class = "form-control datepicker" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-default" type="button" data-picker="#WonLostDate">
                                                    <i class="fa fa-calendar"></i>
                                                </button>
                                            </span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.WonLostDate, "{0:M/d/yyyy}", new { @class = "form-control datepicker", @disabled = "disabled" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-default" type="button" data-picker="#WonLostDate">
                                                    <i class="fa fa-calendar"></i>
                                                </button>
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="form-group loss">
                                <label class="control-label col-sm-3">Reason Lost</label>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(m => m.ReasonLossId, new SelectList(Model.ReasonsForLossList, "ReasonLostId", "Reason", Model.ReasonLossId), string.Empty, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group loss">
                                <label class="control-label col-sm-3">Competitor</label>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(m => m.CompetitorId, new SelectList(Model.CompetitorList, "CompetitorId", "Name", Model.CompetitorId), string.Empty, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group loss">
                                <label class="control-label col-sm-3">Price Lost</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(m => m.PriceLost, "{0:N2}", new { @class = "form-control comma_field" })
                                </div>
                            </div>
                            <div class="form-group loss">
                                <label class="control-label col-sm-3">Notes</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(m => m.LostNotes, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Bid Date</label>
                                <div class="col-sm-9">
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.BidDate, "{0:M/d/yyyy}", new { @class = "form-control datepicker" })
                                        <span class="input-group-btn">
                                            <button class="btn btn-default" type="button" data-picker="#BidDate">
                                                <i class="fa fa-calendar"></i>
                                            </button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Sales Staff</label>
                                <div class="col-sm-9">
                                    @Html.DropDownListFor(m => m.SalesStaffId, new SelectList(Model.SalesStaffs, "SalesStaffId", "Name", Model.SalesStaffId), "", new { @class = "form-control multiselect" })
                                </div>
                            </div>

                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label class="control-label col-sm-3">Customer</label>
                                <div class="col-sm-9">
                                    <div class="input-group">
                                        @*  @Html.DropDownListFor(m => m.CustomerId, new SelectList(Model.CustomerList, "CustomerId", "Name", Model.CustomerId), "", new { @class = "form-control multiselect" })*@
                                        <select id="CustomerId" name="CustomerId" class="form-control multiselect">
                                            <option value=""></option>
                                        </select>
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-primary edit_customer_btn"><span class="glyphicon glyphicon-edit"></span></button>
                                            <button type="button" class="btn btn-success add_customer_btn"><span class="glyphicon glyphicon-plus"></span></button>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Valuation</label>
                                <div class="col-sm-9">
                                    <div class="input-group">
                                        <span class="input-group-addon">$</span>
                                        @Html.TextBoxFor(m => m.Valuation, "{0:###,###}", new { @class = "form-control comma_field" })
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Mix</label>
                                <div class="col-sm-9">
                                    @Html.TextBoxFor(m => m.Mix, new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Volume</label>
                                <div class="col-sm-3">
                                    <p class="form-control-static">
                                        @Model.Volume @company.DeliveryQtyUomPlural
                                    </p>
                                </div>
                                <label class="control-label col-sm-3">Price</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @if (Model.DisablePriceSpreadProfit)
                                        {
                                            @Html.TextBoxFor(m => m.Price, "{0:###,##.##}", new { @class = "form-control comma_field", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(m => m.Price, "{0:###,##.##}", new { @class = "form-control comma_field" })
                                        }
                                        <span class="input-group-addon">$/@Unit</span>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-3">Spread</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @if (Model.DisablePriceSpreadProfit)
                                        {
                                            @Html.TextBoxFor(m => m.Spread, "{0:###,##.##}", new { @class = "form-control comma_field", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(m => m.Spread, "{0:###,##.##}", new { @class = "form-control comma_field" })
                                        }
                                        <span class="input-group-addon">$/@Unit</span>
                                    </div>
                                </div>
                                <label class="control-label col-sm-3">Profit</label>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @if (Model.DisablePriceSpreadProfit)
                                        {
                                            @Html.TextBoxFor(m => m.Profit, "{0:###,##.##}", new { @class = "form-control comma_field", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(m => m.Profit, "{0:###,##.##}", new { @class = "form-control comma_field" })
                                        }
                                        <span class="input-group-addon">$/@Unit</span>
                                    </div>
                                </div>
                            </div>
                            @if (Model.ProjectPlants == null || Model.ProjectPlants.Count == 0)
                            {
                                <div class="form-group project_plant_div">
                                    <label class="control-label col-sm-3">
                                        Plant
                                    </label>
                                    <div class="col-sm-4">
                                        <input type="hidden" name="ProjectPlants[0].ProjectPlantId" class="project_plant_id" />
                                        @Html.DropDownList("ProjectPlants[0].PlantId", new SelectList(Model.PlantList, "PlantId", "Name", ""),
                                    new { @class = "form-control project_plant_ddl" })
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="input-group">
                                            @Html.TextBox("ProjectPlants[0].Volume", "", new { @class = "form-control project_volume project_plant_volume" })
                                            <span class="input-group-addon">Tons</span>
                                        </div>
                                    </div>
                                    <div class="col-sm-1">

                                    </div>
                                </div>
                            }
                            else
                            {
                                for (int i = 0; i < Model.ProjectPlants.Count; i++)
                                {
                                    <div class="form-group project_plant_div">
                                        <label class="control-label col-sm-3">Plant</label>
                                        <div class="col-sm-4">
                                            @Html.Hidden("ProjectPlants[" + i + "].ProjectPlantId", Model.ProjectPlants[i].ProjectPlantId, new { @class = "project_plant_id" })
                                            @Html.DropDownList("ProjectPlants[" + i + "].PlantId", new SelectList(Model.PlantList, "PlantId", "Name",
                                       Model.ProjectPlants[i].PlantId), new { @class = "form-control project_plant_ddl" })
                                        </div>
                                        <div class="col-sm-4">
                                            <div class="input-group">
                                                @Html.TextBox("ProjectPlants[" + i + "].Volume", Model.ProjectPlants[i].Volume, new { @class = "form-control comma_field project_volume project_plant_volume" })
                                                <span class="input-group-addon">

                                                    @{var productTypeId = Model.ProjectPlants[i].Plant.ProductTypeId; }
                                                    @if (productTypeId == (int)ProductType.Aggregate)
                                                    {
                                                        <span>Tons</span>
                                                    }
                                                    else if (productTypeId == (int)ProductType.Block)
                                                    {
                                                        <span>Units</span>
                                                    }
                                                    else
                                                    {
                                                        @company.DeliveryQtyUomPlural
                                                    }
                                                </span>
                                            </div>
                                        </div>
                                        <div class="col-sm-1">
                                            <p class="form-control-static">
                                                <a class="delete_project_plant btn btn-danger btn-xs">
                                                    <i class="fa fa-trash"></i>
                                                </a>
                                            </p>
                                        </div>
                                    </div>
                                                            }
                                                        }
                            <div class="form-group">
                                <label class="control-label col-sm-3">
                                    <a class="add_project_plant_btn btn-xs btn-primary btn" title="Add Plant/Volume Inputs">
                                        <i class="glyphicon glyphicon-plus"></i>
                                    </a>
                                </label>
                                <div class="col-sm-4" style="display:none">
                                    <input type="hidden" name="ProjectPlantId" class="project_plant_id" />
                                    @Html.DropDownList("ProjectPlantPlantId",
                                    new SelectList(Model.PlantList, "PlantId", "Name", ""),
                                    new { @class = "form-control project_plant_ddl" })
                                </div>
                                <div class="col-sm-4" style="display:none">
                                    <div class="input-group">
                                        <input name="ProjectPlantVolume" class="form-control project_plant_volume" />
                                        <span class="input-group-addon"></span>
                                    </div>
                                </div>
                                <div class="col-sm-1" style="display:none">
                                    <a class="delete_project_plant btn btn-danger btn-xs">
                                        <i class="fa fa-trash"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="text-right">
                        <button type="submit" name="command" class="btn btn-primary remove_commas_btn">
                            <i class="fa fa-cloud"></i>
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
                                                        }
    </div>
</div>
@using (Html.BeginForm("UpdateCustomer", "Json", FormMethod.Post, new { @class = "form form-horizontal" }))
{
    <div class="modal fade" id="NewCustomerModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Add New Customer</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label class="control-label col-md-4">Customer Name</label>
                        <div class="col-md-8">
                            @Html.Hidden("customer_id", "", new { @class = "form-control customer_id_field" })
                            @Html.TextBox("customer_name", "", new { @class = "form-control customer_name_field" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-4">Customer Number</label>
                        <div class="col-md-8">
                            @Html.TextBox("customer_number", "", new { @class = "form-control customer_number_field" })
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary update_customer_btn" name="ActionClicked" value="NewCustomer">Save changes</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
}
@using (Html.BeginForm("UpdateCustomerContact", "Json", FormMethod.Post, new { @class = "form form-horizontal" }))
{
    <div class="modal fade" id="NewCustomerContactModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Add New GC</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label class="control-label col-md-4">GC Name</label>
                        <div class="col-md-8">
                            @Html.Hidden("contact_id", "", new { @class = "form-control contact_id_field" })
                            @Html.TextBox("contact_name", "", new { @class = "form-control contact_name_field" })
                        </div>
                    </div>
                    @*<div class="form-group">
                            <label class="control-label col-md-4">Phone Number</label>
                            <div class="col-md-8">
                                @Html.TextBox("contact_phone", "", new { @class = "form-control contact_phone_field" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-4">Fax</label>
                            <div class="col-md-8">
                                @Html.TextBox("contact_fax", "", new { @class = "form-control contact_fax_field" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-4">Contact Email</label>
                            <div class="col-md-8">
                                @Html.TextBox("contact_email", "", new { @class = "form-control contact_email_field" })
                            </div>
                        </div>*@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary update_contact_btn">Save changes</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
}
@Html.Partial("_MapMarker", true)
@section Scripts{
    @Scripts.Render("~/js/project_loc")
    <style type="text/css">
        .won_lost {
            @if (Model.ProjectStatusType != RedHill.SalesInsight.DAL.DataTypes.SIStatusType.LostBid.Id
                && Model.ProjectStatusType != RedHill.SalesInsight.DAL.DataTypes.SIStatusType.Sold.Id)
            {
                <text>
                display:none;
                </text>
            }
        }

        .loss {
            @if (Model.ProjectStatusType != RedHill.SalesInsight.DAL.DataTypes.SIStatusType.LostBid.Id)
            {
                <text>
                display:none;
                </text>
            }
        }
        #SalesStaffId.input-validation-error+p,#QcReqIds.input-validation-error+p,#BackupPlantId.input-validation-error+p
        {
           background-color: #f7caca !important;
        }
        #SalesStaffId.input-validation-error+p>span,#QcReqIds.input-validation-error+p>span,#BackupPlantId.input-validation-error+p>span
        {
           color: #322929 !important;
        }
    </style>
    <script type="text/javascript">
        var setPlantVolumeUnit = function (plantDDL) {
            var drp = $(plantDDL);
            var plantId = drp.val();
            $.post("/Json/GetPlantProductType", { "plantId": plantId }, function (data) {
                var drpParent = drp.parents(".project_plant_div");
                drpParent.find(".input-group-addon").html(data.productType);
            });
        }

        $(document).on("change", ".project_plant_ddl", function () {
            var drp = $(this);
            setPlantVolumeUnit(drp);
        });

        $(document).ready(function () {
            var defaultPlantDDL = $('select#ProjectPlants_0__PlantId option:selected');
            var selectedPlantId = defaultPlantDDL.val();

            setPlantVolumeUnit(defaultPlantDDL);
            checkPlantDistrictQcReq(selectedPlantId);
            hideShowBackupPlant(true);

            function checkPlantDistrictQcReq(selectedPlantId) {
                var hiddenDistrictQcReq = $("#DistrictQcRequirement");
                var qcReq = $(".qcReq");
                if ($(".project_plant_div").length == 1) {

                    $.get("/Json/GetAllDistrictQCRequirement", function (data) {
                        var info = JSON.parse(data);
                        var isQCReq = info.qcRequirement;
                        if (isQCReq == true) {
                            qcReq.show();
                            hiddenDistrictQcReq.val(true);
                            hideShowBackupPlant(true);
                            if (selectedPlantId != 0) {
                                $.get("/Json/GetPlantDistrictQCRequirement", { "plantId": selectedPlantId }, function (data) {
                                    var info = JSON.parse(data);
                                    var isQCReq = info.qcRequirement;
                                    if (isQCReq == false) {
                                        hiddenDistrictQcReq.val(false);
                                        hideShowBackupPlant(false);
                                    }
                                    else {
                                        hiddenDistrictQcReq.val(true);
                                        hideShowBackupPlant(true);
                                    }
                                });
                            }
                        } else {
                            qcReq.hide();
                            hiddenDistrictQcReq.val(false);
                            hideShowBackupPlant(true);
                        }
                    });
                }
            }

            $(document).on('change', '.project_plant_volume,.project_plant_ddl', function () {
                checkDistrictQcReq();
            }).on("click", ".delete_project_plant", function () { checkDistrictQcReq(); });

            function checkDistrictQcReq() {
                var oldData = -1;
                var num = 0;
                var plantId = 0
                if ($(".project_plant_div").length > 1) {
                    $(".project_plant_div").each(function (i, val) {
                        //var plantVolume = ($(this).find(".project_plant_volume").val() == "" ? 0 : $(this).find(".project_plant_volume").val());
                        var newData = parseInt($(this).find(".project_plant_volume").val().replace(/,/g, ''));
                        if (newData > oldData) {
                            oldData = newData;
                            num = i;
                            plantId = $(this).find(".project_plant_ddl option:selected").val();
                        }
                    });
                    $.get("/Json/GetPlantDistrictQCRequirement", { "plantId": plantId }, function (data) {
                        var info = JSON.parse(data);
                        var isQCReq = info.qcRequirement;
                        $("#DistrictQcRequirement").val(isQCReq);
                        if (isQCReq == false) {
                            $(".qcReq").hide();
                        } else {
                            $(".qcReq").show();
                        }
                        hideShowBackupPlant(true);
                    });
                }
                else {
                   var selectPlantId = $('select#ProjectPlants_0__PlantId option:selected').val();
                   checkPlantDistrictQcReq(selectPlantId);
                }
            }

            var selectedOption=0;
            $("#QcReqIds").change(function () {
                var currentSelection;
                if (selectedOption) {
                    var currentValues = $(this).val();
                    if (currentValues != null) {
                        currentSelection = currentValues.filter(function (el) {
                            return selectedOption.indexOf(el) < 0;
                        });
                    }
                }
                selectedOption = $(this).val();

                console.log("currentSelection = "+currentSelection);
                if (currentSelection != "5" && currentSelection != undefined)
                {
                     $("#QcReqIds")[0].sumo.unSelectItem('5');
                }

                displayBackupPlant();

            });

            function displayBackupPlant()
            {
                var qcReq = $("#QcReqIds");
                var backupPlant = $(".backupPlant");
                var selectedItems = $("#QcReqIds option:selected");
                selectedItems.each(function (i, val) {
                    var $this = $(this);
                    console.log("$this.length = " + $this.length);
                    if ($this.length) {
                        var selId = $this.val();
                        console.log(selId + " value");

                        if (selId == "5") {
                            backupPlant.hide();
                            console.log("Hide Backup Plant");
                            $("#QcReqIds option:selected").removeAttr("selected");
                            qcReq.val('5');
                            qcReq[0].sumo.reload();
                        }
                        else {
                                backupPlant.show();
                                console.log("Show Backup Plant");
                        }
                    }
                });
            }


            function hideShowBackupPlant(selectedPlantQcReq) {
                var qcReq = $("#QcReqIds");
                var backupPlant = $(".backupPlant");
                var selectedItems = $("#QcReqIds option:selected");
                if (selectedItems.length > 0) {
                    if ($("#DistrictQcRequirement").val() == "true") {
                        selectedItems.each(function (i, val) {
                            var $this = $(this);
                            console.log("$this.length = " + $this.length);
                            if ($this.length) {
                                var selId = $this.val();
                                console.log(selId + " value");

                                if (selId == "5") {
                                    backupPlant.hide();
                                    console.log("Hide Backup Plant");
                                    $("#QcReqIds option:selected").removeAttr("selected");
                                    qcReq.val('5');
                                    qcReq[0].sumo.reload();
                                }
                                else {
                                    var isQCReq = $("#DistrictQcRequirement").val();
                                    if (isQCReq != "false") {
                                        backupPlant.show();
                                        console.log("Show Backup Plant");
                                    }
                                }
                            }
                        });
                    }
                    else {
                        //var selectedPlantId = $('select#ProjectPlants_0__PlantId option:selected').val();
                            //checkPlantDistrictQcReq(selectedPlantId);
                    //    if ($(".project_plant_div").length == 1) {
                    //        var selectedPlantId = $('select#ProjectPlants_0__PlantId option:selected').val();
                    //        checkPlantDistrictQcReq(selectedPlantId);
                    //    }
                    //    else {

                    //        console.log("Hide if QC is selected and hidden field QC Req is false");
                            $(".qcReq").hide();
                    }
                }
                else {
                    if ($("#DistrictQcRequirement").val() == "false") {
                        $(".qcReq").hide();
                        if (selectedPlantQcReq != true) {
                            $(".qcReq").show();
                        }
                    }
                    backupPlant.hide();
                    console.log("just hide the BakupPlant if nothing is selected");
                }
            }


             var custListDDL = $("#CustomerId");
            var customersOptions = [];
               $.ajax({
                   url: '/Quote/GetCustomerList',
                method: 'POST',
                success: function (data) {
                    var customerList = data.customers;

                    for (var i = 0; i < customerList.length; i++) {
                        var custName = customerList[i].Name;
                        var custId = customerList[i].CustomerId;
                        var custOption = document.createElement('OPTION');
                        custOption.text = custName;
                        custOption.value = custId;
                        customersOptions.push(custOption);
                    }
                    custListDDL.append(customersOptions);
                    custListDDL[0].sumo.reload();
                },
                error: function (res) {
                    console.log(res);
                }
            });


            $(".set-location").click(function () {
                if ($("#pu_address").val() != "") {
                    $("#Address").val($("#pu_address").val());
                }
                if ($("#pu_state").val() != "") {
                    $("#State").val($("#pu_state").val());
                }
                if ($("#pu_city").val() != "") {
                    $("#City").val($("#pu_city").val());
                }
               });

            $("[data-picker]").click(function () {
                var $item = $($(this).data("picker"));
                if ($item && $item.length > 0) {
                    var visible = $('#ui-datepicker-div').is(':visible');
                    $item.datepicker(visible ? 'hide' : 'show');
                }
            });

        $('.datepicker').datepicker({ format: "m/d/yyyy" }).on("changeDate", function (ev) {
            $("div.datepicker").hide();
        });

        loadMapPreview();

        $('body').on('change', '#Address, #City, #State', function (e, data) {
            update_new_address();
        });

        function update_new_address() {
            new_address = $("#Address").val() + ", " + $("#City").val() + ", " + $("#State").val();
            $(".map_marker_btn").data("address", new_address);
            $(".map_marker_btn").data("latitude", "").data("longitude", "");
            if (markers.length > 0) {
                markers[0].setMap(null);
            }
            refreshMapPreview(true);
        }
        $("body").on("MarkerMoved", function (e, data) {
            $("#Latitude").val(e.latitude);
            $("#Longitude").val(e.longitude);
            if (markers.length > 0) {
                markers[0].setMap(null);
            }
            refreshMapPreview();
        });
        $("#set_location_btn").click(function () {
            new_address = $("#Address").val() + "," + $("#City").val() + "," + $("#State").val() + "," + $("#Zipcode").val();
            modal = $("#map_modal").modal("show");
            $(".map_marker_btn").data("address", new_address);
        });

        $("body").on("change", '#Address', function (e, data) {
            new_address = $("#Address").val() + "," + $("#City").val() + "," + $("#State").val() + "," + $("#Zipcode").val();
            console.log(new_address);
            new_address = new_address.replace(",,", ",");
            new_address = new_address.replace(",,", ",");
            new_address = new_address.replace(",,", ",");
            //console.log(new_address);
            $(".map_marker_btn").data("address", new_address);
        });


        $("body").on("MapMoved", function (e, data) {
        });

        $(".edit_customer_btn").click(function () {
            selected_entity_id = $("#CustomerId").val();
            $.get("/Json/GetCustomerDetails", { "id": selected_entity_id }, function (data) {
                info = JSON.parse(data);
                $("#NewCustomerModal").find(".customer_name_field").val(info.name);
                $("#NewCustomerModal").find(".customer_number_field").val(info.number);
                $("#NewCustomerModal").find(".customer_id_field").val(info.id);
                $("#NewCustomerModal").find(".modal-title").text("Edit Customer");
                $("#NewCustomerModal").modal("show");
            });
        });

        $(".add_customer_btn").click(function () {
            $("#NewCustomerModal").find(".customer_name_field").val("");
            $("#NewCustomerModal").find(".customer_number_field").val("");
            $("#NewCustomerModal").find(".customer_id_field").val("");
            $("#NewCustomerModal").find(".modal-title").text("Add New Customer");
            $("#NewCustomerModal").modal("show");
        });

        $(".update_customer_btn").click(function () {
            name = $("#NewCustomerModal").find(".customer_name_field").val();
            number = $("#NewCustomerModal").find(".customer_number_field").val();
            id = $("#NewCustomerModal").find(".customer_id_field").val();
            $.post("/Json/UpdateCustomer", { "id": id, "name": name, "number": number }, function (data) {
                info = JSON.parse(data);
                console.log(info);
                if (info.status == "error") {
                    alert(info.message);
                } else {
                    if (id == "" || id == undefined) {
                        addOption("#CustomerId", info.name, info.id);
                        //$("#CustomerId").multiselect("rebuild");
                    } else {
                        removeOption("#CustomerId", info.id);
                        addOption("#CustomerId", info.name, info.id);
                        //$("#CustomerId").multiselect("rebuild");
                    }
                    $("#CustomerId")[0].sumo.reload();
                    var IdIndex = $("#CustomerId").find('option[value="' + info.id + '"]').index();
                    $("#CustomerId")[0].sumo.selectItem(IdIndex);
                    //$("#CustomerId").multiselect("select", info.id);
                    $("#CustomerId").trigger("change");
                    $("#NewCustomerModal").modal("hide");
                }
            });
        });

        $(".edit_contact_btn").click(function () {
            selected_entity_id = $("#ContractorId").val();
            $.get("/Json/GetContractorDetails", { "id": selected_entity_id }, function (data) {
                info = JSON.parse(data);
                $("#NewCustomerContactModal").find(".contact_name_field").val(info.name);
                //$("#NewCustomerContactModal").find(".contact_phone_field").val(info.phone);
                //$("#NewCustomerContactModal").find(".contact_fax_field").val(info.fax);
                //$("#NewCustomerContactModal").find(".contact_email_field").val(info.email);
                $("#NewCustomerContactModal").find(".contact_id_field").val(info.id);
                $("#NewCustomerContactModal").find(".modal-title").text("Edit GC");
                $("#NewCustomerContactModal").modal("show");
            });
        });

        $(".add_contact_btn").click(function () {
            $("#NewCustomerContactModal").find(".contact_name_field").val("");
            //$("#NewCustomerContactModal").find(".contact_phone_field").val("");
            //$("#NewCustomerContactModal").find(".contact_fax_field").val("");
            //$("#NewCustomerContactModal").find(".contact_email_field").val("");
            $("#NewCustomerContactModal").find(".contact_id_field").val("");
            $("#NewCustomerContactModal").find(".modal-title").text("New GC");
            $("#NewCustomerContactModal").modal("show");
        });

        $(".update_contact_btn").click(function () {
            name = $("#NewCustomerContactModal").find(".contact_name_field").val();
            //phone = $("#NewCustomerContactModal").find(".contact_phone_field").val();
            //fax = $("#NewCustomerContactModal").find(".contact_fax_field").val();
            //email = $("#NewCustomerContactModal").find(".contact_email_field").val();
            id = $("#NewCustomerContactModal").find(".contact_id_field").val();
            customerId = $("#CustomerId").val();
            params = { "id": id, "customerId": customerId, "name": name };
            $.get("/Json/UpdateContractor", params, function (data) {
                console.log(data);
                info = JSON.parse(data);
                console.log(info);
                if (info.status == "error") {
                    alert(info.message);
                } else {
                    if (id == "" || id == undefined) {
                        addOption("#ContractorId", info.name, info.id);
                        //$("#ContractorId").multiselect("rebuild");
                    } else {
                        removeOption("#ContractorId", info.id);
                        addOption("#ContractorId", info.name, info.id);
                        //$("#ContractorId").multiselect("rebuild");
                    }
                    console.log("done");
                    //$("#ContractorId").multiselect("select", info.id);
                    $("#ContractorId")[0].sumo.reload();
                    var IdIndex = $("#ContractorId").find('option[value="' + info.id + '"]').index();
                    $("#ContractorId")[0].sumo.selectItem(IdIndex);

                    $("#ContractorId").trigger("change");
                    $("#NewCustomerContactModal").modal("hide");
                }
            });
        });

        $("body").on("click", ".add_project_plant_btn", function () {
            div = $(this).parents(".form-group");
            var plantDDL = div.find(".project_plant_ddl");
            setPlantVolumeUnit(plantDDL);
            html = div.html();
            //console.log(html);
            html = "<div class='form-group'>" + html + "</div>";
            div.parent().append(html);
            div.find(":hidden").show();
            div.find(".add_project_plant_btn").remove();
            div.find(".control-label").text("Plant");
            div.addClass("project_plant_div");
            update_indexes();
        });

        $("body").on("click", ".delete_project_plant", function () {
            div = $(this).parents(".form-group");
            div.remove();
            update_indexes();
        });

        function update_indexes() {
            $(".project_plant_div").each(function (index, item) {
                div = $(item);
                div.find(".project_plant_id").attr("name", "ProjectPlants[" + index + "].ProjectPlantId");
                console.log(div.find(".project_plant_id").attr("name"));
                div.find(".project_plant_ddl").attr("name", "ProjectPlants[" + index + "].PlantId");
                div.find(".project_plant_volume").attr("name", "ProjectPlants[" + index + "].Volume");
            });
        }

        $(".status_box").change(function (e) {
            lostBids = [@(string.Join(",", Model.LostBidsStatusIds))];
            wonStatuses = [@(string.Join(",", Model.WonStatusIds))];
            selected = parseInt($(this).val());
            if (lostBids.indexOf(selected) >= 0) {
                $(".won_lost").slideDown();
                if ($("#WonLostDate").val() == "") {
                    $("#WonLostDate").val('@DateTime.Today.ToString("M/d/yyyy")')
                }
                $("#WonLostDate").prop("disabled", false);
                $(".loss").slideDown();
                return;
            }
            if (wonStatuses.indexOf(selected) >= 0) {
                $(".won_lost").slideDown();
                if ($("#WonLostDate").val() == "") {
                    $("#WonLostDate").val('@DateTime.Today.ToString("M/d/yyyy")')
                }
                $(".loss").slideUp();
                $("#WonLostDate").prop("disabled", false);
                return;
            }
            $(".won_lost").slideUp();
            $("#WonLostDate").prop("disabled", true);
            $(".loss").slideUp();
        });
        setTimeout(function () {
            $(".sumo_ContractorId").attr("tabindex", "9");
        }, 1000);
    });
    </script>
}
